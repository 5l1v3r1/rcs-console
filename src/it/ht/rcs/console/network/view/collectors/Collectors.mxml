<?xml version="1.0" encoding="utf-8"?>
<s:VGroup xmlns:fx="http://ns.adobe.com/mxml/2009"
          xmlns:s="library://ns.adobe.com/flex/spark"
          xmlns:mx="library://ns.adobe.com/flex/mx"
          xmlns:collectors="it.ht.rcs.console.network.view.collectors.*"
          left="5" right="5" top="0" bottom="5" addedToStage="onAddedToStage(event)"
          removedFromStage="onRemovedFromStage(event)">

  
  <s:BorderContainer width="100%" height="228" dropShadowVisible="true">
    
    <collectors:CollectorList id="collectors" left="5" right="5" top="5" bottom="5" width="100%"
                              borderVisible="false" change="onCollectorsListSelection(event)"
                              dataProvider="{_collector_view}" keyDown="enter(event)"/>
    
    <s:Button right="33" bottom="1" width="32" height="20" label="-" click="deleteCollector()"
              enabled="{collectors.selectedItem != null}" styleName="AddRemove"
              toolTip="{R.get('COLLECTOR_DELETE')}"/>
    <s:Button right="1" bottom="1" width="32" height="20" label="+" click="addCollector()"
              styleName="AddRemove" toolTip="{R.get('COLLECTOR_ADD')}"/>
  
  </s:BorderContainer>
  
  <s:HGroup>
    <s:Button width="30" height="20" skinClass="it.ht.rcs.console.skins.HeartbeatButton"
              toolTip="{R.get('HEALTH_CHECK')}" click="onHealthCheck()"/>
    <s:Button width="30" height="20" skinClass="it.ht.rcs.console.skins.ApplyButton"
              toolTip="{R.get('APPLY_TOPOLOGY')}"/>
  </s:HGroup>
  
  <s:Scroller id="stageScroller" width="100%" height="100%">
    <collectors:NetworkGraph id="networkGraph" rootNode="{rootNode}"/>
  </s:Scroller>
  
  
  <fx:Script>
    <![CDATA[
      import it.ht.rcs.console.events.NodeEvent;
      import it.ht.rcs.console.events.RefreshEvent;
      import it.ht.rcs.console.network.controller.CollectorManager;
      import it.ht.rcs.console.network.model.Collector;
      import it.ht.rcs.console.network.view.collectors.renderers.CollectorRenderer;
      import it.ht.rcs.console.network.view.collectors.renderers.DBRenderer;
      import it.ht.rcs.console.utils.AlertPopUp;
      
      import locale.R;
      
      import mx.collections.ArrayCollection;
      import mx.collections.ListCollectionView;
      import mx.core.FlexGlobals;
      import mx.events.CloseEvent;
      import mx.managers.PopUpManager;
      
      import spark.events.IndexChangeEvent;
      
      [Bindable]
      private var _collector_view:ListCollectionView;
      
      [Bindable]
      private var rootNode:DBRenderer;
      
      private function onAddedToStage(event:Event):void
      {
        CollectorManager.instance.addEventListener('dataLoaded', onDataLoaded);
        _collector_view = CollectorManager.instance.getView();
        addEventListener(NodeEvent.CHANGED, onNodeChanged);
        FlexGlobals.topLevelApplication.addEventListener(RefreshEvent.REFRESH, onRefresh);
      }
      
      private function onDataLoaded(event:Event):void {
        buildGraph();
      }
      
      private function onRemovedFromStage(event:Event):void
      {
        CollectorManager.instance.removeEventListener('dataLoaded', onDataLoaded);
        removeEventListener(NodeEvent.CHANGED, onNodeChanged);
        FlexGlobals.topLevelApplication.removeEventListener(RefreshEvent.REFRESH, onRefresh);
      }
      
      private function onRefresh(event:RefreshEvent):void
      {
        buildGraph();
      }
      
      public function buildGraph():void
      {
        var nodes:Vector.<CollectorRenderer> = new Vector.<CollectorRenderer>();
        for each (var el:Collector in _collector_view)
          nodes.push(new CollectorRenderer(el));
        
        var collectors:Vector.<CollectorRenderer> = new Vector.<CollectorRenderer>();
        for each (var node:CollectorRenderer in nodes) {
          if (node.collector.type == 'local')
            collectors.push(node);
          var nextHop:CollectorRenderer = node.collector.next ? getRendererById(node.collector.next[0], nodes) : null;
          node.nextHop = nextHop;
        }
        
        var db:DBRenderer = new DBRenderer();
        db.collectors = collectors;
        rootNode = db;
      }
      
      private function getRendererById(_id:String, list:Vector.<CollectorRenderer>):CollectorRenderer
      {
        if (_id != null)
        {
          for each (var cr:CollectorRenderer in list)
            if (cr.collector._id == _id)
              return cr;
        }
        return null;
      }
      
      private function addCollector():void
      {
        CollectorManager.instance.addProxy(function onSuccess(collector:Collector):void {
          collectors.selectedItem = collector;
          createCollector(collector);
        });
      }
      
      private function editCollector(collector:Collector):void
      {
        var popup:EditCollectorForm = PopUpManager.createPopUp(this.parentDocument as DisplayObject, EditCollectorForm, true) as EditCollectorForm;
        popup.collector = collector;
        PopUpManager.centerPopUp(popup);
      }
      
      private function createCollector(collector:Collector):void
      {
        var popup:CreateCollectorForm = PopUpManager.createPopUp(this.parentDocument as DisplayObject, CreateCollectorForm, true) as CreateCollectorForm;
        popup.collector = collector;
        PopUpManager.centerPopUp(popup);
      }
      
      private function deleteCollector():void
      {
        AlertPopUp.show(R.get('CONFIRM_COLLECTOR_DELETION') + ' ' + collectors.selectedItem.name + '?',
                        R.get('CONFIRM'),
                        AlertPopUp.YES | AlertPopUp.NO,
                        null,
                        function(e:CloseEvent):void {
                          if (e.detail == AlertPopUp.YES) {
                            CollectorManager.instance.removeItem(collectors.selectedItem);
                            buildGraph();
                          }
                        },
                        null, AlertPopUp.NO);
      }
      
      private function enter(event:KeyboardEvent):void
      {
        if (event.keyCode == Keyboard.ENTER && collectors.selectedItem != null)
          editCollector(collectors.selectedItem);
      }
      
      private function onNodeChanged(event:Event):void
      {
        trace("Collectors, NodeEvent");
      }
      
      private function onCollectorsListSelection(event:IndexChangeEvent):void
      {
        networkGraph.selectNode(collectors.selectedItem);
      }
      
      protected function onHealthCheck():void
      {
        var ips:ArrayCollection = new ArrayCollection();
        for each (var c:CollectorRenderer in rootNode.collectors) {
          while (c.nextHop != null)
           c = c.nextHop;
          ips.addItem(c.collector.address);
        }
          
        var popup:HealthCheckWindow = PopUpManager.createPopUp(this.parentDocument as DisplayObject, HealthCheckWindow, true) as HealthCheckWindow;
        popup.ips = ips;
        PopUpManager.centerPopUp(popup);
      }
      
    ]]>
  </fx:Script>
  
</s:VGroup>