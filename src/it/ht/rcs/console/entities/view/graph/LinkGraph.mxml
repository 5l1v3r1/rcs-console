<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009"
				 xmlns:s="library://ns.adobe.com/flex/spark"
				 xmlns:mx="library://ns.adobe.com/flex/mx"
				 xmlns:diagrammer="fr.kapit.diagrammer.*"
				 width="100%"
				 height="100%"
				 xmlns:visualizer="fr.kapit.visualizer.*"
				 resize="onResize(event)">
	<fx:Metadata> 
    [Event(name="selectionChange", type="flash.events.Event")] 
    [Event(name="elementDoubleClick", type="flash.events.Event")] 
  </fx:Metadata>


	<fx:Script>
		<![CDATA[
      import flash.net.dns.AAAARecord;
      import flash.utils.setTimeout;
      
      import fr.kapit.diagrammer.base.uicomponent.DiagramGroup;
      import fr.kapit.layouts.algorithms.balloon.BalloonLayout;
      import fr.kapit.layouts.algorithms.balloon.BalloonLayoutParams;
      import fr.kapit.layouts.algorithms.forcedirected.gem.StaticGEMLayout;
      import fr.kapit.layouts.algorithms.forcedirected.gem.StaticGemLayoutParams;
      import fr.kapit.layouts.algorithms.radial.RadialLayout;
      import fr.kapit.layouts.algorithms.radial.RadialLayoutParams;
      import fr.kapit.layouts.constants.RootSelectionType;
      import fr.kapit.visualizer.base.ISprite;
      import fr.kapit.visualizer.base.uicomponent.GenericGroup;
      import fr.kapit.visualizer.base.uicomponent.GenericSprite;
      import fr.kapit.visualizer.events.VisualizerEvent;
      import fr.kapit.visualizer.styles.LinkStyle;
      
      import it.ht.rcs.console.entities.controller.EntityManager;
      import it.ht.rcs.console.entities.model.Entity;
      import it.ht.rcs.console.entities.model.Link;
      import it.ht.rcs.console.entities.view.renderers.CustomGroupRenderer;
      import it.ht.rcs.console.entities.view.renderers.CustomLink;
      import it.ht.rcs.console.entities.view.renderers.CustomNodeRenderer;
      import it.ht.rcs.console.search.controller.SearchManager;
      
      import mx.collections.ArrayCollection;
      import mx.core.UIComponent;
      import mx.events.DragEvent;
      import mx.events.ResizeEvent;
      
      import spark.collections.Sort;
      import spark.collections.SortField;

			private var sort:Sort;
			private var entities:ArrayCollection
      
      private var positions:Dictionary;


			public var selection:Array;

			protected function onElementDoubleClick(event:VisualizerEvent):void
			{
				dispatchEvent(new Event("elementDoubleClick"))

			}

			protected function onSelectionChange(event:VisualizerEvent):void
			{
				selection=vis.selection
				dispatchEvent(new Event("selectionChange"))
			}

			private function initGraph():void
			{
			

				sort=new Sort();
				sort.fields=[new SortField("type", true), new SortField("name", false)]

				var layout:BalloonLayout=vis.layout as BalloonLayout;
				var params:BalloonLayoutParams=new BalloonLayoutParams(layout); //TRY RADIAL

				//highlightLinksOnSelection="false"
				params.nodesSpacing=50;
				params.loopMargin=50;
				params.loopSpacing=50;
				params.childAngularSector=360;
				params.useEvenAngles=false;
				params.rootAngularSector=180;
				params.rootSelectionPolicy=RootSelectionType.MOST_CLOSED_ROOT_SELECTION; //avoid overlap in a pile
				params.overlappingAvoidMethod=0;
				params.packingSpacing=50

				vis.balloonLayout.params=params;

				vis.reLayout()

				vis.itemsFactory.addOrReplaceClassReference('link', CustomLink);
        
        positions=new Dictionary()

			}


			private function linkStyleFunction(data:Object):LinkStyle
			{
				var linkStyle:LinkStyle=new LinkStyle();

				linkStyle.arrowWidth=10
				linkStyle.arrowHeight=20
				linkStyle.arrowRadius=10
				linkStyle.thickness=2
				//relevance

				if (data['rel'] == '0')
					linkStyle.lineColor=0x333333
				else if (data['rel'] == '1')
					linkStyle.lineColor=0x999999
				else if (data['rel'] == '2')
					linkStyle.lineColor=0x5DE35F
				else if (data['rel'] == '3')
					linkStyle.lineColor=0xFFDC42
				else if (data['rel'] == '4')
					linkStyle.lineColor=0xFF4034


				//direction
				if (data['versus'] == 'in')
				{
					linkStyle.arrowSourceType=LinkStyle.LINK_ARROW_ARROW_TYPE
					linkStyle.arrowTargetType=LinkStyle.LINK_ARROW_NONE_TYPE

				}
				else if (data['versus'] == 'out')
				{
					linkStyle.arrowSourceType=LinkStyle.LINK_ARROW_NONE_TYPE
					linkStyle.arrowTargetType=LinkStyle.LINK_ARROW_ARROW_TYPE
				}
				else if (data['versus'] == 'both')
				{
					linkStyle.arrowSourceType=LinkStyle.LINK_ARROW_ARROW_TYPE;
					linkStyle.arrowTargetType=LinkStyle.LINK_ARROW_ARROW_TYPE;
				}

				//type
				if (data['type'] == 'peer')
					linkStyle.renderingPolicy=LinkStyle.LINK_RENDERING_SOLID;
				else if (data['type'] == 'know')
					linkStyle.renderingPolicy=LinkStyle.LINK_RENDERING_DASH;

				return linkStyle;
			}

			private function nodeRendererFunction(data:Object):CustomNodeRenderer
			{
				var renderer:CustomNodeRenderer=new CustomNodeRenderer();
				if (data['type'] == "target")
					renderer.icon.source=renderer.TargetIcon;
				else if (data['type'] == "person")
					renderer.icon.source=renderer.PersonIcon;
				else if (data['type'] == "position")
					renderer.icon.source=renderer.PositionIcon;
				else if (data['type'] == "virtual")
					renderer.icon.source=renderer.VirtualIcon;

				renderer.label.text=data['name'];

				return renderer
			}

			public function draw(entities:ArrayCollection, filterCriteria:Object=null):void
			{

				this.entities=entities;

				if (entities.length == 0 || !entities)
				{
					vis.visible=false;
					return;
				}
				vis.visible=true;
				vis.enablePan=false;
				vis.enableSelectionDrag=false; //??

				vis.removeAll()
				vis.clearAll()

				entities.sort=sort;
				entities.refresh();

				var i:int;
				var entity:Entity;
				var link:Link;

				var source:ISprite;
				var target:ISprite;

				var child:Entity
				var children:ArrayCollection=new ArrayCollection();
				var c:int;

				//add Node Elements
				for (i=0; i < entities.length; i++)
				{
					entity=entities.getItemAt(i) as Entity;
					//entity node
					if (entity.type != "group")
					{
            var point:Point=new Point()
            if(positions[entity._id])
            {
              point.x=positions[entity._id].x
              point.y=positions[entity._id].y
            }
            else
            {
              point=null
              positions[entity._id]=new Point()
            }
						vis.addNodeElement(entity, null, null, point, entity._id) as GenericSprite
            
					}
					//
					else if (entity.type == "group" && entity.stand_for) //other operation
					{
						var hasPermission:Boolean=SearchManager.instance.getItem(entity.stand_for)
						if (hasPermission) //allowed operation
						{
							for (c=0; c < entity.children.length; c++)
							{
								child=EntityManager.instance.getItem(String(entity.children.getItemAt(c)))
								if (child)
								{
									children.addItem(child)
									vis.addNodeElement(child, null, null, null, child._id)
								}
							}

						}
						else //! allowed operation
						{
							for (c=0; c < entity.children.length; c++)
							{
								child=new Entity({_id: entity.children.getItemAt(c), type: "person"})
								if (child)
								{
									children.addItem(child)
									vis.addNodeElement(child, null, null, null, child._id)
								}
							}
						}
					}

				}
				//vis.reLayout()
				//links
				for (i=0; i < children.length; i++)
				{
					child=children.getItemAt(i) as Entity
					entities.addItem(child)
				}

				drawLinks(entities, filterCriteria)
				//groups

				//vis.reLayout(); //??
				addGroups();
			}

			public function addGroups():void
			{
				var elements:Array;
				var c:int;

				for (var i:int=0; i < entities.length; i++)
				{
					var entity:Entity=entities.getItemAt(i) as Entity;
					if (entity.type == "group" && !entity.stand_for) //same operation
					{
						elements=new Array();
						for (c=0; c < entity.children.length; c++)
						{
							elements.push(vis.nodesMap[entity.children[c]]);
						}
						vis.groupElements(entity, elements, null, entity._id);
					}

					if (entity.type == "group" && entity.stand_for) //same operation
					{
						elements=new Array();
						for (c=0; c < entity.children.length; c++)
						{
							elements.push(vis.nodesMap[entity.children[c]]);
						}
						vis.groupElements(entity, elements, null, entity._id);
						var hasPermission:Boolean=SearchManager.instance.getItem(entity.stand_for)
						if (!hasPermission)
						{
							trace("close group renderer")
							var s:GenericGroup=vis.nodesMap[entity._id] as GenericGroup;
							if (s)
							{
								s.isGroupExpanded=false;
								s.forceNoExpandGroupButton=true;
							}

						}
					}
				}

				//vis.reLayout();
				vis.enableSelectionDrag=true;
				vis.enablePan=true;
				dispatchEvent(new Event("selectionChange"))
				//vis.setFocus()
				vis.invalidateDisplayList()
				setTimeout(collapseAll, 100)
			}

			private function collapseAll():void
			{
				for each (var node:Object in vis.nodesMap)
				{
					if (node is GenericGroup && GenericGroup(node).isGroupExpanded && !GenericGroup(node).forceNoExpandGroupButton)
						GenericGroup(node).isGroupExpanded=false
				}
			}

			private function drawLinks(entities:ArrayCollection, filterCriteria:Object=null):void
			{
				var i:int;
				var link:Link
				var entity:Entity;
				var source:ISprite;
				var target:ISprite;
				var links:Array=new Array()

				for (i=0; i < entities.length; i++)
				{
					entity=entities.getItemAt(i) as Entity;
					if (!entity)
						continue;
					if (entity.links)
					{
						for (var j:int=0; j < entity.links.length; j++)
						{
							link=entity.links.getItemAt(j) as Link;

							if (alreadyLinked(links, entity._id, link.le))
								continue;
							if (filterCriteria.relevance && filterCriteria.relevance.length > 0 && filterCriteria.relevance.indexOf(link.rel) == -1)
								continue;
							source=vis.nodesMap[entity._id];
							target=vis.nodesMap[link.le];
							vis.addLinkElement({type: link.type, rel: link.rel, level: link.level, versus: link.versus, info: link.info, source: entity._id, target: link.le}, source, target)
							links.push({source: entity._id, target: link.le})

						}
					}
				}
				//vis.reLayout();
			}



			private function alreadyLinked(links:Array, source:String, target:String):Boolean
			{
				for (var i:int=0; i < links.length; i++)
				{
					if ((links[i].target == target && links[i].source == source) || (links[i].target == source && links[i].source == target))
					{
						return true;
					}
				}
				return false;
			}

			protected function onResize(event:ResizeEvent):void
			{
				// TODO Auto-generated method stub
				//vis.autoFit();

			}

			private function onDrag(e:VisualizerEvent):void
			{
        
        for each (var node:Object in vis.nodesMap)
        {
          if (node is GenericGroup || node is GenericSprite)
          {
            positions[node.data._id]=new Point(node.x, node.y)
          }
   
        }

			}
		]]>
	</fx:Script>

	<visualizer:Visualizer width="100%"
												 height="100%"
												 id="vis"
												 layout="balloon"
												 creationComplete="initGraph()"
												 groupLabelField="name"
												 linkStyleFunction="{linkStyleFunction}"
												 nodeRendererFunction="{nodeRendererFunction}"
												 enableAnimation="false" 
												 groupRendererClass="{CustomGroupRenderer}"
												 elementsDragging="onDrag(event)"
												 showNodeExpandCollapseButton="false"
												 elementsSelectionChanged="onSelectionChange(event)"
												 elementDoubleClicked="onElementDoubleClick(event)" />
</s:Group>
