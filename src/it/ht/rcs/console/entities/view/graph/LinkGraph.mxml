<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
         xmlns:s="library://ns.adobe.com/flex/spark" 
         xmlns:mx="library://ns.adobe.com/flex/mx" 
         xmlns:diagrammer="fr.kapit.diagrammer.*" 
         width="100%"
         height="100%">
  


<fx:Script>
  <![CDATA[
    import flash.net.dns.AAAARecord;
    
    import fr.kapit.layouts.algorithms.balloon.BalloonLayout;
    import fr.kapit.layouts.algorithms.balloon.BalloonLayoutParams;
    import fr.kapit.layouts.constants.RootSelectionType;
    import fr.kapit.visualizer.events.VisualizerEvent;
    import fr.kapit.visualizer.styles.LinkStyle;
    
    import it.ht.rcs.console.entities.view.renderers.CustomGroupRenderer;
    import it.ht.rcs.console.entities.view.renderers.CustomLink;
    import it.ht.rcs.console.entities.view.renderers.CustomNodeRenderer;
    
    protected function onElementDoubleClick(event:VisualizerEvent):void
    {

      
    }
    
    protected function onSelectionChange(event:VisualizerEvent):void
    {
 
      
    }
    
    private function initGraph():void
    {
      trace("GRAPH INIT")
      var layout:BalloonLayout=vis.layout as BalloonLayout;
      var params:BalloonLayoutParams=new BalloonLayoutParams(layout);
      params.nodesSpacing=100;
      params.loopMargin=100;
      params.loopSpacing=100;
      params.childAngularSector=360;
      params.rootAngularSector=360;
      params.rootSelectionPolicy=RootSelectionType.MOST_WEIGHTED_ROOT_SELECTION; //avoid overlap in a pile
      params.overlappingAvoidMethod=0;
      params.packingSpacing=100
      vis.balloonLayout.params=params;
      vis.itemsFactory.addOrReplaceClassReference('link', CustomLink);
    
    }
    
    
    private function linkStyleFunction(data:Object):LinkStyle
    {
      var linkStyle:LinkStyle=new LinkStyle();
      
      linkStyle.arrowWidth=10
      linkStyle.arrowHeight=20
      linkStyle.arrowRadius=10
      linkStyle.thickness=2
      //relevance
      
      if (data['rel'] == '0')
        linkStyle.lineColor=0x333333
      else if (data['rel'] == '1')
        linkStyle.lineColor=0x999999
      else if (data['rel'] == '2')
        linkStyle.lineColor=0x5DE35F
      else if (data['rel'] == '3')
        linkStyle.lineColor=0xFFDC42
      else if (data['rel'] == '4')
        linkStyle.lineColor=0xFF4034
      
      
      //direction
      if (data['versus'] == 'in')
      {
        linkStyle.arrowSourceType=LinkStyle.LINK_ARROW_ARROW_TYPE
        linkStyle.arrowTargetType=LinkStyle.LINK_ARROW_NONE_TYPE
        
      }
      else if (data['versus'] == 'out')
      {
        linkStyle.arrowSourceType=LinkStyle.LINK_ARROW_NONE_TYPE
        linkStyle.arrowTargetType=LinkStyle.LINK_ARROW_ARROW_TYPE
      }
      else if (data['versus'] == 'both')
      {
        linkStyle.arrowSourceType=LinkStyle.LINK_ARROW_ARROW_TYPE
        linkStyle.arrowTargetType=LinkStyle.LINK_ARROW_ARROW_TYPE
      }
      
      //type
      if (data['type'] == 'peer')
        linkStyle.renderingPolicy=LinkStyle.LINK_RENDERING_SOLID;
      else if (data['type'] == 'know')
        linkStyle.renderingPolicy=LinkStyle.LINK_RENDERING_DASH;
      
      return linkStyle;
    }
    
    private function nodeRendererFunction(data:Object):CustomNodeRenderer
    {
      var renderer:CustomNodeRenderer=new CustomNodeRenderer();
      if (data['type'] == "target")
        renderer.icon.source=renderer.TargetIcon;
      else if (data['type'] == "person")
        renderer.icon.source=renderer.PersonIcon;
      else if (data['type'] == "position")
        renderer.icon.source=renderer.PositionIcon;
      else if (data['type'] == "virtual")
        renderer.icon.source=renderer.VirtualIcon;
      
      renderer.label.text=data['name'];
      return renderer
    }
    
    public function draw():void
    {
      trace("DRAW GRAPH")
      vis.clearAll()
    }
  ]]>
</fx:Script>
  
  <diagrammer:Diagrammer 
    width="100%"
    height="100%"
    id="vis"
    layout="balloon"
    creationComplete="initGraph()"
    groupLabelField="name"
    linkStyleFunction="{linkStyleFunction}"
    nodeRendererFunction="{nodeRendererFunction}"
    enablePan="true"
    enableAnimation="false"
    groupRendererClass="{CustomGroupRenderer}"
    highlightLinksOnSelection="false"
    showNodeExpandCollapseButton="false"
    elementsSelectionChanged="onSelectionChange(event)"
    elementDoubleClicked="onElementDoubleClick(event)"/>
</s:Group>
