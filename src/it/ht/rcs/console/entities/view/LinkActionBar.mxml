<?xml version="1.0" encoding="utf-8"?>
<actionbar:ActionBar xmlns:fx="http://ns.adobe.com/mxml/2009"
										 xmlns:s="library://ns.adobe.com/flex/spark"
										 xmlns:mx="library://ns.adobe.com/flex/mx"
										 xmlns:editors="it.ht.rcs.console.operations.view.evidences.actionbar.editors.*"
										 xmlns:actionbar="it.ht.rcs.console.main.actionbar.*"
										 xmlns:view="it.ht.rcs.console.entities.view.*">

	<fx:Metadata>
    [Event(name="update", type="flash.events.Event")]
    [Event(name="linkAdded", type="flash.events.Event")]
    [Event(name="linkRemoved", type="flash.events.Event")]
    [Event(name="entityDeleted", type="flash.events.Event")]
    [Event(name="entityCreated", type="flash.events.Event")]
    [Event(name="merge", type="flash.events.Event")]

  </fx:Metadata>
  <s:Button label="{R.get('NEW_ENTITY')}"
            click="onNewClick()"
            enabled="{Console.currentSession.user.is_view_profiles() }"
            icon="@Embed('/img/NEW/newEntity.png')"
            visible="{LicenseManager.instance.intelligence}"
            includeInLayout="{LicenseManager.instance.intelligence}"/>
  
	<s:Button label="{R.get('DELETE')+ ' '+R.get('ENTITY')}"
						click="onDeleteEntityClick()"
						enabled="{Console.currentSession.user.is_view_profiles() &amp;&amp; selectedNodes.length==1  &amp;&amp; selectedNodes.getItemAt(0).data.@nodeIcon!='target'}"
						icon="@Embed('/img/NEW/delete_32.png')"
						visible="{LicenseManager.instance.intelligence}"
						includeInLayout="{LicenseManager.instance.intelligence}"/>
  
  <s:Button label="{R.get('MERGE')+ ' '+R.get('ENTITY')}"
            click="onMergeClick()"
            enabled="{Console.currentSession.user.is_view_profiles() &amp;&amp; mainView.mergeEnabled}"
            icon="@Embed('/img/NEW/merge32.png')"
            visible="{LicenseManager.instance.intelligence}"
            includeInLayout="{LicenseManager.instance.intelligence}"/>

	<actionbar:Separator/>

	<s:Button label="{R.get('LINK_ADD')}"
						visible="{LicenseManager.instance.intelligence}"
						includeInLayout="{LicenseManager.instance.intelligence}"
						enabled="{Console.currentSession.user.is_view_profiles() &amp;&amp; mainView.linkEnabled}"
						click="addLink()"
						icon="@Embed('/img/NEW/linkAdd.png')"/>

	<s:Button label="{R.get('LINK_EDIT')}"
						visible="{LicenseManager.instance.intelligence}"
						includeInLayout="{LicenseManager.instance.intelligence}"
						enabled="{Console.currentSession.user.is_view_profiles() &amp;&amp; selectedEdge!=null &amp;&amp; selectedEdge.data.@type!='identity'}"
						click="editLink()"
						icon="@Embed('/img/NEW/linkEdit.png')"/>

	<s:Button label="{R.get('LINK_REMOVE')}"
						visible="{LicenseManager.instance.intelligence}"
						includeInLayout="{LicenseManager.instance.intelligence}"
						enabled="{Console.currentSession.user.is_view_profiles() &amp;&amp; selectedEdge!=null}"
						icon="@Embed('/img/NEW/linkRemove.png')"
						click="onDeleteLinkClick()"/>

	<actionbar:Separator/>

	<editors:TagEditor label="{R.get('RELEVANCE')}"
										 id="tagEditor"
										 width="80"
										 enabled="{Console.currentSession.user.is_view_profiles() &amp;&amp; selectedEdge!=null}"
										 tag="{selectedEdge? selectedEdge.data.@rel: 0}"
										 change="updateRelevance(tagEditor.tag)"/>
  <s:Button label="{'Jump to Evidence'}"
            visible="{LicenseManager.instance.intelligence}"
            includeInLayout="{LicenseManager.instance.intelligence}"
            enabled="{Console.currentSession.user.is_view_profiles() &amp;&amp; mainView.jumpEnabled }"
            icon="@Embed('/img/NEW/jumpToEvidence.png')"
            click="jumpToEvidence()"/>

	<s:Spacer width="100%"/>
	<s:Spacer height="50"/>

	<fx:Script>
		<![CDATA[
			import it.ht.rcs.console.entities.controller.EntityManager;
			import it.ht.rcs.console.entities.model.Entity;
			import it.ht.rcs.console.events.DataLoadedEvent;
			import it.ht.rcs.console.events.SectionEvent;
			import it.ht.rcs.console.monitor.controller.LicenseManager;
			import it.ht.rcs.console.search.controller.SearchManager;
			import it.ht.rcs.console.utils.AlertPopUp;
			
			import locale.R;
			
			import mx.collections.ArrayCollection;
			import mx.core.FlexGlobals;
			import mx.events.CloseEvent;
			import mx.managers.PopUpManager;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			
			import org.un.cava.birdeye.ravis.graphLayout.data.Edge;
			import org.un.cava.birdeye.ravis.graphLayout.visual.edgeRenderers.BidirectedArrowEdgeRenderer;

			[Bindable]
			public var section:EntitiesSection;

			[Bindable]
			public var mainView:LinkView;

			[Bindable]
			public var entity:Entity;

			[Bindable]
			public var selectedNodes:ArrayCollection;

			[Bindable]
			public var selectedEdge:Edge;

			private function addLink():void
			{
				var popup:LinkForm=PopUpManager.createPopUp(FlexGlobals.topLevelApplication as DisplayObject, LinkForm, true) as LinkForm;
				var entity1:Entity=EntityManager.instance.getItem(selectedNodes[0].data.@id);
				var entity2:Entity=EntityManager.instance.getItem(selectedNodes[1].data.@id);

				if (entity1.type == "position" && (entity2.type == "target" || entity2.type == "person"))
				{
					popup.entity1=entity2;
					popup.entity2=entity1; 
					popup.versusSelectionEnabled=false;
				}
				else if (entity2.type == "position" && (entity1.type == "target" || entity1.type == "person"))
				{
					popup.entity1=entity1;
					popup.entity2=entity2;
					popup.versusSelectionEnabled=false;
				}
				else
				{
					popup.entity1=entity1;
					popup.entity2=entity2;
					popup.versusSelectionEnabled=true;
				}

				popup.currentState=LinkForm.CREATE;
				popup.addEventListener(LinkForm.LINK_ADDED, onLinkAdded)
				PopUpManager.centerPopUp(popup);

			}
      
      private function merge():void
      {
        var entity1:Entity=EntityManager.instance.getItem(selectedNodes[0].data.@id);
        var entity2:Entity=EntityManager.instance.getItem(selectedNodes[1].data.@id);
        
        if (entity1.type == "person" && entity2.type == "target")
        {
          EntityManager.instance.merge(entity2, entity1, onMergeResult, onFault)
        }
        else
        {
          EntityManager.instance.merge(entity1, entity2, onMergeResult, onFault)
        }      
      }

      private function onMergeResult(e:ResultEvent):void
      {
        EntityManager.instance.refresh();
        EntityManager.instance.addEventListener(DataLoadedEvent.DATA_LOADED, onDataLoaded);
      }
      
      private function onDataLoaded(e:DataLoadedEvent):void
      {
        var selectedEntities:ArrayCollection=new ArrayCollection()
        
        //temp - all entities
        for(var i:int=0;i<section.stateManager.view.length;i++)
        {
          var entity:Entity=section.stateManager.view.getItemAt(i) as Entity;
          selectedEntities.addItem(entity);
        }
        section.stateManager.selectedEntities=selectedEntities;
        //section.stateManager.setState("links")
        dispatchEvent(new Event("merge"))
        //section.stateManager.setState('links')
      }
			private function editLink():void
			{
				var popup:LinkForm=PopUpManager.createPopUp(FlexGlobals.topLevelApplication as DisplayObject, LinkForm, true) as LinkForm;
				var entity1:Entity=EntityManager.instance.getItem(selectedEdge.data.@fromID);
				var entity2:Entity=EntityManager.instance.getItem(selectedEdge.data.@toID);

				var versus:String=selectedEdge.data.@versus == "both" ? "both" : "out";
				var type:String=selectedEdge.data.@type;
				var relevance:int=selectedEdge.data.@rel;


				popup.entity1=entity1;
				popup.entity2=entity2;
				popup.versus=versus;
				popup.type=type;
				popup.rel=relevance;
				if (entity1.type == "position" && (entity2.type == "target" || entity2.type == "person"))
				{
					//popup.entity1=entity2;
					//popup.entity2=entity1;
					popup.versusSelectionEnabled=false;
				}
				else if (entity2.type == "position" && (entity1.type == "target" || entity1.type == "person"))
				{
					//popup.entity1=entity1;
					//popup.entity2=entity2;
					popup.versusSelectionEnabled=false;
				}
				else
				{
					// popup.entity1=entity1;
					//popup.entity2=entity2;
					popup.versusSelectionEnabled=true;
				}
				popup.currentState=LinkForm.EDIT;
				popup.addEventListener(LinkForm.LINK_ADDED, onLinkAdded)
				PopUpManager.centerPopUp(popup);

			}

			private function onLinkAdded(e:Event):void
			{
				dispatchEvent(new Event("linkAdded"));
			}

			private function onDeleteEntityClick():void
			{
				var entity:Entity=EntityManager.instance.getItem(selectedNodes.getItemAt(0).data.@id) as Entity;
				AlertPopUp.show(R.get('CONFIRM_ENTITY_DELETION', [entity.name]), R.get('CONFIRM'), AlertPopUp.YES | AlertPopUp.NO, null, function(e:CloseEvent):void
				{
					if (e.detail == AlertPopUp.YES)
					{
						EntityManager.instance.removeItem(entity);
						dispatchEvent(new Event("entityDeleted"));

					}
				}, null, AlertPopUp.NO);
			}
      
      private function onMergeClick():void
      {
        var entity1:Entity=EntityManager.instance.getItem(selectedNodes[0].data.@id);
        var entity2:Entity=EntityManager.instance.getItem(selectedNodes[1].data.@id);
        var msg:String;
        
        if (entity1.type == "person" && entity2.type == "target")
        {
          msg='Merge '+entity2.name+' with '+entity1.name+'?'
        }
        else
        {
          msg='Merge '+entity1.name+' with '+entity2.name+'?'
        }   
        
        AlertPopUp.show(msg, R.get('CONFIRM'), AlertPopUp.YES | AlertPopUp.NO, null, function(e:CloseEvent):void
        {
          if (e.detail == AlertPopUp.YES)
          {
            merge()
          }
        }, null, AlertPopUp.NO);
      }

			private function onDeleteLinkClick():void
			{

				AlertPopUp.show('Do you want to remove the selected link ', R.get('CONFIRM'), AlertPopUp.YES | AlertPopUp.NO, null, function(e:CloseEvent):void
				{
					if (e.detail == AlertPopUp.YES)
					{
						EntityManager.instance.deleteLink(selectedEdge.data.@fromID, selectedEdge.data.@toID, onDeleteLinkResult, onFault)

					}
				}, null, AlertPopUp.NO);
			}

			private function onDeleteLinkResult(e:ResultEvent):void
			{
				dispatchEvent(new Event("linkRemoved"))
			}

			private function onFault(e:FaultEvent):void
			{
				trace("Fault CallBack");
			}

			private function onRemovedFromStage():void
			{
				// section.stateManager.view.refresh();
				// section.stateManager.tableView.refresh();
			}

			private function updateRelevance(value:int):void
			{
				if (selectedEdge != null)
				{
					selectedEdge.data.@rel=value;
					var currentRenderer:BidirectedArrowEdgeRenderer=selectedEdge.vedge.edgeView as BidirectedArrowEdgeRenderer;
					currentRenderer.draw();

					//get right direction 

					var entity1:Entity=EntityManager.instance.getItem(selectedEdge.data.@fromID);
					var entity2:Entity=EntityManager.instance.getItem(selectedEdge.data.@toID);

					trace("1: " + entity1.name);
					trace("2: " + entity2.name);
					//
					var versus:String=selectedEdge.data.@versus == "both" ? "both" : "out";

					EntityManager.instance.editLink(entity1._id, entity2._id, selectedEdge.data.@type, versus, value, onEditResult, onEditFault);
				}
			}

      private function onNewClick():void
      {
        var popup:EntityForm=PopUpManager.createPopUp(FlexGlobals.topLevelApplication as DisplayObject, EntityForm, true) as EntityForm;
        popup.addEventListener(EntityForm.CLOSE, onEntityAdded)
        popup.operation=section.stateManager.selectedOperation;
        popup.entity=new Entity(Entity.defaultEntity());
        popup.currentState=EntityForm.CREATE;
        PopUpManager.centerPopUp(popup);
      }
      
      private function onEntityAdded(e:Event):void
      {
        dispatchEvent(new Event("entityCreated"));
      }
			private function onEditResult(e:ResultEvent):void
			{
				trace("result");
			}

			private function onEditFault(e:FaultEvent):void
			{
				trace("fault");
			}
      
      private function jumpToEvidence():void
      {
          var entity1:Entity=EntityManager.instance.getItem(selectedEdge.data.@fromID);
          var entity2:Entity=EntityManager.instance.getItem(selectedEdge.data.@toID);
          var targetId:String;
          
          if(entity1.type=="target")
          {
           targetId=String(entity1.path.getItemAt(entity1.path.length - 1));
          }
          else
          {
            targetId=String(entity2.path.getItemAt(entity2.path.length - 1));
          }
          var event:SectionEvent=new SectionEvent(SectionEvent.CHANGE_SECTION);
          event.section=SectionEvent.OPERATIONS;
          event.subsection='evidence';
          
         
          event.item=SearchManager.instance.getItem(targetId);
          event.evidenceTypes=["call", "chat", "message"];
          //event.info=String(item.peer + " " + item.type);
          //event.from=getFromTimestamp();
          //event.to=getToTimestamp();
          event.from=0;
          event.to=0; //no filter
          FlexGlobals.topLevelApplication.dispatchEvent(event);
      
      }
		]]>
	</fx:Script>

</actionbar:ActionBar>
