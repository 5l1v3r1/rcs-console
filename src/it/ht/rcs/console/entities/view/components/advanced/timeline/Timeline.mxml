<?xml version="1.0" encoding="utf-8"?>
<s:VGroup xmlns:fx="http://ns.adobe.com/mxml/2009"
					xmlns:s="library://ns.adobe.com/flex/spark"
					xmlns:mx="library://ns.adobe.com/flex/mx"
					width="100%"
					creationComplete="init()"
					gap="0"
					xmlns:timeline="timeline.*">

	<fx:Metadata>
    [Event(name="dateChange", type="flash.events.Event")]
    [Event(name="ready", type="flash.events.Event")]
  </fx:Metadata>
	<fx:Script>
		<![CDATA[
			import it.ht.rcs.console.entities.model.PositionsFlow;
			
			import mx.collections.ArrayCollection;
			
			import spark.components.Label;
			import spark.components.gridClasses.GridColumn;
			import spark.core.SpriteVisualElement;
			import spark.events.GridSelectionEvent;
      
			[Bindable]
			private var grid:Grid;

			[Bindable]
			private var rows:ArrayCollection;
			private var columns:ArrayCollection;
			private var elements:Array;
			private var days:ArrayCollection;

			//public
			[Bindable]
			public var selectedDate:Date;

			public var currentFlow:PositionsFlow;

			private var t:Timer

			public static const READY:String="ready"

			private function init():void
			{
				elements=new Array();
				selectedDate=new Date();
				t=new Timer(200);
			}

			public function draw(startDate:Date, endDate:Date):void
			{
				startDate.hours=0;
				startDate.minutes=0
				startDate.seconds=0
				startDate.milliseconds=0

				endDate.hours=0
				endDate.minutes=0
				endDate.seconds=0
				endDate.milliseconds=0

				while (viewport.numElements > 0)
					viewport.removeElementAt(0)

				grid=new Grid()

				grid.addEventListener(GridSelectionEvent.SELECTION_CHANGE, onSelection)
				viewport.addElement(grid)

				if (grid.dataProvider)
				{
					grid.dataProvider.removeAll();
					grid.dataProvider=null;
				}

				days=new ArrayCollection();

				var currentMonth:Number;
				var daysPerMonth:Array;
				var daysPerMonthCount:Number;
				var months:Array;


				currentMonth=startDate.month;
				daysPerMonth=new Array();
				daysPerMonthCount=0;
				months=new Array()

				//Columns
				for (var d:Date=startDate; d <= endDate; d.date+=1)
				{
					var currentDate:Date=new Date();
					var currentMonthName:String=TimelineUtils.monthNames[currentDate.month];

					currentDate.time=d.time;

					if (currentDate.month != currentMonth)
					{
						//add month separator
						daysPerMonth.push(daysPerMonthCount);
						daysPerMonthCount=0;
					}
					daysPerMonthCount++;
					currentMonth=currentDate.month;
					days.addItem(currentDate);
				}

				//last loop

				trace("month separator " + daysPerMonthCount);
				daysPerMonth.push(daysPerMonthCount);
				daysPerMonthCount=0;

				rows=new ArrayCollection();

				for (var i:int=0; i < 24; i++)
				{
					var item:Object=new Object;

					for (var k:int=0; k < days.length; k++)
					{
						var day:Date=days.getItemAt(k) as Date;
						trace(day)
						item[day.time]={date: day.time, hours: i, value: false} //day.time + (TimelineUtils.HOUR * i);
					}
					rows.addItem(item);
				}

				/*
				Columns Header formatting   //http://forums.adobe.com/message/3819357 !!!!
				*/
				// grid.dataProvider.removeAll()

				grid.dataProvider=rows;
				grid.validateNow()
				var columns:ArrayCollection=new ArrayCollection()
				for (var c:int=0; c < grid.columns.length; c++)
				{
					var column:GridColumn=new GridColumn(grid.columns.getItemAt(c).dataField)
					column.width=16;
					var date:Date=new Date(Number(column.dataField));
					column.headerText=TimelineUtils.doubleDigits(date.date)
					columns.addItem(column);
				}
				grid.columns.removeAll()
				grid.columns=columns;

				//draw separators
				var xPos:Number=0;
				for (var s:int=0; s < daysPerMonth.length - 1; s++)
				{
					xPos+=daysPerMonth[s] * 16;
					//draw separator at xPos;
					var separator:SpriteVisualElement=new SpriteVisualElement();
					separator.graphics.lineStyle(2, 0x333333, 1);
					separator.graphics.moveTo(0, 0);
					separator.graphics.lineTo(0, 168);
					separator.x=xPos + 1;
					viewport.addElement(separator);
					elements.push(separator)

					var monthLabel:Label=new Label();
					monthLabel.text=currentMonthName; //looped
					monthLabel.setStyle("color", 0x333333);
					monthLabel.setStyle("fontWeight", "bold");
					monthLabel.setStyle("fontSize", 32);
					monthLabel.alpha=0.13;
					monthLabel.x=xPos + 20;
					monthLabel.y=80;

					monthLabel.mouseEnabled=false;
						//viewport.addElement(monthLabel); elements.push(monthLabel)
						//keep track monthname-length-days, etc.  

				}
				labelDisplay.text=""
				//TODO SET SELECTED DATE (start or end)
				setTimeout(ready, 3000)

			}

			private function ready():void
			{
				dispatchEvent(new Event("ready"))
			}

			private function onSelection(e:Event):void
			{
				e.stopImmediatePropagation()
				var currentDate:Date=days.getItemAt(grid.selectedCell.columnIndex) as Date //columns are days
				selectedDate.time=currentDate.time;
				selectedDate.hours=grid.selectedCell.rowIndex //rows are hours
				labelDisplay.text=TimelineUtils.doubleDigits(selectedDate.date) + " " + TimelineUtils.months[selectedDate.month] + " " + selectedDate.fullYear + " - " + TimelineUtils.doubleDigits(selectedDate.hours) + ":" + TimelineUtils.doubleDigits(selectedDate.minutes)
				var hour:Object=grid.dataProvider.getItemAt(selectedDate.hours);
				var h:Date=new Date()
				h.time=selectedDate.time
				h.hours=0
				h.minutes=0
				h.seconds=0
				h.milliseconds=0
				if (hour[h.time].minutes)
					currentFlow=hour[h.time].minutes[selectedDate.minutes] as PositionsFlow;
				else
					currentFlow=null
				//get data
				dispatchEvent(new Event("dateChange"))
			}

			private function next():void
			{
				var currentRow:Number=grid.selectedCell.rowIndex
				var currentColumn:Number=grid.selectedCell.columnIndex;

				var nextRow:Number=currentRow + 1
				var nextColumn:Number=currentColumn
				if (nextRow > 23)
				{
					nextRow=0;
					nextColumn=currentColumn + 1
				}
				grid.setSelectedCell(nextRow, nextColumn)
				onSelection(new Event("change"))

			}

			public function fillMinutes(positions:ArrayCollection):void
			{
				trace("FILL MINUTES")

				for (var i:int=0; i < positions.length; i++)
				{
					var d:Date=new Date()
					d.time=positions.getItemAt(i).time * 1000;
					d.seconds=0
					d.milliseconds=0
					var hour:Object=grid.dataProvider.getItemAt(d.hours);

					var h:Date=new Date()
					h.time=d.time
					h.hours=0
					h.minutes=0
					h.seconds=0
					h.milliseconds=0
					if (!hour[h.time].minutes)
						hour[h.time].minutes={};
					hour[h.time].minutes[d.minutes]=positions.getItemAt(i) //composite object
					trace("minutes:" + h)

				}

			}

			public function fillHours(hours:ArrayCollection):void
			{
				trace("FILL HOURS")

				for (var i:int=0; i < hours.length; i++)
				{
					var d:Date=new Date()
					d.time=hours.getItemAt(i).time * 1000;

					var hour:Object=grid.dataProvider.getItemAt(d.hours);
					d.hours=0
					d.minutes=0
					d.seconds=0
					d.milliseconds=0

					//trace(d.time + " - " + d);

					hour[d.time].value=true; //OK
					//hour[d.time].minutes=new Dictionary()
					grid.validateNow()

				}

			}

			private function play():void
			{
				if (playBtn.label == "play")
				{
					t.addEventListener(TimerEvent.TIMER, doPlay);
					t.start();
					playBtn.label == "pause"
				}
				else if (playBtn.label == "pause")
				{
					t.removeEventListener(TimerEvent.TIMER, doPlay);
					t.stop();
					playBtn.label == "play"
				}

			}

			private function pause():void
			{

			}

			private function stop():void
			{

			}

			private function doPlay(e:TimerEvent):void
			{

			}
		]]>
	</fx:Script>

	<s:Group id="viewport"
					 width="100%">

	</s:Group>
	<s:HScrollBar viewport="{viewport}"
								width="100%"
								id="scrollbar"
								visible="{grid.width>viewport.width}"
								includeInLayout="{grid.width>viewport.width}"/>
	<s:Spacer height="4"/>
	<s:HGroup verticalAlign="middle"
						gap="0">
		<s:Spacer width="0"/>
		<s:Button label="play"
							id="playBtn"
							click="play()"/>
		<s:Spacer width="8"/>
		<s:Label id="labelDisplay"
						 fontSize="10"
						 fontWeight="bold"/>
	</s:HGroup>

</s:VGroup>
