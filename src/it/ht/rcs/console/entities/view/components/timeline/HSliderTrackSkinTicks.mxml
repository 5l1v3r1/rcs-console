<?xml version="1.0" encoding="utf-8"?>
<s:SparkSkin xmlns:fx="http://ns.adobe.com/mxml/2009"
						 xmlns:s="library://ns.adobe.com/flex/spark">

	<fx:Metadata>
		<![CDATA[ 
        [HostComponent("spark.components.Button")]
    ]]>
	</fx:Metadata>

	<fx:Script>
		<![CDATA[
			import it.ht.rcs.console.entities.model.Flow;
			import it.ht.rcs.console.entities.view.components.timeline.Tick;
			
			import mx.collections.ArrayCollection;
			
			import spark.components.Group;
			import spark.components.Label;


			private var ticks:Dictionary;

			/**
			* Probably a better way of doing this
			*/
			override protected function updateDisplayList(unscaledWidth:Number, unscaledHeight:Number):void
			{
				super.updateDisplayList(unscaledWidth, unscaledHeight);
				drawTicks();
			}

			public function highlightTicks(flows:ArrayCollection):void
			{
				for (var i:int=0; i < flows.length; i++)
				{
					var f:Flow=flows.getItemAt(i) as Flow;
          var tick:Tick=ticks[f.date] as Tick;
          tick.highlight()
				}

			}

			private function doubleDigits(val:Number):String
			{
				if (val < 10)
					return String("0" + val);
				return String(val)
			}

			/**
			 * This is very naive, and it could be made more efficient
			 */
			public function drawTicks():void
			{

				// dig up to the custom Slider's skin to find information on the thumbGroup size
				// and the stepSize, minimum, maximum values of the custom slider
				var sliderSkin:DashboardSliderSkin=(this.hostComponent.parentDocument as DashboardSliderSkin);
				var thumbGroupWidth:Number=sliderSkin.thumbGroup.width;
				var stepSize:Number=sliderSkin.hostComponent.stepSize;
				var numberOfTicks:int=Math.floor((sliderSkin.hostComponent.maximum - sliderSkin.hostComponent.minimum) / stepSize);

				var tickSpacing:Number=((width - thumbGroupWidth) / numberOfTicks);
				ticksGroup.left=ticksGroup.right=Math.floor(thumbGroupWidth / 2);


				ticksGroup.removeAllElements();
				ticksGroup.width=0;
				ticks=new Dictionary
				for (var i:int=0; i <= numberOfTicks; i++)
				{
					var value:Number=sliderSkin.hostComponent.minimum + (sliderSkin.hostComponent.stepSize * i);
					var date:String=formatTime(String(value));
					var tick:Tick=new Tick();
					//tick.date=date;
					tick.y=0;
					tick.x=Math.floor(i * tickSpacing);
					ticksGroup.addElement(tick);

					var label:Label=new Label();
					label.width=30
					label.text=date;
					label.x=tick.x - 15;
					label.y=20;
					label.setStyle("fontSize", 9);
					ticksGroup.addElement(label);
          var d:Date=new Date();
          d.time=value;
          var formattedDate:String=String(d.fullYear) + doubleDigits(d.month + 1) + doubleDigits(d.date);
					ticks[formattedDate]=tick
				}
			}

			private function formatTime(val:String):String
			{
				var time:Number=Number(val);
				var d:Date=new Date();
				d.time=time;
				return doubleDigits(d.date) + "/" + doubleDigits((d.month + 1))
			}
		]]>
	</fx:Script>



	<s:states>
		<s:State name="up"/>
		<s:State name="down"/>
		<s:State name="over"/>
		<s:State name="disabled"/>
	</s:states>

	<!-- border -->
	<s:Rect left="0"
					right="0"
					top="3"
					bottom="3"
					height="5">
		<!--	<s:fill>
				<s:SolidColor color="0xFFFFFF"/>
			</s:fill>-->
	</s:Rect>

	<!-- fill -->
	<s:Rect left="1"
					right="1"
					top="4"
					bottom="4">
		<!--	<s:fill>
				<s:SolidColor color="0xFFFFFF"/>
			</s:fill>-->
	</s:Rect>

	<!-- shadow -->
	<!--	<s:Rect left="2"
						right="2"
						top="4"
						height="1">
			<s:fill>
				<s:SolidColor color="0x9E9E9E"/>
			</s:fill>
		</s:Rect>-->

	<!-- hit area -->
	<s:Rect left="0"
					right="0"
					top="0"
					bottom="0">
		<s:fill>
			<s:SolidColor alpha="0"/>
		</s:fill>
	</s:Rect>

	<!-- ticks -->
	<s:Group id="ticksGroup"
					 height="15"/>


</s:SparkSkin>
