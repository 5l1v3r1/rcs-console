<?xml version="1.0" encoding="utf-8"?>
<utils:TitleWindowSaveCancel xmlns:fx="http://ns.adobe.com/mxml/2009"
														 xmlns:s="library://ns.adobe.com/flex/spark"
														 xmlns:mx="library://ns.adobe.com/flex/mx"
														 xmlns:utils="it.ht.rcs.console.utils.*"
														 xmlns:editors="it.ht.rcs.console.operations.view.evidences.actionbar.editors.*"
														 xmlns:renderers="it.ht.rcs.console.entities.view.renderers.*"
														 creationComplete="init()"
														 save="onSave(event)"
														 title="{currentState == CREATE ? R.get('LINK_ADD') : R.get('LINK_EDIT')}">
	<fx:Metadata>
    [Event(name="linkAdded", type="flash.events.Event")]
  </fx:Metadata>

	<fx:Script>
		<![CDATA[
			import it.ht.rcs.console.entities.controller.EntityManager;
			import it.ht.rcs.console.entities.model.Entity;
			import it.ht.rcs.console.events.SaveEvent;
			import it.ht.rcs.console.target.model.Target;
			import it.ht.rcs.console.utils.AlertPopUp;

			import locale.R;

			import mx.events.CloseEvent;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;

			[Embed(source='/img/NEW/direction_right.png')]
			[Bindable]
			private var directionOut:Class;

			[Embed(source='/img/NEW/direction_left.png')]
			[Bindable]
			private var directionIn:Class;

			[Embed(source='/img/NEW/direction_both.png')]
			[Bindable]
			private var directionBoth:Class;

			private var versusIndex:int=0;
			private var versusArray:Array=[{versus: "out", img: directionOut}, {versus: "in", img: directionIn}, {versus: "both", img: directionBoth}]

			public static const CREATE:String='create';
			public static const EDIT:String='edit';
			public static const LINK_ADDED:String='linkAdded';

			[Bindable]
			public var entity1:Entity;
			[Bindable]
			public var entity2:Entity;
			[Bindable]
			public var versusSelectionEnabled:Boolean;
			[Bindable]
			public var versus:String;
      [Bindable]
      public var rel:int;
      [Bindable]
      public var type:String;

			private function init():void
			{
				entity1Icon.init()
				entity2Icon.init()
				tagEditor.labelDisplay.visible=false;
				tagEditor.labelDisplay.includeInLayout=false;

				if (currentState==EDIT)
				{
					// versusIndex=selectedEdge

					switch (versus)
					{
						case "out":
							versusIndex=0;
							break;
            
            case "in":
              versusIndex=1;
              break;
            
            case "both":
              versusIndex=2;
              break;
					}
          switch (type)
          {
            case "peer":
              typeCb.selectedIndex=0;
              break;
            
            case "know":
              typeCb.selectedIndex=1;
              break;

          }
          
          tagEditor.tag=rel;
				}
				else
				{
					versusIndex=0;
				}

				arrow.source=versusArray[versusIndex].img;
				if (versusSelectionEnabled)
				{
					arrow.toolTip="Click the arrow to change link direction"
				}
				else
				{
					arrow.toolTip=""
				}
			}

			private function changeVersus():void
			{
				if (versusSelectionEnabled)
				{
					versusIndex++
					if (versusIndex > 2)
						versusIndex=0;
					arrow.source=versusArray[versusIndex].img
				}
			}

			private function onSave(event:SaveEvent):void
			{
        var t:String=String(typeCb.selectedItem).toLowerCase();
        if (entity1.type == "position" || entity2.type == "position")
        {
          t="position"
        }
				if (currentState == EDIT)
				{
          EntityManager.instance.editLink(entity1._id,entity2._id,t,versusArray[versusIndex].versus, tagEditor.tag, onResult, onFault);
				}

				if (currentState == CREATE)
				{
				
					EntityManager.instance.addLink(entity1._id, entity2._id, t, versusArray[versusIndex].versus, tagEditor.tag, onResult, onFault);
				}

			}

			private function onResult(e:ResultEvent):void
			{
				dispatchEvent(new Event(LINK_ADDED))
				close();
			}

			private function onFault(e:FaultEvent):void
			{
				AlertPopUp.show(e.fault.faultDetail, e.fault.name);
			}
		]]>
	</fx:Script>

	<utils:states>
		<s:State name="create"/>
		<s:State name="edit"/>
	</utils:states>

	<s:Form width="100%"
					defaultButton="{saveButton}">


		<s:HGroup width="90%"
							horizontalAlign="center"
							verticalAlign="middle">
			<renderers:EntityRenderer entity="{entity1}"
																id="entity1Icon"/>
			<s:Image source="{directionOut}"
							 buttonMode="{versusSelectionEnabled}"
							 useHandCursor="{versusSelectionEnabled}"
							 click="changeVersus()"
							 toolTip=""
							 id="arrow"/>
			<renderers:EntityRenderer entity="{entity2}"
																id="entity2Icon"/>
		</s:HGroup>
		<s:FormItem label="{R.get('TYPE')}"
								visible="{entity1.type!='position' &amp;&amp; entity2.type!='position'}"
								includeInLayout="{entity1.type!='position' &amp;&amp; entity2.type!='position'}">
			<s:DropDownList id="typeCb"
											width="150"
											requireSelection="true">
				<s:ArrayCollection id="types">
					<fx:String>Peer</fx:String>
					<fx:String>Know</fx:String>
				</s:ArrayCollection>
			</s:DropDownList>
		</s:FormItem>

		<s:FormItem label="{R.get('RELEVANCE')}">
			<editors:TagEditor id="tagEditor"
												 width="80"/>
		</s:FormItem>
	</s:Form>

</utils:TitleWindowSaveCancel>
