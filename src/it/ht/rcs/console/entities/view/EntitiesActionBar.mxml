<?xml version="1.0" encoding="utf-8"?>
<actionbar:ActionBar xmlns:fx="http://ns.adobe.com/mxml/2009"
										 xmlns:s="library://ns.adobe.com/flex/spark"
										 xmlns:mx="library://ns.adobe.com/flex/mx"
										 xmlns:actionbar="it.ht.rcs.console.main.actionbar.*"
										 xmlns:view="it.ht.rcs.console.entities.view.*">

	<s:Button label="{R.get('NEW_ENTITY')}"
						click="onNewClick()"
						enabled="{Console.currentSession.user.is_view_profiles() }"
						icon="@Embed('/img/NEW/newEntity.png')"
						visible="{LicenseManager.instance.intelligence}"
						includeInLayout="{LicenseManager.instance.intelligence}"/>

	<s:Button label="{R.get('EDIT')}"
						click="onEditClick()"
						enabled="{Console.currentSession.user.is_view_profiles() &amp;&amp; selectedObject != null}"
						icon="@Embed('/img/NEW/edit.png')"/>

	<s:Button label="{R.get('DELETE')}"
						click="onDeleteClick()"
						enabled="{Console.currentSession.user.is_view_profiles() &amp;&amp; selectedObject != null &amp;&amp; selectedObject.type!='target'}"
						icon="@Embed('/img/NEW/delete_32.png')"
						visible="{LicenseManager.instance.intelligence}"
						includeInLayout="{LicenseManager.instance.intelligence}"/>


	<actionbar:Separator/>

	<s:Button label="{R.get('JUMP_TO_TARGET')}"
						click="onJumpClick()"
						enabled="{Console.currentSession.user.is_view_profiles() &amp;&amp; selectedObject != null &amp;&amp; selectedObject.type=='target'}"
						icon="@Embed('/img/NEW/jumpToTarget.png')"/>
	<actionbar:Separator/>
  
	<s:Button label="{R.get('LINK_MAP')}"
						visible="{LicenseManager.instance.intelligence}"
						includeInLayout="{LicenseManager.instance.intelligence}"
						enabled="{Console.currentSession.user.is_view_profiles()}"
						icon="@Embed('/img/NEW/link32.png')"
						click="onLinkClick()"/>
  
	<s:Button label="{R.get('POSITION_MAP')}"
						visible="{LicenseManager.instance.intelligence}"
						includeInLayout="{LicenseManager.instance.intelligence}"
						enabled="{Console.currentSession.user.is_view_profiles()}"
						icon="@Embed('/img/NEW/position32.png')"
						click="onMapClick()"/>
  
	<s:Spacer width="100%"/>

	<s:ButtonBar dataProvider="{viewStack}"
							 requireSelection="true"/>

	<s:TextInput id="searchInput"
							 keyUp="onKeyUp(event)"
							 removedFromStage="onRemovedFromStage()"/>

	<fx:Script>
		<![CDATA[
      import it.ht.rcs.console.dashboard.controller.DashboardController;
      import it.ht.rcs.console.entities.controller.EntityManager;
      import it.ht.rcs.console.entities.model.Entity;
      import it.ht.rcs.console.events.SectionEvent;
      import it.ht.rcs.console.monitor.controller.LicenseManager;
      import it.ht.rcs.console.search.controller.SearchManager;
      import it.ht.rcs.console.utils.AlertPopUp;
      
      import locale.R;
      
      import mx.collections.ArrayCollection;
      import mx.core.FlexGlobals;
      import mx.events.CloseEvent;
      import mx.managers.PopUpManager;

			[Bindable]
			public var section:EntitiesSection;
      
      [Bindable]
      public var selectedEntities:ArrayCollection;

			private function onNewClick():void
			{
				var popup:EntityForm=PopUpManager.createPopUp(FlexGlobals.topLevelApplication as DisplayObject, EntityForm, true) as EntityForm;
				popup.operation=section.stateManager.selectedOperation;
				popup.entity=new Entity(Entity.defaultEntity());
				popup.currentState=EntityForm.CREATE;
				PopUpManager.centerPopUp(popup);
			}

			private function onEditClick():void
			{
				var popup:EntityForm=PopUpManager.createPopUp(FlexGlobals.topLevelApplication as DisplayObject, EntityForm, true) as EntityForm;
				//popup.addEventListener("update", onUpdate) 
				popup.entity=selectedObject as Entity;
				popup.entity.desc=selectedObject.desc;
				popup.currentState=EntityForm.EDIT
				PopUpManager.centerPopUp(popup);
			}

			private function onJumpClick():void
			{
				var event:SectionEvent=new SectionEvent(SectionEvent.CHANGE_SECTION);
				event.section=SectionEvent.OPERATIONS;
				event.subsection='target';
				var entity:Entity=selectedObject as Entity;
				var targetId:String=entity.path[entity.path.length - 1];
				event.item=SearchManager.instance.getItem(targetId);
				FlexGlobals.topLevelApplication.dispatchEvent(event);
			}

			private function onDeleteClick():void
			{
				AlertPopUp.show(R.get('CONFIRM_ENTITY_DELETION', [selectedObject.name]), R.get('CONFIRM'), AlertPopUp.YES | AlertPopUp.NO, null, function(e:CloseEvent):void
				{
					if (e.detail == AlertPopUp.YES)
					{
						EntityManager.instance.removeItem(selectedObject);
						section.stateManager.setState("singleOperation")
					}
				}, null, AlertPopUp.NO);
			}

			private function onLinkClick():void
			{
        selectedEntities=new ArrayCollection()
          
          //temp - all entities
        for(var i:int=0;i<section.stateManager.view.length;i++)
        {
         var entity:Entity=section.stateManager.view.getItemAt(i) as Entity;
         selectedEntities.addItem(entity);
        }
        section.stateManager.selectedEntities=selectedEntities;
				section.stateManager.setState("links")
			}
      
      private function onMapClick():void
      {
        section.stateManager.setState("map");
      }

			private function onRemovedFromStage():void
			{
				searchInput.text='';
				section.stateManager.searchField=searchInput;
				section.stateManager.view.refresh();
				section.stateManager.tableView.refresh();
			}

			private function onKeyUp(event:KeyboardEvent):void
			{
				section.stateManager.searchField=searchInput;
				section.stateManager.view.refresh();
				section.stateManager.tableView.refresh();
			}
		]]>
	</fx:Script>

</actionbar:ActionBar>
