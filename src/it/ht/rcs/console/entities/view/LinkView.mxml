<?xml version="1.0" encoding="utf-8"?>

<s:VGroup xmlns:fx="http://ns.adobe.com/mxml/2009"
					xmlns:s="library://ns.adobe.com/flex/spark"
					xmlns:mx="library://ns.adobe.com/flex/mx"
					xmlns:maps="com.google.maps.*"
					xmlns:components="it.ht.rcs.console.entities.view.components.*"
					xmlns:renderers="it.ht.rcs.console.entities.view.renderers.*"
					xmlns:visualizer="fr.kapit.visualizer.*"
					xmlns:entities="it.ht.rcs.console.entities.view.*"
					xmlns:filters="it.ht.rcs.console.entities.view.filters.*"
					height="100%"
					width="100%">
	<fx:Script>
		<![CDATA[
      import com.adrianparr.utils.HtmlEntities;
      import com.greensock.TweenMax;
      
      import fr.kapit.layouts.algorithms.balloon.BalloonLayout;
      import fr.kapit.layouts.algorithms.balloon.BalloonLayoutParams;
      import fr.kapit.layouts.algorithms.circular.SingleCircularLayoutParams;
      import fr.kapit.layouts.algorithms.circular.SingleCycleCircularLayout;
      import fr.kapit.layouts.algorithms.hierarchical.HierarchicalLayout;
      import fr.kapit.layouts.algorithms.hierarchical.HierarchicalLayoutParams;
      import fr.kapit.layouts.algorithms.radial.RadialLayout;
      import fr.kapit.layouts.algorithms.radial.RadialLayoutParams;
      import fr.kapit.layouts.algorithms.sugiyama.SugiyamaLayoutParams;
      import fr.kapit.layouts.constants.EdgeDrawType;
      import fr.kapit.layouts.model.Edge;
      import fr.kapit.visualizer.events.VisualizerEvent;
      import fr.kapit.visualizer.styles.LinkStyle;
      
      import it.ht.rcs.console.entities.controller.EntityManager;
      import it.ht.rcs.console.entities.model.Entity;
      import it.ht.rcs.console.entities.model.Flow;
      import it.ht.rcs.console.entities.model.Flows;
      import it.ht.rcs.console.entities.model.Link;
      import it.ht.rcs.console.entities.view.renderers.CustomGroupRenderer;
      import it.ht.rcs.console.entities.view.renderers.CustomLink;
      import it.ht.rcs.console.entities.view.renderers.CustomNodeRenderer;
      import it.ht.rcs.console.events.RefreshEvent;
      
      import locale.R;
      
      import mx.collections.ArrayCollection;
      import mx.collections.ListCollectionView;
      import mx.core.FlexGlobals;
      import mx.rpc.events.FaultEvent;
      import mx.rpc.events.ResultEvent;
      
      import spark.collections.Sort;
      import spark.collections.SortField;

			[Bindable]
			public var entities:ListCollectionView;

			[Bindable]
			public var section:EntitiesSection;

			[Bindable]
			public var entitiesToShow:ArrayCollection;

			private var numEntitiesToShow:int=0;


			private var currentIndex:int=0;

			private var roots:ArrayCollection;

			[Bindable]
			public var selectedNodes:ArrayCollection;

			[Bindable]
			public var selectedEdge:Object

			[Bindable]
			public var linkEnabled:Boolean;

			[Bindable]
			public var mergeEnabled:Boolean;

			[Bindable]
			public var jumpEnabled:Boolean;
      
      [Bindable]
      public var exportEnabled:Boolean;

			public var linkToHighLight:Object;
			public var nodeToHighLight:Object;

			private var sort:Sort;
			private var xmlData:XML;


			[Bindable]
			private var startDate:Date;

			[Bindable]
			private var endDate:Date;

			[Bindable]
			public var actionbar:EntitiesActionBar;

			private var flows:ArrayCollection;

			public var inited:Boolean;

			[Embed(source='/img/NEW/dottedLine.png')]
			public static const dottedLine:Class;

			[Embed(source='/img/NEW/dashedLine.png')]
			public static const dashedLine:Class;

			[Embed(source='/img/NEW/fullLine.png')]
			public static const fullLine:Class;


			public function init():void
			{
				trace("LINK VIEW INIT")

				var layout:SingleCycleCircularLayout=vis.layout as SingleCycleCircularLayout;
				var params:SingleCircularLayoutParams=new SingleCircularLayoutParams(layout);
				params.nodesSpacing=100;
				params.minimalRadius=100;
				vis.circularLayout.params=params;

				vis.itemsFactory.addOrReplaceClassReference('link', CustomLink)

				if (!inited)
				{
					//FlexGlobals.topLevelApplication.addEventListener(RefreshEvent.REFRESH, onAddedToStage);
					sort=new Sort();
					sort.fields=[new SortField("type", true), new SortField("name", false)]

					startDate=new Date();
					startDate.time=startDate.time - (1000 * 60 * 60 * 24 * 30);
					endDate=new Date();
					if (fromDf)
					{
						fromDf.selectedDate=startDate;
					}
					timeline.reset()
					inited=true;
				}
				onAddedToStage(null)
			}

			private function onAddedToStage(e:Event=null):void
			{

				if (!entities)
					return;

				info.selectedItem=null;
				info.selectedItems=null;
				actionbar.selectedObject=null; //SELECTION
				actionbar.selectedObjects=null;

				selectedEdge=null;

				//ad links entity - depth=1

				flows=new ArrayCollection
				//numEntitiesToShow=entities.length; //????

				selectedNodes=new ArrayCollection();

				/*  if (vgraph)
				 {
					 vgraph.graph=new Graph("XMLAsDocsGraph", false, null);
					 vgraph.visible=false;
				 }
				 if (g)
				 {
					 g.purgeGraph();
				 } */

				entitiesToShow=new ArrayCollection()

				for (var i:int=0; i < entities.length; i++)
				{
					var entity:Entity=entities.getItemAt(i) as Entity;

					if (entity.type == "target" && targetCh.selected)
						entitiesToShow.addItem(entity)
					else if (entity.type == "person" && personCh.selected)
						entitiesToShow.addItem(entity)
					else if (entity.type == "position" && positionCh.selected)
						entitiesToShow.addItem(entity)
					else if (entity.type == "virtual" && virtualCh.selected)
						entitiesToShow.addItem(entity)
				}

				numEntitiesToShow=entitiesToShow.length; //????
				

				mergeEnabled=actionbar.mergeEnabled=false;
				linkEnabled=actionbar.linkEnabled=false;
				jumpEnabled=actionbar.jumpEnabled=false;
        exportEnabled=actionbar.exportEnabled=false;
        
        parseItems()

			}


			private function alreadyLinked(links:Array, source:String, target:String):Boolean
			{
				for (var i:int=0; i < links.length; i++)
				{
					if ((links[i].target == target && links[i].source == source) || (links[i].target == source && links[i].source == target))
						return true;
				}

				return false;
			}

			private function parseItems():void
			{
				entitiesToShow.sort=sort;
				entitiesToShow.refresh();
		
        var i:int=0;
        var e:Entity;
        var link:Link;
        
				var xmlStr:String="<graphml>"

				//nodes
				for (i=0; i < entitiesToShow.length; i++)
				{
					e=entitiesToShow.getItemAt(i) as Entity;
					if (!e)
            continue;
					var name:String=HtmlEntities.encode(e.name)
          name=name.split("&nbsp;").join(" ");
				
					var desc:String=""
					if (e.desc) desc == HtmlEntities.encode(e.desc)
          desc=desc.split("&nbsp;").join(" ");
					xmlStr+="<node   id='" + e._id + "'  name='" + name + "'   desc='" + desc + "'  type='" + e.type + "'  />"

				}

				//edges
        var links:Array=new Array()
				for (i=0; i < entitiesToShow.length; i++)
				{
					e=entitiesToShow.getItemAt(i) as Entity;
					if (!e) 
            continue;
					if (e.links)
					{
						for (var j:int=0; j < e.links.length; j++)
						{
							link=e.links.getItemAt(j) as Link;
							if (!alreadyLinked(links, e._id, link.le))
							{

								if (link.versus == "out")
								{
									xmlStr+="<edge source='" + e._id + "' target='" + link.le + "' rel='" + link.rel + "' type='" + link.type + "'level='" + link.level + "' versus='out'/>";
									links.push({source:e._id, target:link.le})
								}
								else if (link.versus == "in")
								{
									xmlStr+="<edge source='" + e._id + "' target='" + link.le + "' rel='" + link.rel + "' type='" + link.type + "'level='" + link.level + "' versus='in'/>";
									links.push({source:link.le, target:e._id})
								}
								else if (link.versus == "both")
								{
									xmlStr+="<edge source='" + e._id + "' target='" + link.le + "' rel='" + link.rel + "' type='" + link.type + "'level='" + link.level + "' versus='both'/>";
									links.push({source:e._id, target:link.le})
								}
								/*  else
								{
								xmlStr+="<edge source='" + e._id + "' target='" + link.le + "' rel='" + link.rel + "' type='" + link.type + "'level='" + link.level + "' versus='both'>";
								links.push({source:e._id, target:link.le})
								}
								//add links
								for (var k:int=0; k < link.info.length; k++)
								{
								xmlStr+="<info>" + String(link.info.getItemAt(k)) + "</info>"
								} */
									//xmlStr+="</edge>"
							}
						}
					}
				}

				//end
				xmlStr+="</graphml>";
				xmlData=XML(xmlStr);
				trace(xmlData)
				dp=xmlData
				vis.dataProvider=dp
			}

			private function nodeRendererFunction(data:Object):CustomNodeRenderer
			{
				var renderer:CustomNodeRenderer=new CustomNodeRenderer();
				if (data['type'] == "target")
					renderer.icon.source=renderer.TargetIcon;
				else if (data['type'] == "person")
					renderer.icon.source=renderer.PersonIcon;
				else if (data['type'] == "position")
					renderer.icon.source=renderer.PositionIcon;
				else if (data['type'] == "virtual")
					renderer.icon.source=renderer.VirtualIcon;

				renderer.label.text=data['name'];
				return renderer
			}

			private function linkStyleFunction(data:Object):LinkStyle
			{
				var linkStyle:LinkStyle=new LinkStyle();

				linkStyle.arrowWidth=10
				linkStyle.arrowHeight=20
				linkStyle.arrowRadius=10
				linkStyle.thickness=2
				//relevance
        
				if (data['rel'] == '0')
					linkStyle.lineColor=0x333333
				else if (data['rel'] == '1')
					linkStyle.lineColor=0x999999
				else if (data['rel'] == '2')
					linkStyle.lineColor=0x5DE35F
				else if (data['rel'] == '3')
					linkStyle.lineColor=0xFFDC42
        else if (data['rel'] == '4')
          linkStyle.lineColor=0xFF4034


				//direction
				if (data['versus'] == 'in')
				{
					linkStyle.arrowSourceType=LinkStyle.LINK_ARROW_ARROW_TYPE
					linkStyle.arrowTargetType=LinkStyle.LINK_ARROW_NONE_TYPE

				}
				else if (data['versus'] == 'out')
				{
					linkStyle.arrowSourceType=LinkStyle.LINK_ARROW_NONE_TYPE
					linkStyle.arrowTargetType=LinkStyle.LINK_ARROW_ARROW_TYPE
				}
				else if (data['versus'] == 'both')
				{
					linkStyle.arrowSourceType=LinkStyle.LINK_ARROW_ARROW_TYPE
					linkStyle.arrowTargetType=LinkStyle.LINK_ARROW_ARROW_TYPE
				}

				//type
				if (data['type'] == 'peer')
					linkStyle.renderingPolicy=LinkStyle.LINK_RENDERING_SOLID;
				else if (data['type'] == 'know')
					linkStyle.renderingPolicy=LinkStyle.LINK_RENDERING_DASH;

				return linkStyle;
			}


			private function filter(e:Event):void
			{
				trace("FILTER")
			}

			private function onTimelineChange():void
			{
				trace("TIMELINE CHANGE")
			}

			private function updateLinkLength():void
			{
				trace("UPDATE LINK LENGTH")
			}

			private function updateVScale(e:Event):void
			{
				trace("UPDATE V SCALE")
			}
      
      protected function onSelectionChange():void
      {
        trace("VIS SELECTION CHANGED")
        trace(vis.selection.length)
        
        actionbar.selectedObject=null
        actionbar.selectedObjects=null;
        info.selectedItem=null;
        info.selectedItems=null;
        
        linkEnabled=actionbar.linkEnabled=false;
        mergeEnabled=actionbar.mergeEnabled=false;
        jumpEnabled=actionbar.jumpEnabled=false;
        exportEnabled=actionbar.exportEnabled=true;
          
        //Only 1 node 
        if (vis.selection.length == 1 && vis.selection[0].data.name)
        {
          info.selectedItem=EntityManager.instance.getItem(String(vis.selection[0].data.id))
          info.selectedItems=new <Object>[info.selectedItem];
          actionbar.selectedObject=info.selectedItem;
          actionbar.selectedObjects=new <Object>[actionbar.selectedObject];
          actionbar.selectedObjects.push(actionbar.selectedObject)
        }
        //Only 1 edge 
        else if (vis.selection.length == 1 && !vis.selection[0].data.name)
        {
          info.selectedItem=vis.selection[0].data
          info.selectedItems=new <Object>[info.selectedItem];
          actionbar.selectedObject=info.selectedItem;
          actionbar.selectedObjects=new <Object>[actionbar.selectedObject];
          actionbar.selectedObjects.push(actionbar.selectedObject)
            
          if (vis.selection[0].data.info.length() > 0)
            jumpEnabled=actionbar.jumpEnabled=true;
        }
        //merging enabled?
        else if (vis.selection.length == 2)
        {
          actionbar.selectedObjects=new Vector.<Object>
          actionbar.selectedObjects.push(vis.selection[0].data)
          actionbar.selectedObjects.push(vis.selection[1].data)
            if (vis.selection[0].data.name && vis.selection[1].data.name) linkEnabled=actionbar.linkEnabled=true;
          
        if((vis.selection[0].data.type=="person" && vis.selection[1].data.type=="person") || 
           (vis.selection[0].data.type=="target" && vis.selection[1].data.type=="person") || 
           (vis.selection[0].data.type=="person" && vis.selection[1].data.type=="target"))
          {
            mergeEnabled=actionbar.mergeEnabled=true;
          }
        }
        else if (vis.selection.length >1)
        {
         
        }
        //no selection do not enable export
        if(vis.selection.length<1) exportEnabled=actionbar.exportEnabled=false;
        else
        {//check if there is a link object in  selection
          for(var i:int=0;i<vis.selection.length;i++)
          {
            if(!vis.selection[i].data.name) //link has no name
              exportEnabled=actionbar.exportEnabled=false; //link in selection do not enable export
          }
        }

      }
      
      protected function onElementDoubleClick(event:VisualizerEvent):void
      {
        var item:*=EntityManager.instance.getItem(vis.selection[vis.selection.length-1].data.id) //last selected
          
        if (item)
          section.stateManager.manageItemSelection(item);
        
      }
      
      
      
    ]]>
	</fx:Script>

	<fx:Declarations>
		<fx:XML id="dp"
						xmlns="">
			<graphml>

				<node id="t1"
							name="Michael"
							type="target"/>
				<node id="t2"
							name="Jack"
							type="target"/>
				<node id="t3"
							name="Steve"
							type="target"/>
				<node id="l1"
							name="Office"
							type="position"/>
				<node id="l2"
							name="Home"
							type="position"/>
				<node id="v1"
							name="Forum"
							type="virtual"/>

				<node id="g1"
							name="Friends">
					<node id="p1"
								name="John"
								type="person"/>
					<node id="p2"
								name="Jimmy"
								type="person"/>
				</node>

				<node id="g2"
							name="Colleagues">
					<node id="p3"
								name="Jane"
								type="person"/>
					<node id="p4"
								name="Peter"
								type="person"/>
				</node>

				<edge id="e1"
							source="t1"
							target="t2"
							type="know"
							direction="both"
							relevance="0"/>
				<edge id="e2"
							source="t1"
							target="t3"
							type="peer"
							direction="out"
							relevance="0"/>
				<edge id="e3"
							source="t3"
							target="l1"
							type="peer"
							direction="out"
							relevance="2"/>
				<edge id="e4"
							source="t1"
							target="l1"
							type="peer"
							direction="in"
							relevance="3"/>
				<edge id="e5"
							source="t1"
							target="p1"
							type="know"
							direction="in"
							relevance="0"/>
				<edge id="e6"
							source="t3"
							target="p1"
							type="peer"
							direction="out"
							relevance="1"/>
				<edge id="e7"
							source="t1"
							target="p3"
							type="peer"
							direction="out"
							relevance="1"/>
				<edge id="e8"
							source="t2"
							target="p4"
							type="know"
							direction="in"
							relevance="0"/>
			</graphml>
		</fx:XML>
	</fx:Declarations>


	<s:HGroup width="100%"
						height="100%"
						gap="5">
		<s:VGroup width="100%"
							height="100%">

			<s:HGroup verticalAlign="middle"
								horizontalAlign="right"
								width="100%"
								paddingTop="6">

				<renderers:FilterRenderer label="Time"
																	popupFactory="it.ht.rcs.console.entities.view.filters.DateFilterPopup"
																	width="100"/>
				<renderers:FilterRenderer label="Type"
																	popupFactory="it.ht.rcs.console.entities.view.filters.TypeFilterPopup"
																	width="100"/>
				<renderers:FilterRenderer label="Relevance"
																	popupFactory="it.ht.rcs.console.entities.view.filters.TagFilterPopup"
																	width="100"/>
				<renderers:FilterRenderer label="Entities"
																	popupFactory="it.ht.rcs.console.entities.view.filters.TypeFilterPopup"
																	width="100"/>

				<s:CheckBox label="target"
										selected="true"
										id="targetCh"
										change="filter(event)"
										visible="false"
										includeInLayout="false"/>
				<s:CheckBox label="person"
										selected="true"
										id="personCh"
										change="filter(event)"
										visible="false"
										includeInLayout="false"/>
				<s:CheckBox label="position"
										selected="true"
										id="positionCh"
										change="filter(event)"
										visible="false"
										includeInLayout="false"/>
				<s:CheckBox label="virtual"
										selected="true"
										id="virtualCh"
										change="filter(event)"
										visible="false"
										includeInLayout="false"/>

				<s:Spacer width="100%"/>
				<s:Label text="{R.get('FILTER_DATA')} "
								 fontWeight="bold"/>
				<s:Label text="{R.get('FROM')}:"
								 fontWeight="bold"/>
				<mx:DateField id="fromDf"
											formatString="YYYY-MM-DD"
											selectedDate="{startDate}"
											change="filter(event)"/>
				<s:Label text="{R.get('TO')}:"
								 fontWeight="bold"/>
				<mx:DateField id="toDf"
											formatString="YYYY-MM-DD"
											selectedDate="{endDate}"
											change="filter(event)"/>
			</s:HGroup>
			<s:Line width="100%">
				<s:stroke>
					<s:SolidColorStroke color="0xCCCCCC"/>
				</s:stroke>
			</s:Line>
			<mx:Canvas id="graphCnvs"
								 borderStyle="none"
								 borderColor="#CCCCCC"
								 backgroundColor="#FFFFFF"
								 width="100%"
								 height="100%"
								 verticalScrollPolicy="off">


				<visualizer:Visualizer width="100%"
															 height="100%"
															 id="vis"
															 layout="singleCircular"
															 creationComplete="init()"
															 dataProvider="{dp}"
															 groupLabelField="name"
															 linkStyleFunction="{linkStyleFunction}"
															 nodeRendererFunction="{nodeRendererFunction}"
															 groupRendererClass="{CustomGroupRenderer}"
															 showNodeExpandCollapseButton="false"
															 highlightLinksOnSelection="false"
															 fitGroupsToContent="true"
                               elementsSelectionChanged="onSelectionChange()"
                               elementDoubleClicked="onElementDoubleClick(event)"/>


				<s:HGroup x="6"
									y="10"
									verticalAlign="middle"
									horizontalAlign="center">
					<s:Label text="Zoom:"
									 width="60"
									 fontWeight="normal"
									 textAlign="right"
									 fontSize="10"/>
					<s:Label text="-"/>
					<s:HSlider stepSize=".1"
										 x="6"
										 y="6"
										 id="bzoom"
										 value="1"
										 minimum=".25"
										 maximum="2"
										 liveDragging="true"
										 change="updateVScale(null)"/>
					<s:Label text="+"/>

				</s:HGroup>

				<s:HGroup x="6"
									y="40"
									verticalAlign="middle"
									horizontalAlign="center">
					<s:Label text="Link length:"
									 width="60"
									 fontWeight="normal"
									 textAlign="right"
									 fontSize="10"/>
					<s:Label text="-"/>
					<s:HSlider stepSize="25"
										 x="6"
										 y="6"
										 id="lslider"
										 value="80"
										 liveDragging="true"
										 change="updateLinkLength()"
										 minimum="0"
										 maximum="600"/>
					<s:Label text="+"/>

				</s:HGroup>


				<s:HGroup y="6"
									right="6"
									verticalAlign="middle">
					<s:VGroup horizontalAlign="center"
										gap="0">
						<s:Image source="{fullLine}"/>
						<s:Label text="Peer"
										 fontWeight="normal"
										 fontSize="10"/>
					</s:VGroup>
					<s:Spacer width="10"/>
					<s:VGroup horizontalAlign="center"
										gap="0">
						<s:Image source="{dashedLine}"/>
						<s:Label text="Identity"
										 fontWeight="normal"
										 fontSize="10"/>
					</s:VGroup>
					<s:Spacer width="10"/>
					<s:VGroup horizontalAlign="center"
										gap="0">
						<s:Image source="{dottedLine}"/>
						<s:Label text="Know"
										 fontWeight="normal"
										 fontSize="10"/>
					</s:VGroup>
				</s:HGroup>
			</mx:Canvas>
			<s:Line width="100%">
				<s:stroke>
					<s:SolidColorStroke color="0xCCCCCC"/>
				</s:stroke>
			</s:Line>
			<components:Timeline width="100%"
													 id="timeline"
													 step="{Timeline.DAY}"
													 startDate="{startDate}"
													 endDate="{endDate}"
													 change="onTimelineChange()"/>

		</s:VGroup>
		<entities:EntityInfoPanel id="info"/>
	</s:HGroup>

</s:VGroup>
