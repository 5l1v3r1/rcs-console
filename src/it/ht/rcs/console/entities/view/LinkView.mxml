<?xml version="1.0" encoding="utf-8"?>

<s:VGroup xmlns:fx="http://ns.adobe.com/mxml/2009"
					xmlns:s="library://ns.adobe.com/flex/spark"
					xmlns:mx="library://ns.adobe.com/flex/mx"
					xmlns:maps="com.google.maps.*"
          xmlns:graph="it.ht.rcs.console.entities.view.graph.*"
					xmlns:entities="it.ht.rcs.console.entities.view.*"
          xmlns:components="it.ht.rcs.console.entities.view.components.*"
					xmlns:filters="it.ht.rcs.console.entities.view.filters.*"
					xmlns:utils="it.ht.rcs.console.utils.*"
					height="100%"
					width="100%"
					
					creationComplete="onCreationComplete()">
	<fx:Script>
		<![CDATA[
      import com.adrianparr.utils.HtmlEntities;
      import com.greensock.TweenMax;
      
      import fr.kapit.layouts.algorithms.balloon.BalloonLayout;
      import fr.kapit.layouts.algorithms.balloon.BalloonLayoutParams;
      import fr.kapit.layouts.algorithms.circular.SingleCircularLayoutParams;
      import fr.kapit.layouts.algorithms.circular.SingleCycleCircularLayout;
      import fr.kapit.layouts.algorithms.forcedirected.gem.StaticGEMLayout;
      import fr.kapit.layouts.algorithms.forcedirected.gem.StaticGemLayoutParams;
      import fr.kapit.layouts.algorithms.hierarchical.HierarchicalLayout;
      import fr.kapit.layouts.algorithms.hierarchical.HierarchicalLayoutParams;
      import fr.kapit.layouts.algorithms.radial.RadialLayout;
      import fr.kapit.layouts.algorithms.radial.RadialLayoutParams;
      import fr.kapit.layouts.algorithms.sugiyama.SugiyamaLayoutParams;
      import fr.kapit.layouts.constants.EdgeDrawType;
      import fr.kapit.layouts.constants.RootSelectionType;
      import fr.kapit.layouts.model.Edge;
      import fr.kapit.visualizer.Visualizer;
      import fr.kapit.visualizer.actions.PanAction;
      import fr.kapit.visualizer.actions.data.PanActionData;
      import fr.kapit.visualizer.base.IGroup;
      import fr.kapit.visualizer.base.ISprite;
      import fr.kapit.visualizer.base.uicomponent.GenericGroup;
      import fr.kapit.visualizer.events.VisualizerEvent;
      import fr.kapit.visualizer.styles.LinkStyle;
      
      import it.ht.rcs.console.entities.controller.EntityManager;
      import it.ht.rcs.console.entities.model.Entity;
      import it.ht.rcs.console.entities.model.Flow;
      import it.ht.rcs.console.entities.model.Flows;
      import it.ht.rcs.console.entities.model.Link;
      import it.ht.rcs.console.entities.view.actions.CustomPan;
      import it.ht.rcs.console.entities.view.components.advanced.timeline.TimelineUtils;
  
      import it.ht.rcs.console.events.RefreshEvent;
      
      import locale.R;
      
      import mx.collections.ArrayCollection;
      import mx.collections.ListCollectionView;
      import mx.core.FlexGlobals;
      import mx.events.FlexEvent;
      import mx.rpc.events.FaultEvent;
      import mx.rpc.events.ResultEvent;
      
      import spark.collections.Sort;
      import spark.collections.SortField;

			[Bindable]
			public var entities:ListCollectionView;

			[Bindable]
			public var section:EntitiesSection;

			[Bindable]
			public var entitiesToShow:ArrayCollection;

			private var numEntitiesToShow:int=0;


			private var currentIndex:int=0;

			private var roots:ArrayCollection;

			[Bindable]
			public var selectedNodes:ArrayCollection;

			[Bindable]
			public var selectedEdge:Object

			[Bindable]
			public var linkEnabled:Boolean;

			[Bindable]
			public var mergeEnabled:Boolean;

			[Bindable]
			public var jumpEnabled:Boolean;

			[Bindable]
			public var exportEnabled:Boolean;

			public var linkToHighLight:Object;
			public var nodeToHighLight:Object;

			private var sort:Sort;
			private var xmlData:XML;


			[Bindable]
			private var startDate:Date;

			[Bindable]
			private var endDate:Date;

			[Bindable]
			public var actionbar:EntitiesActionBar;

			private var flows:ArrayCollection;

			public var inited:Boolean; //??
      
      private var drawing:Boolean

			[Embed(source='/img/NEW/dottedLine.png')]
			public static const dottedLine:Class;

			[Embed(source='/img/NEW/dashedLine.png')]
			public static const dashedLine:Class;

			[Embed(source='/img/NEW/fullLine.png')]
			public static const fullLine:Class;

      
      private function onCreationComplete():void
      {
      trace("LINK VIEW CREATION COMPLETE")
      
      }

			public function init():void
			{
				trace("LINK VIEW INIT")
        
        if (!entities)
          return;

			}

   

		
      private function onTimelineChange():void
      {
        trace("TIMELINE CHANGE")
      }

      private function filter(e:Event):void
      {
        trace("FILTER")
      }
      
      public function draw():void
      { 
        trace("LINK MAP DRAW")
        
        entitiesToShow=new ArrayCollection()
        
        for (var i:int=0; i < entities.length; i++)
        {
          var entity:Entity=entities.getItemAt(i) as Entity; //TODO : ADD FILTERS
           entitiesToShow.addItem(entity)
        }
        
        graph.draw()
      }
	

		
	
		]]>
	</fx:Script>

	


	<s:HGroup width="100%"
						height="100%"
						gap="5">
		<s:VGroup width="100%"
							height="100%">

			<s:HGroup verticalAlign="middle"
								horizontalAlign="right"
								width="100%"
								paddingTop="6">

		

		
				<s:Spacer width="100%"/>
				<s:Label text="{R.get('FILTER_DATA')} "
								 fontWeight="bold"/>
				<s:Label text="{R.get('FROM')}:"
								 fontWeight="bold"/>
				<mx:DateField id="fromDf"
											formatString="YYYY-MM-DD"
											selectedDate="{startDate}"
											change="filter(event)"/>
				<s:Label text="{R.get('TO')}:"
								 fontWeight="bold"/>
				<mx:DateField id="toDf"
											formatString="YYYY-MM-DD"
											selectedDate="{endDate}"
											change="filter(event)"/>
			</s:HGroup>
			<s:Line width="100%">
				<s:stroke>
					<s:SolidColorStroke color="0xCCCCCC"/>
				</s:stroke>
			</s:Line>
			<s:BorderContainer id="graphCnvs"
												 borderColor="#CCCCCC"
												 backgroundColor="#FFFFFF"
												 width="100%"
												 height="100%">



		
<graph:LinkGraph id="graph"/>

			</s:BorderContainer>
			<s:Line width="100%">
				<s:stroke>
					<s:SolidColorStroke color="0xCCCCCC"/>
				</s:stroke>
			</s:Line>
			<components:Timeline width="100%"
													 id="timeline"
													 step="{Timeline.DAY}"
													 startDate="{startDate}"
													 endDate="{endDate}"
													 change="onTimelineChange()"/>

		</s:VGroup>
		<entities:EntityInfoPanel id="info"/>
	</s:HGroup>

</s:VGroup>
