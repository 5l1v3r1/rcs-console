<?xml version="1.0" encoding="utf-8"?>

<s:VGroup xmlns:fx="http://ns.adobe.com/mxml/2009"
					xmlns:s="library://ns.adobe.com/flex/spark"
					xmlns:mx="library://ns.adobe.com/flex/mx"
					xmlns:maps="com.google.maps.*"
					xmlns:components="it.ht.rcs.console.entities.view.components.*"
					xmlns:ravis="org.un.cava.birdeye.ravis.graphLayout.visual.*"
					xmlns:entities="it.ht.rcs.console.entities.view.*"
					height="100%"
					width="100%"
					creationComplete="init()"
					addedToStage="onAddedToStage()">
	<fx:Script>
		<![CDATA[
			import it.ht.rcs.console.entities.controller.EntityManager;
			import it.ht.rcs.console.entities.model.Entity;
			import it.ht.rcs.console.entities.model.Link;
			import it.ht.rcs.console.events.RefreshEvent;

			import mx.collections.ArrayCollection;
			import mx.core.FlexGlobals;
			import mx.rpc.events.ResultEvent;

			import org.un.cava.birdeye.ravis.components.renderers.edgeLabels.WFBEdgeLabelRenderer;
			import org.un.cava.birdeye.ravis.components.renderers.nodes.IconNodeRenderer;
			import org.un.cava.birdeye.ravis.graphLayout.data.Edge;
			import org.un.cava.birdeye.ravis.graphLayout.data.Graph;
			import org.un.cava.birdeye.ravis.graphLayout.data.INode;
			import org.un.cava.birdeye.ravis.graphLayout.data.Node;
			import org.un.cava.birdeye.ravis.graphLayout.layout.ConcentricRadialLayouter;
			import org.un.cava.birdeye.ravis.graphLayout.visual.edgeRenderers.BidirectedArrowEdgeRenderer;
			import org.un.cava.birdeye.ravis.graphLayout.visual.events.VisualEdgeEvent;
			import org.un.cava.birdeye.ravis.graphLayout.visual.events.VisualGraphEvent;
			import org.un.cava.birdeye.ravis.graphLayout.visual.events.VisualNodeEvent;

			import spark.collections.Sort;
			import spark.collections.SortField;

			[Bindable]
			public var entities:ArrayCollection;

			[Bindable]
			public var section:EntitiesSection;

			private var entitiesToShow:ArrayCollection;

			private var numEntitiesToShow:int=0;

			private var g:Graph;
			private var currentIndex:int=0;

			private var roots:ArrayCollection;

			[Bindable]
			public var selectedNodes:ArrayCollection;

			[Bindable]
			private var selectedEdge:Edge;

			[Bindable]
			public var linkEnabled:Boolean;

			[Bindable]
			public var mergeEnabled:Boolean;

			private var sort:Sort;
			private var xmlData:XML;

			[Embed(source='/img/NEW/dottedLine.png')]
			public static const dottedLine:Class;

			[Embed(source='/img/NEW/dashedLine.png')]
			public static const dashedLine:Class;

			[Embed(source='/img/NEW/fullLine.png')]
			public static const fullLine:Class;


			private function init():void
			{
				FlexGlobals.topLevelApplication.addEventListener(RefreshEvent.REFRESH, onAddedToStage);
				sort=new Sort();
				sort.fields=[new SortField("type", true), new SortField("name", false)]
			}

			private function onAddedToStage(e:Event=null):void
			{
				info.selectedItem=null;
				selectedEdge=null;
				numEntitiesToShow=entities.length;
				trace("entities: " + entities.length);
				entitiesToShow=new ArrayCollection();
				selectedNodes=new ArrayCollection();

				if (vgraph)
				{
					vgraph.graph=new Graph("XMLAsDocsGraph", false, null);
					vgraph.visible=false;
				}
				if (g)
					g.purgeGraph();
				for (var i:int=0; i < entities.length; i++)
				{
					EntityManager.instance.show(entities.getItemAt(i)._id, onDetailResult)
				}
				mergeEnabled=false;
				linkEnabled=false;
			}

			private function analyzeData():void
			{

				g=new Graph("XMLAsDocsGraph", false, xmlData);
				vgraph.visible=true;

				var i:int=0;
				var node:Node;

				//all roots by default
				currentIndex=0;
				roots=new ArrayCollection();
				//backword
				for (i=g.nodes.length; i > 0; i--)
				{
					node=g.nodes[i - 1] as Node;
					roots.addItem(node);
				}

				while (currentIndex < roots.length)
				{
					var currentNode:Node=roots.getItemAt(currentIndex) as Node;
					getConnections(currentNode);
					currentIndex++;
				}

				manipulateData();
			}

			private function getEntityById(id:String):Entity
			{
				for (var i:int=0; i < entities.length; i++)
				{
					var entity:Entity=entities.getItemAt(i) as Entity;
					if (entity._id == id)
					{
						return entity;
					}
				}
				return null;
			}

			private function getConnections(node:INode, examined:Array=null):void
			{
				if (!examined)
					examined=new Array
				if (node)
				{

					for (var i:int=0; i < node.successors.length; i++)
					{
						var child:INode=node.successors[i] as INode;
						examined.push(node);
						if (examined.indexOf(child) == -1)
						{
							var index:int=roots.getItemIndex(child);
							roots.removeItemAt(index);
							getConnections(child, examined);
						}
					}
				}
			}

			private function manipulateData():void
			{

				if (roots.length == 1)
				{
					//trace("no need to add a fake root")
				}
				else
				{
					//trace("more than 1 root - add a fake root and attach real roots")
					var xnode:XML=new XML(" <Node id='0' name='' desc='' nodeColor='0x333333' nodeSize='32' nodeClass='tree' nodeIcon='fake' x='10' y='10' />");
					var fakeRoot:INode=g.createNode("0", xnode);

					for (var i:int=0; i < roots.length; i++)
					{
						var root:Node=roots[i] as Node;
						var xedge:XML=new XML("<Edge edgeLabel='Bad' flow='400' color='0xcd5c5c' edgeClass='sun' edgeIcon='Bad' versus='fake'/>");
						g.link(fakeRoot, root, xedge); //add data
					}
				}

				initData(g)
			}

			private function initData(g:Graph):void
			{
				vgraph.graph=g
				vgraph.currentRootVNode=vgraph.graph.nodes[0].vnode //???

				var layouter:ConcentricRadialLayouter=new ConcentricRadialLayouter(vgraph);
				vgraph.layouter=layouter;
				layouter.linkLength=80; //

				//layouter.autoFitEnabled=true;
				//layouter.defaultRadius=50;

				vgraph.itemRenderer=new ClassFactory(IconNodeRenderer);
				vgraph.edgeRendererFactory=new ClassFactory(BidirectedArrowEdgeRenderer);
				vgraph.edgeLabelRenderer=new ClassFactory(WFBEdgeLabelRenderer);
				vgraph.maxVisibleDistance=20;

				vgraph.addEventListener(VisualEdgeEvent.CLICK, onEdgeClick);
				vgraph.addEventListener(VisualNodeEvent.CLICK, onNodeClick);
				vgraph.addEventListener(VisualGraphEvent.BACKGROUND_CLICK, onBgClick);
				vgraph.scale=1;
				bzoom.value=1;
				vgraph.draw();
			}

			private function onDetailResult(e:ResultEvent):void
			{

				numEntitiesToShow--
				entitiesToShow.addItem(e.result)
				if (numEntitiesToShow == 0)
				{
					parseItems()
				}
			}

			private function onEdgeClick(e:VisualEdgeEvent):void
			{

				var currentRenderer:BidirectedArrowEdgeRenderer;
				var currentEdge:Edge;

				for (var i:int=0; i < g.edges.length; i++)
				{
					currentEdge=g.edges[i] as Edge;
					currentRenderer=currentEdge.vedge.edgeView as BidirectedArrowEdgeRenderer;
					currentRenderer.selected=false;
				}

				var renderer:BidirectedArrowEdgeRenderer=e.edge.edgeView as BidirectedArrowEdgeRenderer;
				renderer.selected=!renderer.selected;
				selectedEdge=e.edge.edge as Edge;
				//remove selected nodes
				for (i=0; i < g.nodes.length; i++)
				{
					var currentNode:Node=g.nodes[i] as Node;
					var currentNodeRenderer:IconNodeRenderer=currentNode.vnode.view as IconNodeRenderer;
					currentNodeRenderer.selected=false;
					var index:int=selectedNodes.getItemIndex(currentNode);
					if (index != -1)
						selectedNodes.removeItemAt(index)

				}
				info.selectedItem=null;
				linkEnabled=false;
				mergeEnabled=false;
			}

			private function onBgClick(e:VisualGraphEvent):void
			{
				var index:int;
				var i:int;
				for (i=0; i < g.nodes.length; i++)
				{
					var currentNode:Node=g.nodes[i] as Node;
					var currentRenderer:IconNodeRenderer=currentNode.vnode.view as IconNodeRenderer;
					currentRenderer.selected=false;
					index=selectedNodes.getItemIndex(currentNode)
					if (index != -1)
						selectedNodes.removeItemAt(index)
				}

				for (i=0; i < g.edges.length; i++)
				{
					var currentEdge:Edge=g.edges[i] as Edge;
					var currentEdgeRenderer:BidirectedArrowEdgeRenderer;
					currentEdgeRenderer=currentEdge.vedge.edgeView as BidirectedArrowEdgeRenderer;
					currentEdgeRenderer.selected=false;

				}
				selectedEdge=null;
				info.selectedItem=null;
				linkEnabled=false;
				mergeEnabled=false;
			}

			private function onNodeClick(e:VisualNodeEvent):void
			{
				var index:int;
				var currentNode:Node;
				var clickedNode:INode=e.node;
				var currentRenderer:IconNodeRenderer;

				if (e.ctrlKey) //multiple selection
				{
					currentRenderer=clickedNode.vnode.view as IconNodeRenderer;
					currentRenderer.selected=!currentRenderer.selected;
					if (currentRenderer.selected)
					{
						selectedNodes.addItem(e.node);
					}
					else
					{
						index=selectedNodes.getItemIndex(clickedNode);
						if (index != -1)
							selectedNodes.removeItemAt(index);
					}
				}


				else //single selection
				{
					for (var i:int=0; i < g.nodes.length; i++)
					{
						currentNode=g.nodes[i] as Node;
						currentRenderer=currentNode.vnode.view as IconNodeRenderer;
						currentRenderer.selected=false;
						index=selectedNodes.getItemIndex(currentNode)
						if (index != -1)
							selectedNodes.removeItemAt(index)

					}
					currentRenderer=clickedNode.vnode.view as IconNodeRenderer;
					currentRenderer.selected=!currentRenderer.selected;
					if (currentRenderer.selected)
					{
						selectedNodes.addItem(e.node);
					}
					else
					{
						index=selectedNodes.getItemIndex(clickedNode);
						if (index != -1)
							selectedNodes.removeItemAt(index)
					}

					if (selectedNodes.length == 2 && (!selectedNodes[0].data.@nodeIcon == "position" && selectedNodes[1].data.@nodeIcon == "position"))
					{
						linkEnabled=true;
					}
					else
					{
						linkEnabled=false;
					}

					if (selectedNodes.length == 2 && (selectedNodes[0].data.@nodeIcon == "person" && selectedNodes[1].data.@nodeIcon == "person"))
					{
						mergeEnabled=true;
					}
					else if (selectedNodes.length == 2 && (selectedNodes[0].data.@nodeIcon == "target" && selectedNodes[1].data.@nodeIcon == "person"))
					{
						mergeEnabled=true;
					}
					else if (selectedNodes.length == 2 && (selectedNodes[0].data.@nodeIcon == "person" && selectedNodes[1].data.@nodeIcon == "target"))
					{
						mergeEnabled=true;
					}
					else
					{
						mergeEnabled=false;
					}
				}

				//trace("selected nodes: " + selectedNodes.length);
				// unselect links
				for (i=0; i < g.edges.length; i++)
				{
					var currentEdge:Edge=g.edges[i] as Edge;
					var currentEdgeRenderer:BidirectedArrowEdgeRenderer;
					currentEdgeRenderer=currentEdge.vedge.edgeView as BidirectedArrowEdgeRenderer;
					currentEdgeRenderer.selected=false;

				}
				selectedEdge=null;
				if (selectedNodes.length == 1)
					info.selectedItem=getEntityById(selectedNodes[0].data.@id)
				else
					info.selectedItem=null;

				if (selectedNodes.length == 2 && !(selectedNodes[0].data.@nodeIcon == "position" && selectedNodes[1].data.@nodeIcon == "position"))
				{
					linkEnabled=true;
				}
				else
				{
					linkEnabled=false;
				}

				if (selectedNodes.length == 2 && (selectedNodes[0].data.@nodeIcon == "person" && selectedNodes[1].data.@nodeIcon == "person"))
				{
					mergeEnabled=true;
				}
				else if (selectedNodes.length == 2 && (selectedNodes[0].data.@nodeIcon == "target" && selectedNodes[1].data.@nodeIcon == "person"))
				{
					mergeEnabled=true;
				}
				else if (selectedNodes.length == 2 && (selectedNodes[0].data.@nodeIcon == "person" && selectedNodes[1].data.@nodeIcon == "target"))
				{
					mergeEnabled=true;
				}
				else
				{
					mergeEnabled=false;
				}
			}

			private function parseItems():void
			{
				entitiesToShow.sort=sort;
				entitiesToShow.refresh();

				var xmlStr:String="<Graph>"
				for (var i:int=0; i < entitiesToShow.length; i++)
				{
					var e:Entity=entitiesToShow.getItemAt(i) as Entity;

					xmlStr+="<Node   id='" + e._id + "'  name='" + e.name + "'   desc='" + e.desc + "'  nodeColor='0x333333'  nodeSize='32'   nodeClass='tree'  nodeIcon='" + e.type + "'   x='10'  y='10' />"
					if (e.links)
					{
						for (var j:int=0; j < e.links.length; j++)
						{
							var link:Link=e.links.getItemAt(j) as Link;
							if (link.versus == "out")
								xmlStr+="<Edge fromID='" + e._id + "' toID='" + link.le + "' rel='" + link.rel + "' type='" + link.type + "' versus='out'";
							else if (link.versus == "in")
								xmlStr+="<Edge fromID='" + link.le + "' toID='" + e._id + "' rel='" + link.rel + "' type='" + link.type + "' versus='in'";
							else if (link.versus == "both")
								xmlStr+="<Edge fromID='" + e._id + "' toID='" + link.le + "' rel='" + link.rel + "' type='" + link.type + "' versus='both'";
							else
								xmlStr+="<Edge fromID='" + e._id + "' toID='" + link.le + "' rel='" + link.rel + "' type='" + link.type + "' versus='both'";
							xmlStr+="/>"
						}
					}
				}
				xmlStr+="</Graph>";
				xmlData=XML(xmlStr);
				analyzeData();
			}

			private function zoomIn():void
			{
				bzoom.value=bzoom.value - .10;
				updateVScale(null);
			}

			private function zoomOut():void
			{
				bzoom.value=bzoom.value - .10;
				updateVScale(null);
			}

			private function updateVScale(e:MouseEvent):void
			{
				if (bzoom == null)
				{
					return;
				}

				if (vgraph == null)
				{
					return;
				}
				//_vgraph.scale = bzoom.value;

				// Handle the update for mousewheel events outside the component
				if (e != null)
				{
					if (e.delta != 0)
					{
						if (bzoom.value == bzoom.minimum)
						{
							if (e.delta > 0)
							{
								bzoom.value=bzoom.value + (e.delta * 0.01);
								vgraph.scale=bzoom.value;
							}
						}
						else if (bzoom.value == bzoom.maximum)
						{
							if (e.delta < 0)
							{
								bzoom.value=bzoom.value + (e.delta * 0.01);
								vgraph.scale=bzoom.value;
							}
						}
						else
						{
							bzoom.value=bzoom.value + (e.delta * 0.01);
							vgraph.scale=bzoom.value;
						}
					}
				}
				// Handle the update for the zoom buttons
				else
				{
					if (bzoom.value <= bzoom.minimum)
					{
						bzoom.value=bzoom.minimum;
						return;
					}
					else
					{
						vgraph.scale=bzoom.value;
					}

					if (bzoom.value >= bzoom.maximum)
					{
						bzoom.value=bzoom.maximum;
						return;
					}
					else
					{
						vgraph.scale=bzoom.value;
					}
				}
			}

			private function refresh():void
			{
				var selectedEntities:ArrayCollection=new ArrayCollection()

				//temp - all entities
				for (var i:int=0; i < section.stateManager.view.length; i++)
				{
					var entity:Entity=section.stateManager.view.getItemAt(i) as Entity;
					selectedEntities.addItem(entity);
				}
				section.stateManager.selectedEntities=selectedEntities;
				onAddedToStage();
			}
		]]>
	</fx:Script>

	<!-- Graph Panel -->
	<entities:LinkActionBar selectedNodes="{selectedNodes}"
													selectedEdge="{selectedEdge}"
													linkAdded="onAddedToStage()"
													linkRemoved="onAddedToStage()"
													entityDeleted="refresh()"
													entityCreated="refresh()"
													merge="refresh()"
													mainView="{this}"
													section="{section}"/>
	<s:HGroup width="100%"
						height="100%"
						gap="5">
		<mx:Canvas id="graphCnvs"
							 borderStyle="none"
							 borderColor="#CCCCCC"
							 backgroundColor="#FFFFFF"
							 width="100%"
							 height="100%"
							 verticalScrollPolicy="off">

			<ravis:VisualGraph id="vgraph"
												 width="100%"
												 height="100%"
												 left="0"
												 right="0"
												 top="0"
												 bottom="5"
												 backgroundColor="#FFFFFF"
												 alpha="1"
												 resize="vgraph.draw(VisualGraph.DF_RESET_LL)"
												 visibilityLimitActive="true">
			</ravis:VisualGraph>
			<s:VGroup x="6"
								y="6"
								verticalAlign="middle"
								horizontalAlign="center">
				<s:Label text="+"/>
				<s:VSlider stepSize=".25"
									 x="6"
									 y="6"
									 id="bzoom"
									 value="1"
									 minimum=".25"
									 maximum="2"
									 liveDragging="true"
									 change="updateVScale(null)"/>
				<s:Label text="-"/>

			</s:VGroup>

			<s:HGroup y="6"
								right="6"
								verticalAlign="middle">
				<s:VGroup horizontalAlign="center"
									gap="0">
					<s:Image source="{fullLine}"/>
					<s:Label text="Peer"
									 fontWeight="normal"
									 fontSize="10"/>
				</s:VGroup>
				<s:Spacer width="10"/>
				<s:VGroup horizontalAlign="center"
									gap="0">
					<s:Image source="{dashedLine}"/>
					<s:Label text="Identity"
									 fontWeight="normal"
									 fontSize="10"/>
				</s:VGroup>
				<s:Spacer width="10"/>
				<s:VGroup horizontalAlign="center"
									gap="0">
					<s:Image source="{dottedLine}"/>
					<s:Label text="Know"
									 fontWeight="normal"
									 fontSize="10"/>
				</s:VGroup>
			</s:HGroup>
		</mx:Canvas>
		<entities:EntityInfoPanel id="info"/>
	</s:HGroup>

</s:VGroup>
