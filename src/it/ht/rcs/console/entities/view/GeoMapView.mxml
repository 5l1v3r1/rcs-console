<?xml version="1.0" encoding="utf-8"?>

<s:VGroup xmlns:fx="http://ns.adobe.com/mxml/2009"
					xmlns:s="library://ns.adobe.com/flex/spark"
					xmlns:mx="library://ns.adobe.com/flex/mx"
					xmlns:maps="com.google.maps.*"
					xmlns:components="it.ht.rcs.console.entities.view.components.*"
					xmlns:ravis="org.un.cava.birdeye.ravis.graphLayout.visual.*"
					xmlns:entities="it.ht.rcs.console.entities.view.*"
					height="100%"
					width="100%"
					creationComplete="init()"
					addedToStage="onAddedToStage()">
	<fx:Script>
		<![CDATA[
      import com.google.maps.LatLng;
      import com.google.maps.LatLngBounds;
      import com.google.maps.Map;
      import com.google.maps.MapEvent;
      import com.google.maps.MapMouseEvent;
      import com.google.maps.MapType;
      import com.google.maps.PaneId;
      import com.google.maps.controls.MapTypeControl;
      import com.google.maps.controls.PositionControl;
      import com.google.maps.controls.ZoomControl;
      import com.google.maps.interfaces.IOverlay;
      import com.google.maps.interfaces.IPane;
      import com.google.maps.overlays.GroundOverlay;
      import com.google.maps.overlays.GroundOverlayOptions;
      import com.google.maps.overlays.Marker;
      import com.google.maps.overlays.MarkerOptions;
      import com.google.maps.overlays.Polyline;
      import com.google.maps.overlays.PolylineOptions;
      import com.google.maps.styles.StrokeStyle;
      
      import it.ht.rcs.console.entities.controller.EntityManager;
      import it.ht.rcs.console.entities.model.Entity;
      import it.ht.rcs.console.entities.model.Link;
      import it.ht.rcs.console.entities.view.map.CustomMarker;
      import it.ht.rcs.console.events.RefreshEvent;
      import it.ht.rcs.console.events.SectionEvent;
      import it.ht.rcs.console.monitor.controller.LicenseManager;
      import it.ht.rcs.console.search.controller.SearchManager;
      import it.ht.rcs.console.search.model.SearchItem;
      
      import mx.collections.ArrayCollection;
      import mx.core.FlexGlobals;
      import mx.rpc.events.ResultEvent;
      
      import spark.collections.Sort;
      import spark.collections.SortField;

			private var _mapPane:IPane;
			private var _markers:Array;
			private var _circles:Array;
			private var _overlays:Array=new Array();
			private var _centre:LatLng;
			private var _scale:Number;
			private var _circleOverlay:IOverlay;
			private var _icons:Dictionary;

			[Bindable]
			public var section:EntitiesSection;
			[Bindable]
			public var entities:ArrayCollection;
			[Bindable]
			public var positions:ArrayCollection;

			private var entitiesToShow:ArrayCollection;
			private var numEntitiesToShow:int=0;

			//Styling
			private var circleFillColor:uint=0xFF0000;
			private var circleFillAlpha:Number=0.2;
			private var circleBorderTickness:int=0.2;
			private var circleBorderFillColor:uint=0xFF0000;
			private var circleBorderFillAlpha:Number=0.5;


			private var relevence0:uint=0x333333;
			private var relevence1:uint=0x999999;
			private var relevence2:uint=0x5DE35F;
			private var relevence3:uint=0xFFDC42;
			private var relevence4:uint=0xFF4034;
			private var relevanceColors:Array;

			private var ready:Boolean;

			private function init():void
			{
				map.addEventListener(MapEvent.MAP_READY, onMapReady)
				FlexGlobals.topLevelApplication.addEventListener(RefreshEvent.REFRESH, onAddedToStage);
				relevanceColors=[relevence0, relevence1, relevence2, relevence3, relevence4]
			}

			private function isPosition(entity:Entity):Boolean
			{
				if (entity.type == "person")
					return false;
				else if (entity.type == "position")
					return true;
				else if (entity.type == "target")
				{
					if (entity.position != null)
						return true;
				}
				return false;
			}

			private function onEntityDeleted():void
			{
				var entity:Entity=info.selectedItem as Entity;
				for (var i:int=0; i < entities.length; i++)
				{
					if (entities.getItemAt(i)._id == entity._id)
					{
						entities.removeItemAt(i)
						trace("remove " + entity.name)
					}
				}
				onAddedToStage(null)
			}

			private function onEntityCreated():void
			{
				refresh()
			}

			private function onEntityUpdated():void
			{
				refresh()
			}

			private function onLinkAdded():void
			{
				refresh()
			}

			private function onAddedToStage(e:Event=null):void
			{
				info.selectedItem=null;
				info.selectedItems=null;
				positions=new ArrayCollection();
				var entity:Entity;
				var i:int;
				for (i=0; i < entities.length; i++)
				{
					entity=entities.getItemAt(i) as Entity;
					if (isPosition(entity))
						positions.addItem(entity);
				}

				numEntitiesToShow=positions.length;
				entitiesToShow=new ArrayCollection();

				for (i=0; i < positions.length; i++)
				{
					EntityManager.instance.show(positions.getItemAt(i)._id, onDetailResult)
				}

			}

			private function onDetailResult(e:ResultEvent):void
			{

				numEntitiesToShow--
				entitiesToShow.addItem(e.result)
				if (numEntitiesToShow == 0)
				{
					if (ready)
					{
						drawMap(entitiesToShow)
					}
				}
			}

			private function onMapClick(e:MapMouseEvent):void
			{
				trace("map clicked");
				e.stopImmediatePropagation()
				var icon:CustomMarker
				for (var i:* in _icons)
				{
					icon=_icons[i]
					icon.selected=false;
				}

				info.selectedItem=null;
				info.selectedItems=new <Object>[];
			}

			private function onMarkerClick(e:MapMouseEvent):void
			{

				trace("marker clicked");
				e.stopImmediatePropagation()
				var icon:CustomMarker
				var i:*;
				//var customMarker:CustomMarker=e.currentTarget.wrapper.options.icon as CustomMarker;
				if (e.ctrlKey) //multiple selection
				{
					icon=_icons[e.currentTarget];
					icon.selected=!icon.selected;
					var selectedItems:Vector.<Object>=new <Object>[];
					for (i in _icons)
					{
						icon=_icons[i]
						if (icon.selected)
							selectedItems.push(icon.entity);
					}
					info.selectedItems=selectedItems
					if (selectedItems.length > 0)
						info.selectedItem=selectedItems[selectedItems.length - 1]
					else
						info.selectedItem=null
				}

				else //single selection
				{
					for (i in _icons)
					{
						icon=_icons[i]
						icon.selected=false;
					}
					icon=_icons[e.currentTarget];
					icon.selected=!icon.selected;
					info.selectedItem=icon.selected ? icon.entity : null;
					info.selectedItems=new <Object>[info.selectedItem];
				}

			}

			private function onMarkerDoubleClick(e:MapMouseEvent):void
			{
				e.stopImmediatePropagation()
				var icon:CustomMarker;
				icon=_icons[e.currentTarget];

        
        var event:SectionEvent=new SectionEvent(SectionEvent.CHANGE_SECTION);
        event.section=SectionEvent.INTELLIGENCE;
        event.subsection='entity';
        event.item=new SearchItem(icon.entity) //SearchManager.instance.getItem(icon.entity._id);
        FlexGlobals.topLevelApplication.dispatchEvent(event);  

			}


			private function drawMap(entities:ArrayCollection):void
			{
				var i:int=0;
				_icons=new Dictionary()
				for (i=0; i < _overlays.length; i++)
				{
					map.removeOverlay(_overlays[i] as IOverlay);
				}
				map.addEventListener(MapMouseEvent.CLICK, onMapClick)
				map.setZoom(3);
				map.setCenter(new LatLng(0, 0));
				var entity:Entity;
				if (entitiesToShow && entitiesToShow.length > 0)
				{
					_markers=new Array();
					_circles=new Array();


					var bounds:LatLngBounds=new LatLngBounds();

					entity=entitiesToShow.getItemAt(0) as Entity;
					_centre=new LatLng(Number(entity.position.latitude), Number(entity.position.longitude));
					map.setCenter(_centre, 14, MapType.NORMAL_MAP_TYPE);
					_overlays=new Array();
					for (i=0; i < entitiesToShow.length; i++)
					{
						entity=entitiesToShow.getItemAt(i) as Entity;
						var coordinates:LatLng=new LatLng(Number(entity.position.latitude), Number(entity.position.longitude));
						var customMarker:CustomMarker=new CustomMarker(entity)
						var marker:Marker=new Marker(coordinates, new MarkerOptions({icon: customMarker, hasShadow: true}));
						_icons[marker]=customMarker;
						marker.shadow.visible=true;
						marker.addEventListener(MapMouseEvent.CLICK, onMarkerClick);
						marker.addEventListener(MapMouseEvent.DOUBLE_CLICK, onMarkerDoubleClick)
						marker.foreground.alpha=1;

						bounds.extend(coordinates);
						var fillColor:uint=entity.type == "position" ? 0x0000FF : 0xFF0000;
						var circleBounds:LatLngBounds=drawCircle(Number(entity.position_attr.accuracy) / 1000, coordinates, fillColor);
						//bounds.union(circleBounds)
						_overlays.push(marker);
						_markers.push(marker);
						map.addOverlay(marker);

						if (entity.links)
						{
							//draw connections
							for (var l:int=0; l < entity.links.length; l++)
							{
								var link:Link=entity.links.getItemAt(l) as Link;
								var entity2:Entity=EntityManager.instance.getEntityById(link.le);
								// trace("Link beetween: "+entity.type+ " and "+EntityManager.instance.getEntityById(link.le).type)
								if (entity && entity2)
								{
									if (entity.type == "target" && entity2.type == "position")
									{
										var color:uint=relevanceColors[link.rel]
										drawLink(entity, entity2, color);
									}
								}
							}
						}
					}
					//selectedPosition=_positions[0]
					map.setCenter(bounds.getCenter(), map.getBoundsZoomLevel(bounds));
				}
			}

			private function drawLink(entity1:Entity, entity2:Entity, color:uint):void
			{
				//https://developers.google.com/maps/documentation/flash/overlays
				var polyline:Polyline=new Polyline([new LatLng(Number(entity1.position.latitude), Number(entity1.position.longitude)), new LatLng(Number(entity2.position.latitude), Number(entity2.position.longitude))], new PolylineOptions({strokeStyle: new StrokeStyle({color: color, thickness: 2, alpha: 1})}));
				map.addOverlay(polyline);
				_overlays.push(polyline);

			}


			private function drawCircle(radiusKm:Number, position:LatLng, color:uint):LatLngBounds
			{
				if (isNaN(radiusKm) || radiusKm <= 0)
				{
					//return new LatLngBounds();
					radiusKm=0.02
				}

				_scale=calculateMapScale();
				var shape:Shape=new Shape();
				var overlay:GroundOverlay;
				var bounds:LatLngBounds;
				var centrePoint:Point;
				var topLeft:LatLng;
				var bottomRight:LatLng;
				var options:GroundOverlayOptions;
				var circleWidth:Number=radiusKm * 2 * _scale;

				shape.graphics.lineStyle(circleBorderTickness, color, circleBorderFillAlpha);
				shape.graphics.beginFill(color, circleFillAlpha);
				shape.graphics.drawCircle(circleWidth * .5, circleWidth * .5, circleWidth);
				shape.graphics.endFill();
				centrePoint=_mapPane.fromLatLngToPaneCoords(position);
				topLeft=_mapPane.fromPaneCoordsToLatLng(new Point(centrePoint.x - circleWidth * .5, centrePoint.y - circleWidth * .5));
				bottomRight=_mapPane.fromPaneCoordsToLatLng(new Point(centrePoint.x + circleWidth * .5, centrePoint.y + circleWidth * .5));
				bounds=new LatLngBounds(topLeft, bottomRight);
				options=new GroundOverlayOptions();
				options.applyProjection=true;
				_circleOverlay=new GroundOverlay(shape, bounds, options);
				map.addOverlay(_circleOverlay);
				_overlays.push(_circleOverlay);
				_circles.push(_circleOverlay);

				return bounds
			}

			private function calculateMapScale():Number
			{
				var topLeft:LatLng;
				var bottomLeft:LatLng;
				var scale:Number;
				var distance:Number;

				topLeft=_mapPane.fromPaneCoordsToLatLng(new Point(0, 0));
				bottomLeft=_mapPane.fromPaneCoordsToLatLng(new Point(0, map.height));
				distance=topLeft.distanceFrom(bottomLeft) / 1000;
				scale=map.height / distance;

				return scale;
			}

			private function onMapReady(e:MapEvent):void
			{
				map.addControl(new ZoomControl());
				map.addControl(new PositionControl());
				map.addControl(new MapTypeControl())

				_mapPane=map.getPaneManager().getPaneAt(PaneId.PANE_MAP);

				map.removeEventListener(MapEvent.MAP_READY, onMapReady)
				ready=true;
				drawMap(entitiesToShow)
			}

			private function refresh():void
			{
				var selectedEntities:ArrayCollection=new ArrayCollection()

				//temp - all entities
				for (var i:int=0; i < section.stateManager.view.length; i++)
				{
					var entity:Entity=section.stateManager.view.getItemAt(i) as Entity;
					selectedEntities.addItem(entity);
				}
				section.stateManager.selectedEntities=selectedEntities;
				onAddedToStage();
			}
		]]>
	</fx:Script>
	<entities:GeoMapActionBar section="{section}"
														selectedObject="{info.selectedItem}"
														selectedObjects="{info.selectedItems}"
														entityDeleted="onEntityDeleted()"
														entityCreated="onEntityCreated()"
														entityUpdated="onEntityUpdated()"
														linkAdded="onLinkAdded()"/>
	<s:HGroup width="100%"
						height="100%"
						gap="5">
		<s:BorderContainer width="100%"
											 height="100%"
											 borderAlpha="1"
											 borderColor="0xCCCCCC"
											 backgroundColor="0xCCCCCC"
											 backgroundAlpha="0.1">
			<maps:Map xmlns:maps="com.google.maps.*"
								id="map"
								width="100%"
								height="100%"
								key="ABQIAAAA8fmTpYQsyimBWFWKgeE9PBRhMg83CBLwD9y4vh6Mu8HzQS3H_RRayLm54B1SF17x6N9sYwYVwJV_FQ"
								url="http://www.hackingteam.it/"
								sensor="false"
								accessibilityDescription=""
								enabled="{LicenseManager.instance.correlation}"
								mapevent_mapready="onMapReady(event)"/>
		</s:BorderContainer>
		<entities:EntityInfoPanel id="info"/>
	</s:HGroup>

</s:VGroup>
