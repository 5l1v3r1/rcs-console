<?xml version="1.0" encoding="utf-8"?>
<filters:AbstractFilterPopup xmlns:fx="http://ns.adobe.com/mxml/2009"
                             xmlns:s="library://ns.adobe.com/flex/spark"
                             xmlns:mx="library://ns.adobe.com/flex/mx"
                             xmlns:xt="library://ns.tink.ws/flex/mx"
                             xmlns:filters="it.ht.rcs.console.entities.view.filters.*"
                             creationComplete="init()" show="show()">
  
  <fx:Script>
    <![CDATA[
      import it.ht.rcs.console.events.FilterEvent;
      import it.ht.rcs.console.utils.Clock;
      import it.ht.rcs.console.utils.TimeUtils;
      
      import mx.core.FlexGlobals;
      
      public static const LAST_MONTH:String="lastMonth";
      public static const LAST_3_MONTHS:String="last3Months";
      public static const LAST_6_MONTHS:String="last6Months";
      
      private function init():void
      {
        group.selection = null;
        rebuild();
        var today:int = new Date().time/1000;
        setFromTimestamp(today - (60*60*24*30));
        setToTimestamp(today);
      }
      
      override public function commit(fireEvent:Boolean=true, setProperty:Boolean=true):void
      {
        if (setProperty)
          filter.time = property;
        
        hasFilter = filter.time == property;
        
        if (fromTo.selected) {
          filter.from = getFromTimestamp();
          filter.to = getToTimestamp();
        } 
        else if (last3Months.selected) {
          filter.from = LAST_3_MONTHS;
          filter.to = 0;
          delete(filter.to);
        } 
        else if (last6Months.selected) {
          filter.from = LAST_6_MONTHS;
          filter.to=0
          delete(filter.to);
        } 
        else if (lastMonth.selected) {
          filter.from = LAST_MONTH;
          filter.to = 0;
          delete(filter.to);
        } 
        else {
          filter.from = 0;
          filter.to = 0;
        }
        visible = false;
        
        FlexGlobals.topLevelApplication.dispatchEvent(new FilterEvent(FilterEvent.REBUILD));
        
        if (fireEvent)
          FlexGlobals.topLevelApplication.dispatchEvent(new FilterEvent(FilterEvent.FILTER_CHANGED));
      }
      
      override public function reset(fireEvent:Boolean=true):void
      {
        group.selection = null;
        
        filter.from = 0;
        filter.to = 0;
        
        commit(fireEvent, false);
      }
      
      private function show():void
      {
        rebuild();
      }
      
      override public function rebuild(e:Event=null):void
      {
        hasFilter = true//filter.time == property;
        if (!hasFilter) {
          group.selection = null;
          return;
        }          
        
        if (filter.from == 0 && filter.to == 0)
          hasFilter = false;
        else if (filter.from && filter.to) {
          fromTo.selected = true;
          setFromTimestamp(filter.from);
          setToTimestamp(filter.to);  
        } else if (filter.from==LAST_3_MONTHS && !filter.to)
          last3Months.selected = true;
        else if (filter.from==LAST_6_MONTHS && !filter.to)
          last6Months.selected = true;
        else if (filter.from==LAST_MONTH && !filter.to)
          lastMonth.selected = true;
      }
    ]]>
  </fx:Script>
  
  <fx:Declarations>
    <s:RadioButtonGroup id="group"/>
  </fx:Declarations>
  
  <s:VGroup gap="10" styleName="evidenceFilter">
    
    <s:RadioButton id="lastMonth"     label="Last Month"        group="{group}"/>
    <s:RadioButton id="last3Months"   label="Last 3 Months"     group="{group}"/>
    <s:RadioButton id="last6Months"   label="Last 6 Months"     group="{group}"/>
    <!--s:RadioButton id="all"        label="All"               group="{group}"/-->
    <s:RadioButton id="fromTo"        label="From / To"         group="{group}"/>
    
    <s:VGroup visible="{fromTo.selected}" includeInLayout="{fromTo.selected}">
      
      <s:HGroup verticalAlign="middle">
        <s:Label width="40" text="From"/>
        <mx:DateField id="from" width="120" change="adjust()" formatString="YYYY-MM-DD"
                      showToday="false" yearNavigationEnabled="true"/>

      </s:HGroup>
      
      <s:HGroup verticalAlign="middle">
        <s:Label width="40" text="To"/>
        <mx:DateField id="to" width="120" change="adjust()" formatString="YYYY-MM-DD"
                      showToday="false" yearNavigationEnabled="true"/>

      </s:HGroup>
      
    </s:VGroup>
    
  </s:VGroup>
  
  <fx:Script>
    <![CDATA[
      private function adjust():void
      {
        var fromTS:int = getFromTimestamp();
        var toTS:int = getToTimestamp();
        
        if (fromTS > toTS)
          setToTimestamp(fromTS);
      }
      
      private function getFromTimestamp():int
      {
        from.selectedDate.hours = 0;
        from.selectedDate.minutes = 0;
        return Clock.instance.toUTCTime(from.selectedDate) / 1000;
      }
      private function getToTimestamp():int
      {
        to.selectedDate.hours = 0;
        to.selectedDate.minutes = 0;
        return Clock.instance.toUTCTime(to.selectedDate) / 1000;
      }
      
      private function setFromTimestamp(ts:int):void
      {
        var fromDate:Date = Clock.instance.toConsoleDate(new Date(ts * 1000));
        from.selectedDate = fromDate;

      }
      
      private function setToTimestamp(ts:int):void
      {
        var toDate:Date = Clock.instance.toConsoleDate(new Date(ts * 1000));
        to.selectedDate = toDate;

      }
      
      private function getOneWeekAgo():int
      {
        return (Clock.instance.toUTCTime(new Date()) / 1000) - 604800; // seconds in 7 days
      }
      
      private function pad(n:Number):String
      {
        return TimeUtils.zeroPad(n, 2);
      }
    ]]>
  </fx:Script>
  
</filters:AbstractFilterPopup>