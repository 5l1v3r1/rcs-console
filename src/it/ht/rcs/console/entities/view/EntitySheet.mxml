<?xml version="1.0" encoding="utf-8"?>
<s:BorderContainer xmlns:fx="http://ns.adobe.com/mxml/2009"
									 xmlns:s="library://ns.adobe.com/flex/spark"
									 xmlns:mx="library://ns.adobe.com/flex/mx"
									 xmlns:maps="com.google.maps.*"
									 xmlns:components="it.ht.rcs.console.entities.view.components.*"
									 height="100%"
									 width="100%"
									 borderColor="0xCCCCCC"
									 backgroundColor="0xFFFFFF"
									 backgroundAlpha="1"
									 creationComplete="init()"
									 addedToStage="onAddedToStage()"
									 removedFromStage="onRemovedFromStage()">
	<fx:Declarations>
		<s:Fade id="fadeIn"
						alphaFrom="0"
						alphaTo="1"
						duration="150"/>
		<s:Fade id="fadeOut"
						alphaFrom="1"
						alphaTo="0"
						duration="150"/>

	</fx:Declarations>
	<fx:Metadata>
    [Event(name="update", type="flash.events.Event")]
    
  </fx:Metadata>
	<fx:Script>
		<![CDATA[
			import com.google.maps.LatLng;
			import com.google.maps.LatLngBounds;
			import com.google.maps.Map;
			import com.google.maps.MapType;
			import com.google.maps.controls.MapTypeControl;
			import com.google.maps.controls.PositionControl;
			import com.google.maps.controls.ZoomControl;
			import com.google.maps.overlays.Marker;

			import it.ht.rcs.console.entities.controller.EntityManager;
			import it.ht.rcs.console.entities.model.Contact;
			import it.ht.rcs.console.entities.model.Entity;
			import it.ht.rcs.console.utils.AlertPopUp;

			import locale.R;

			import mx.collections.ArrayCollection;
			import mx.core.FlexGlobals;
			import mx.events.CloseEvent;
			import mx.managers.PopUpManager;
			import mx.rpc.Fault;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			import mx.controls.advancedDataGridClasses.AdvancedDataGridColumn;

			[Bindable]
			private var accounts:ArrayCollection;

			[Bindable]
			private var contacts:ArrayCollection;

			[Bindable]
			private var locations:ArrayCollection;

			[Bindable]
			private var mostContacted:ArrayCollection;

			[Embed(source='/img/stub/fakeprofile.jpg')]
			[Bindable]
			private var FakeProfile:Class;

			public var fileReference:FileReference;

			[Bindable]
			public var entity:Entity

			private function init():void
			{
				accounts=new ArrayCollection();
				accounts.addItem({type: "facebook", name: "johndoe69"})
				accounts.addItem({type: "gmail", name: "johndoe@gmail.com"})
				accounts.addItem({type: "skype", name: "johndoe"})
				accounts.addItem({type: "msn", name: "johndoe@hotmail.com"})
				accounts.addItem({type: "outlook", name: "me@johndoe.com"})

				contacts=new ArrayCollection();
				contacts.addItem({type: "facebook", name: "johndoe69", perc: "85%"})
				contacts.addItem({type: "gmail", name: "johndoe@gmail.com", perc: "85%"})
				contacts.addItem({type: "skype", name: "johndoe", perc: "85%"})
				contacts.addItem({type: "msn", name: "johndoe@hotmail.com", perc: "85%"})
				contacts.addItem({type: "outlook", name: "me@johndoe.com", perc: "85%"})

				locations=new ArrayCollection();
				locations.addItem({label: "Via della Moscova 13, 20100 - Milano"})
				locations.addItem({label: "Corso di Porta Romana 2, 20100 - Milano"})
				locations.addItem({label: "Viale Andrea Doria 7, 20100 - Milano"})
				locations.addItem({label: "Piazza Cavour 1, 20100 - Milano"})
			}

			private function onMapReady(event:Event):void
			{
				map.addControl(new ZoomControl());
				map.addControl(new PositionControl());
				map.addControl(new MapTypeControl())

				var coordinates:LatLng=new LatLng(37.771008, -122.41175);
				var bounds:LatLngBounds=new LatLngBounds();
				var centre:LatLng=new LatLng(coordinates.lat(), coordinates.lng());
				map.setCenter(centre, 14, MapType.NORMAL_MAP_TYPE);
				bounds.extend(coordinates);
				var marker:Marker=new Marker(coordinates);
				map.addOverlay(marker);
				map.setCenter(bounds.getCenter(), map.getBoundsZoomLevel(bounds));
			}

			private function onUpdate(e:Event):void
			{
				EntityManager.instance.show(entity._id, onDetailResult)
			}


			protected function onAddedToStage():void
			{
				EntityManager.instance.show(entity._id, onDetailResult);
				EntityManager.instance.mostContacted(entity._id, "20130109", "20130109", "3", onContactResult, onContactFault)
			}

			protected function onRemovedFromStage():void
			{
				photoViewer.currentPhoto=""
			}

			private function onContactResult(e:ResultEvent):void
			{
				mostContacted=new ArrayCollection();
				var temp:ArrayCollection=e.result as ArrayCollection;
				for (var i:int=0; i < temp.length; i++)
				{
					var arr:Array=temp.getItemAt(i) as Array;
					for (var k:int=0; k < arr.length; k++)
					{
						var item:Contact=arr[k] as Contact;
						mostContacted.addItem(item);
					}

				}
				//mostContacted=e.result as ArrayCollection;
			}

			private function onContactFault(e:FaultEvent):void
			{

			}

			private function onDetailResult(e:ResultEvent):void
			{
				entity=e.result as Entity;
				nameTxt.text=entity.name;
				descTxt.text=entity.desc;
				photoViewer.currentIndex=0;

				if (entity.photos)
				{
					if (entity.photos.length > 0)
					{
						photoViewer.currentPhoto=entity.photos[photoViewer.currentIndex];
					}
					else
					{
						photoViewer.currentPhoto="";
					}
				}
				else
				{
					photoViewer.currentPhoto="";
				}
				handlesList.dataProvider=entity.handles;
				dispatchEvent(new Event("update"))
			}

			private function addHandle():void
			{
				var popup:HandleForm=PopUpManager.createPopUp(FlexGlobals.topLevelApplication as DisplayObject, HandleForm, true) as HandleForm;
				popup.entity=entity;
				popup.addEventListener("update", onUpdate)
				PopUpManager.centerPopUp(popup);
			}

			private function onRemoveHandle():void
			{
				AlertPopUp.show(R.get('CONFIRM_HANDLE_DELETION'), R.get('CONFIRM'), AlertPopUp.YES | AlertPopUp.NO, null, function(e:CloseEvent):void
				{
					if (e.detail == AlertPopUp.YES)
						EntityManager.instance.deleteHandle(entity._id, handlesList.selectedItem._id, onUpdate)
				}, null, AlertPopUp.NO);
			}

			public function update():void
			{
				onUpdate(null)
			}

			private function formatPerc(item:Object, column:AdvancedDataGridColumn):String
			{

				if (item[column.dataField] == null || item[column.dataField] == "")
					return "";
				return String(item[column.dataField]) + "%";
			}
      
      private function formatType(item:Object, column:AdvancedDataGridColumn):String
      {
        
        if (item[column.dataField] != null || item[column.dataField] != "")
          return "";
        return String("Type:")
      }
		]]>
	</fx:Script>
	<s:layout>
		<s:VerticalLayout paddingBottom="10"
											paddingLeft="10"
											paddingRight="10"
											paddingTop="10"
											gap="6"/>
	</s:layout>
	<s:VGroup width="100%">
		<s:HGroup width="100%">
			<s:RichText fontFamily="Myriad"
									fontSize="20"
									fontWeight="bold"
									paddingTop="2"
									text="{entity.name}"
									id="nameTxt"/>

			<s:Spacer width="100%"/>
			<s:HGroup verticalAlign="middle"
								horizontalAlign="right"
								width="100%">
				<s:Label text="Filter data "
								 fontWeight="bold"/>
				<s:Label text="from:"
								 fontWeight="bold"/>
				<mx:DateField/>
				<s:Label text="to:"
								 fontWeight="bold"/>
				<mx:DateField/>
			</s:HGroup>
		</s:HGroup>

		<s:Line width="100%">
			<s:stroke>
				<s:SolidColorStroke color="0xCCCCCC"/>
			</s:stroke>
		</s:Line>
	</s:VGroup>
	<s:Spacer height="14"/>
	<s:HGroup width="100%"
						height="100%">
		<s:VGroup width="40%"
							height="100%">

			<s:HGroup width="100%">
				<components:PhotoViewer id="photoViewer"
																entity="{entity}"
																update="onUpdate(event)"/>
				<s:VGroup width="100%">
					<s:RichText id="descTxt"
											text="{entity.desc}"
											width="100%"/>
				</s:VGroup>
			</s:HGroup>
			<s:Spacer height="12"/>
			<s:VGroup gap="0"
								width="100%"
								height="100%">
				<s:Label text="Accounts:"
								 fontWeight="bold"/>
				<s:List width="100%"
								height="100%"
								itemRenderer="it.ht.rcs.console.entities.view.ContactListRenderer"
								dataProvider="{entity.handles}"
								id="handlesList"/>
				<s:HGroup gap="-1"
									horizontalAlign="right"
									width="100%">

					<s:Button width="30"
										label="-"
										cornerRadius="0"
										enabled="{handlesList.selectedItem!=null}"
										visible="{entity.handles!=null &amp;&amp; entity.handles.length>0}"
										toolTip="{R.get('REMOVE_HANDLE')}"
										click="onRemoveHandle()"/>
					<s:Button width="30"
										label="+"
										cornerRadius="0"
										toolTip="{R.get('ADD_HANDLE')}"
										click="addHandle()"/>
				</s:HGroup>

			</s:VGroup>

			<s:Spacer height="12"/>
			<s:Label text="Most Contacted:"
							 fontWeight="bold"/>
			<mx:AdvancedDataGrid width="100%"
													 height="100%"
													 headerHeight="0"
													 horizontalGridLines="true"
													 verticalGridLines="false"
													 alternatingItemColors="[0xFFFFFF,0xFFFFFF]" indentation="0" >
				<mx:dataProvider>
					<mx:GroupingCollection2 id="gc"
																	source="{mostContacted}">
						<mx:grouping>
							<mx:Grouping>
								<mx:GroupingField name="type"/>
							</mx:Grouping>
						</mx:grouping>
					</mx:GroupingCollection2>
				</mx:dataProvider>
				<mx:columns>
					<mx:AdvancedDataGridColumn dataField="type"
																		 headerText=""
																		 width="80"
                                     labelFunction="formatType"/>
					<mx:AdvancedDataGridColumn dataField="peer"
																		 headerText=""/>
					<mx:AdvancedDataGridColumn dataField="size"
																		 headerText=""
																		 width="30"/>
					<mx:AdvancedDataGridColumn dataField="count"
																		 headerText=""
																		 width="30"/>
					<mx:AdvancedDataGridColumn dataField="percent"
																		 headerText=""
																		 width="50"
																		 labelFunction="formatPerc"/>
				</mx:columns>
			</mx:AdvancedDataGrid>
		</s:VGroup>
		<s:Spacer width="6"/>
		<s:VGroup width="60%"
							horizontalAlign="center"
							height="100%">

			<s:BorderContainer width="100%"
												 height="100%"
												 borderAlpha="1"
												 borderColor="0x666666"
												 backgroundColor="0xCCCCCC"
												 backgroundAlpha="0.3">
				<s:layout>
					<s:VerticalLayout paddingBottom="10"
														paddingLeft="10"
														paddingRight="10"
														paddingTop="10"
														gap="6"/>
				</s:layout>
				<s:HGroup width="100%"
									horizontalAlign="left">
					<s:CheckBox label="Last Positions"/>
					<s:Spacer width="10"/>
					<s:CheckBox label="Addresses"/>
					<s:Spacer width="10"/>
					<s:CheckBox label="Visited Places"/>
				</s:HGroup>
				<s:VGroup paddingBottom="0"
									paddingTop="0"
									gap="0"
									width="100%"
									height="100%">
					<s:BorderContainer width="100%"
														 height="70%"
														 borderAlpha="1"
														 borderColor="0x666666"
														 backgroundColor="0xCCCCCC"
														 backgroundAlpha="0.3">
						<maps:Map xmlns:maps="com.google.maps.*"
											id="map"
											mapevent_mapready="onMapReady(event)"
											width="100%"
											height="100%"
											key="ABQIAAAA8fmTpYQsyimBWFWKgeE9PBRhMg83CBLwD9y4vh6Mu8HzQS3H_RRayLm54B1SF17x6N9sYwYVwJV_FQ"
											url="http://www.hackingteam.it/"
											sensor="false"
											accessibilityDescription=""/>
					</s:BorderContainer>
					<s:Spacer height="6"/>
					<s:List width="100%"
									height="30%"
									dataProvider="{locations}"
									itemRenderer="it.ht.rcs.console.entities.view.AddressListRenderer"/>
				</s:VGroup>
			</s:BorderContainer>

		</s:VGroup>
	</s:HGroup>
</s:BorderContainer>
