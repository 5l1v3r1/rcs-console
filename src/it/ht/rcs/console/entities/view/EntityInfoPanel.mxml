<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009"
				 xmlns:s="library://ns.adobe.com/flex/spark"
				 xmlns:mx="library://ns.adobe.com/flex/mx"
				 xmlns:users="it.ht.rcs.console.accounting.view.users.*"
         xmlns:utils="it.ht.rcs.console.utils.*"
				 width="325"
				 height="100%">

	<fx:Script>
		<![CDATA[
      import com.google.maps.LatLng;
      import com.google.maps.LatLngBounds;
      import com.google.maps.Map;
      import com.google.maps.MapType;
      import com.google.maps.PaneId;
      import com.google.maps.controls.MapTypeControl;
      import com.google.maps.controls.PositionControl;
      import com.google.maps.controls.ZoomControl;
      import com.google.maps.interfaces.IOverlay;
      import com.google.maps.interfaces.IPane;
      import com.google.maps.overlays.GroundOverlay;
      import com.google.maps.overlays.GroundOverlayOptions;
      import com.google.maps.overlays.Marker;
      import com.google.maps.overlays.MarkerOptions;
      
      import it.ht.rcs.console.ObjectUtils;
      import it.ht.rcs.console.agent.model.Agent;
      import it.ht.rcs.console.entities.controller.EntityManager;
      import it.ht.rcs.console.entities.model.Entity;
      import it.ht.rcs.console.entities.view.map.LastPositionMarker;
      import it.ht.rcs.console.monitor.controller.LicenseManager;
      import it.ht.rcs.console.search.controller.SearchManager;
      import it.ht.rcs.console.target.model.Target;
      import it.ht.rcs.console.utils.Size;
      import it.ht.rcs.console.utils.TimeUtils;
      
      import locale.R;
      
      import mx.events.PropertyChangeEvent;
      
      import org.un.cava.birdeye.ravis.graphLayout.data.Edge;
      
      private var circleFillColor:uint=0x00CCFF;
      private var circleFillAlpha:Number=0.2;
      private var circleBorderTickness:int=0.2;
      private var circleBorderFillColor:uint=0x00CCFF;
      private var circleBorderFillAlpha:Number=0.5;
      
      private var mapPane:IPane;
      private var scale:Number;
      private var centre:LatLng;
      private var circleOverlay:IOverlay;
      private var mapReady:Boolean;
      private var overlays:Array=new Array();

			private var _selectedItem:*;
      private var _selectedItems:Vector.<Object>;
      
      [Bindable]
      public function set selectedItem(value:*):void
      {
        _selectedItem=value;
        if(mapReady)
          drawPosition()
      }
      
      public function get selectedItem():*
      {
        return _selectedItem;
      }
      
      [Bindable]
      public function set selectedItems(value:Vector.<Object>):void
      {
        _selectedItems=value;
        if(mapReady)
          drawPosition()
      }
      
      public function get selectedItems():Vector.<Object>
      {
        return _selectedItems;
      }
     
      private function calculateMapScale():Number
      {
        var topLeft:LatLng;
        var bottomLeft:LatLng;
        var scale:Number;
        var distance:Number;
        
        topLeft=mapPane.fromPaneCoordsToLatLng(new Point(0, 0));
        bottomLeft=mapPane.fromPaneCoordsToLatLng(new Point(0, map.height));
        distance=topLeft.distanceFrom(bottomLeft) / 1000;
        scale=map.height / distance;
        
        return scale;
      }
      
      private function drawCircle(radiusKm:Number, position:LatLng):LatLngBounds
      {
        if (isNaN(radiusKm) || radiusKm <= 0)
        {
          //return new LatLngBounds();
          radiusKm=0.02
        }
        
        scale=calculateMapScale();
        var shape:Shape=new Shape();
        var overlay:GroundOverlay;
        var bounds:LatLngBounds;
        var centrePoint:Point;
        var topLeft:LatLng;
        var bottomRight:LatLng;
        var options:GroundOverlayOptions;
        var circleWidth:Number=radiusKm * 2 * scale;
        
        shape.graphics.lineStyle(circleBorderTickness, circleBorderFillColor, circleBorderFillAlpha);
        shape.graphics.beginFill(circleFillColor, circleFillAlpha);
        shape.graphics.drawCircle(circleWidth * .5, circleWidth * .5, circleWidth);
        shape.graphics.endFill();
        centrePoint=mapPane.fromLatLngToPaneCoords(position);
        topLeft=mapPane.fromPaneCoordsToLatLng(new Point(centrePoint.x - circleWidth * .5, centrePoint.y - circleWidth * .5));
        bottomRight=mapPane.fromPaneCoordsToLatLng(new Point(centrePoint.x + circleWidth * .5, centrePoint.y + circleWidth * .5));
        bounds=new LatLngBounds(topLeft, bottomRight);
        options=new GroundOverlayOptions();
        options.applyProjection=true;
        circleOverlay=new GroundOverlay(shape, bounds, options);
        map.addOverlay(circleOverlay);
        overlays.push(circleOverlay);
        
        return bounds
      }
      
      private function drawPosition():void
      {
        if (LicenseManager.instance.correlation)
        {
          for (var i:int=0; i < overlays.length; i++)
          {
            map.removeOverlay(overlays[i] as IOverlay);
          }
          if (selectedItem  && selectedItem is Entity && selectedItem.position)
          {
            if (selectedItem.position.latitude && selectedItem.position.longitude)
            {
              var coordinates:LatLng=new LatLng(Number(selectedItem.position.latitude), Number(selectedItem.position.longitude));
              var bounds:LatLngBounds=new LatLngBounds();
              var centre:LatLng=new LatLng(coordinates.lat(), coordinates.lng());
              map.setCenter(centre, 14, MapType.NORMAL_MAP_TYPE);
              bounds.extend(coordinates);
              var circleBounds:LatLngBounds=drawCircle(Number(selectedItem.position_attr.accuracy) / 1000, coordinates);
              bounds.union(circleBounds)
              var marker:Marker=new Marker(coordinates, new MarkerOptions({icon: new LastPositionMarker(), hasShadow: false}));
              map.addOverlay(marker);
              overlays.push(marker);
              map.setCenter(bounds.getCenter(), map.getBoundsZoomLevel(bounds));
            }
            else
            {
              map.setCenter(new LatLng(0,0))
              map.setZoom(1);
             
            }
          }
          else
          {
            map.setCenter(new LatLng(0,0))
            map.setZoom(1)
          }
          
        }
      }
      
      private function onMapReady(event:Event):void
      {
       if (LicenseManager.instance.correlation)
        {
          mapReady=true;
          
          map.addControl(new ZoomControl());
          map.addControl(new PositionControl());
          map.addControl(new MapTypeControl());
          
          mapPane=map.getPaneManager().getPaneAt(PaneId.PANE_MAP);
          
          dispatchEvent(new Event("ready"));
          if (selectedItem && selectedItem is Entity && selectedItem.position)
            drawPosition();
          
        }
        else
        {
          //do something
          map.setZoom(1)
        } 
      }
		]]>
	</fx:Script>

	<s:Line left="0"
					top="0"
					bottom="0">
		<s:stroke>
			<s:SolidColorStroke color="#333333"/>
		</s:stroke>
	</s:Line>

	<s:Rect left="6"
					top="0"
					width="100%"
					height="30"
					bottomLeftRadiusX="5"
					bottomLeftRadiusY="5"
					topLeftRadiusX="5"
					topLeftRadiusY="5">
		<s:fill>
			<s:LinearGradient>
				<s:entries>
					<s:GradientEntry color="#E3E6EC"/>
					<s:GradientEntry color="#ffffff"/>
				</s:entries>
			</s:LinearGradient>
		</s:fill>
	</s:Rect>

	<s:Label left="15"
					 height="30"
					 color="#333333"
					 fontFamily="Myriad"
					 fontSize="18"
					 text="{R.get('DETAILS')}"
					 verticalAlign="middle"/>

	<s:Group left="6"
					 top="35"
					 width="100%"
					 height="100%" visible="{selectedItem != null &amp;&amp; selectedItem is Entity}" includeInLayout="{selectedItem != null &amp;&amp; selectedItem is Entity}">
		<s:Form visible="{selectedItem != null &amp;&amp; selectedItems.length==1}" width="100%">
			<s:FormItem label="{R.get('NAME')}">
				<s:RichEditableText editable="false"
														text="{selectedItem.name}" width="200"/>
			</s:FormItem>

      <s:FormItem label="{R.get('DESCRIPTION')}" width="100%">
        <s:RichEditableText editable="false"
                            text="{selectedItem.desc}" width="200"/>
      </s:FormItem>
      <s:Spacer height="20"/>
		
			<s:FormItem label="{selectedItem.type=='target'?R.get('LAST_KNOWN_POSITION'): R.get('POSITION')}"
									includeInLayout="{(selectedItem.type=='target' || selectedItem.type=='position') &amp;&amp; selectedItem.position &amp;&amp; LicenseManager.instance.correlation}"
									visible="{(selectedItem.type=='target' || selectedItem.type=='position') &amp;&amp; selectedItem.position &amp;&amp; LicenseManager.instance.correlation}">
				<s:Label text="Lat: {selectedItem.position.latitude}"/>
      </s:FormItem>
        <s:FormItem label=""
                    includeInLayout="{(selectedItem.type=='target' || selectedItem.type=='position') &amp;&amp; selectedItem.position &amp;&amp; LicenseManager.instance.correlation}"
                    visible="{(selectedItem.type=='target' || selectedItem.type=='position') &amp;&amp; selectedItem.position &amp;&amp; LicenseManager.instance.correlation}">
          <s:Label text="Lng: {selectedItem.position.longitude}"/>
      </s:FormItem>
      <s:FormItem label=""
                  includeInLayout="{selectedItem.type=='target'  &amp;&amp; selectedItem.position &amp;&amp; LicenseManager.instance.correlation}"
                  visible="{selectedItem.type=='target' &amp;&amp; selectedItem.position &amp;&amp; LicenseManager.instance.correlation}">
        <s:Label text="{'('+TimeUtils.timestampFormatter(selectedItem.position_attr.time * 1000)+')'}" />
      </s:FormItem>
      <!-- map -->
      <s:Spacer height="20"/>
      <s:BorderContainer width="300"
                         height="300"
                         borderAlpha="1"
                         borderColor="0x666666"
                         backgroundColor="0xCCCCCC"
                         backgroundAlpha="0.3" includeInLayout="{(selectedItem.type=='target' || selectedItem.type=='position') &amp;&amp; selectedItem.position &amp;&amp; LicenseManager.instance.correlation}"
                         visible="{(selectedItem.type=='target' || selectedItem.type=='position') &amp;&amp; selectedItem.position &amp;&amp; LicenseManager.instance.correlation}">
        <maps:Map xmlns:maps="com.google.maps.*"
                  id="map"
                  mapevent_mapready="onMapReady(event)"
                  width="100%"
                  height="100%"
                  key="ABQIAAAA8fmTpYQsyimBWFWKgeE9PBRhMg83CBLwD9y4vh6Mu8HzQS3H_RRayLm54B1SF17x6N9sYwYVwJV_FQ"
                  url="http://www.hackingteam.it/"
                  sensor="false"
                  accessibilityDescription=""
                  enabled="{LicenseManager.instance.correlation}"/>
        <!-- trick to disbale map -->
        <s:BorderContainer width="100%"
                           height="100%"
                           borderAlpha="0"
                           backgroundColor="0xFFFFFF"
                           backgroundAlpha="0.5"
                           visible="{!LicenseManager.instance.correlation}"
                           includeInLayout="{!LicenseManager.instance.correlation}"/>
      </s:BorderContainer>
		</s:Form>
	</s:Group>
  <s:Group left="6"
           top="35"
           width="100%"
           height="100%" visible="{selectedItem != null &amp;&amp; (selectedItem is Edge || selectedItem is XMLList)}" includeInLayout="{selectedItem != null &amp;&amp; (selectedItem is Edge || selectedItem is XMLList)}">
    
    <s:Form visible="{selectedItem != null &amp;&amp; selectedItems.length==1}" width="100%">
      <s:FormItem label="{R.get('FROM')}">
        <s:RichEditableText editable="false"
                            text="{EntityManager.instance.getEntityById(selectedItem.data.@fromID).name}" width="200"/>
      </s:FormItem>
      <s:FormItem label="{R.get('TO')}">
        <s:RichEditableText editable="false"
                            text="{EntityManager.instance.getEntityById(selectedItem.data.@toID).name}" width="200"/>
      </s:FormItem>
      
      <s:FormItem label="{R.get('RELEVANCE')}" skinClass="it.ht.rcs.console.skins.EvidenceFormItemSkin" textAlign="right">
        <utils:TagImage value="{selectedItem.data.@rel}"/>
      </s:FormItem>
      
      <s:FormItem label="{R.get('TYPE')}">
        <s:RichEditableText editable="false"
                            text="{selectedItem.data.@type}" width="200"/>
      </s:FormItem>
      <s:FormItem label="{R.get('LEVEL')}">
        <s:RichEditableText editable="false"
                            text="{selectedItem.data.@level}" width="200"/>
      </s:FormItem>
    <!--  <s:FormItem label="{R.get('VERSUS')}">
        <s:RichEditableText editable="false"
                            text="{selectedItem.data.@versus}" width="200"/>
      </s:FormItem>-->
      
    </s:Form>
  
  </s:Group>

</s:Group>
