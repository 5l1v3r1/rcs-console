<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009"
				 xmlns:s="library://ns.adobe.com/flex/spark"
				 xmlns:mx="library://ns.adobe.com/flex/mx"
				 implements="fr.kapit.visualizer.renderers.IGroupRenderer,mx.core.IDataRenderer, fr.kapit.visualizer.renderers.ISelectable"
				 resize="onResize()"
				 useHandCursor="true"
				 buttonMode="true">
  
  
	<fx:Script>
		<![CDATA[
      import fr.kapit.visualizer.renderers.IGroupRenderer;
      
      import mx.core.IDataRenderer;
      
      import spark.filters.GlowFilter;


			[Embed(source="/img/NEW/entity_operation_50.png")]
			[Bindable]
			public var OperationIcon:Class;

			[Bindable]
			private var _data:Object;

			[Bindable]
			private var _isGroupExpanded:Boolean;
      
      private var filter:spark.filters.GlowFilter=new GlowFilter(0x0099FF, 1,10,10,1,1)


			public function set data(value:Object):void
			{
				_data=value;
				//icon.source=OperationIcon
				label.text=value.name;
			}

			public function get data():Object
			{
				return _data;
			}

			public function get groupPaddingTop():Number
			{
				return 40;
			}

			public function get groupPaddingBottom():Number
			{
				return 5;
			}

			public function get groupPaddingLeft():Number
			{
				return 5;
			}

			public function get groupPaddingRight():Number
			{
				return 5;
			}

			public function get groupMinWidth():Number
			{
				return 100;
			}

			public function get groupMinHeight():Number
			{
				return 30;
			}

			public function set isGroupExpanded(value:Boolean):void
			{
				_isGroupExpanded=value

			}

			public function get isGroupExpanded():Boolean
			{
				return _isGroupExpanded;
			}

			private function onResize():void
			{
				trace("resizing")
			}

      private var _isSelected:Boolean;
      
      public function get isSelected():Boolean
      {
        return _isSelected;
      }
      public function set isSelected(value:Boolean):void
      {
        _isSelected = value;
        if(value)
          this.filters=[filter]
        else
          this.filters=null
      }
      
      private var _isHighlighted:Boolean;
      
      public function get isHighlighted():Boolean
      {
        return _isHighlighted;
      }
      
      public function set isHighlighted(value:Boolean):void
      {
        _isHighlighted = value;
      }
      
		]]>
	</fx:Script>
	<!--<s:VGroup paddingBottom="0"
						paddingLeft="0"
						paddingRight="0"
						paddingTop="0"
						width="100%"
						verticalAlign="middle"
						horizontalAlign="center">
		<s:Label id="label"
						 width="100"
						 maxDisplayedLines="2"
						 textAlign="center"
						 fontWeight="bold"/>
		<s:Image id="icon"
						 width="50"
						 height="50"/>

	</s:VGroup>-->
	<s:BorderContainer width="100%"
										 height="100%"
										 id="frame"/>
	<s:Label id="label"
					 x="30"
					 y="10"
					 fontWeight="bold"/>
</s:Group>
