<?xml version="1.0" encoding="utf-8"?>
<main:Section xmlns:fx="http://ns.adobe.com/mxml/2009"
              xmlns:s="library://ns.adobe.com/flex/spark"
              xmlns:mx="library://ns.adobe.com/flex/mx"
              xmlns:main="it.ht.rcs.console.main.*"
              xmlns:view="it.ht.rcs.console.alerting.view.*"
              addedToStage="onAddedToStage()" creationComplete="init()"
              removedFromStage="onRemovedFromStage()">
  
  
  <main:layout>
    <s:VerticalLayout paddingBottom="5" paddingLeft="5" paddingRight="5" paddingTop="5"/>
  </main:layout>
  
  
  <fx:Script>
    <![CDATA[
      import it.ht.rcs.console.alert.controller.AlertManager;
      import it.ht.rcs.console.alert.model.Alert;
      
      import mx.collections.ListCollectionView;
      
      import spark.collections.Sort;
      import spark.collections.SortField;
      
      [Bindable]
      private var view:ListCollectionView;
      
      private function init():void
      {
        var defaultSort:Sort = new Sort();
        defaultSort.fields = [new SortField('_id', false, false)];
        view = AlertManager.instance.getView(defaultSort, searchFilterFunction);        
      }
      
      private function onAddedToStage():void
      {
        AlertManager.instance.listenRefresh();
        AlertManager.instance.startAutorefresh();
      }
      
      private function onRemovedFromStage():void
      {
        AlertManager.instance.unlistenRefresh();
        AlertManager.instance.stopAutorefresh();
      }
      
      private function searchFilterFunction(item:Object):Boolean
      {
        if (item.keywords == null && actionBar.searchInput.text.length > 0)
          return false;
        
        try {
          return item.keywords.toLowerCase().indexOf(actionBar.searchInput.text.toLowerCase()) != -1;
        } catch (e:Error) {}
        
        return true;
      }
    ]]>
  </fx:Script>
  

  <view:AlertingActionBar id="actionBar" selectedObject="{alerts.selectedItem}" view="{view}" alerts="{alerts}" logs="{logs}"/>
  
  <view:AlertingTable id="alerts" dataProvider="{view}"/>
  
  <view:LogsActionBar selectedObject="{logs.selectedItem}" view="{(alerts.selectedItem as Alert).logs}"/>

  <view:LogsTable id="logs" dataProvider="{(alerts.selectedItem as Alert).logs}"/>


</main:Section>