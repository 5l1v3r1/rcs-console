<?xml version="1.0" encoding="utf-8"?>
<s:HGroup xmlns:fx="http://ns.adobe.com/mxml/2009" 
          xmlns:s="library://ns.adobe.com/flex/spark" 
          xmlns:mx="library://ns.adobe.com/flex/mx"
          bottom="10" top="0" right="10" left="10"
          creationComplete="init()"
          addedToStage="added()">
  <fx:Script>
    <![CDATA[
      import it.ht.rcs.console.accounting.controller.SessionManager;
      import it.ht.rcs.console.accounting.controller.UserManager;
      import it.ht.rcs.console.accounting.model.User;
      import it.ht.rcs.console.events.EditEvent;
      import it.ht.rcs.console.utils.AlertPopUp;
      import it.ht.rcs.console.utils.TimeUtils;
      
      import locale.R;
      
      import mx.collections.ListCollectionView;
      import mx.events.CloseEvent;
      import mx.managers.PopUpManager;
      
      import spark.components.gridClasses.GridColumn;
      
      [Bindable]
      private var _users_view:ListCollectionView;
      [Bindable]
      private var _conn_users_view:ListCollectionView;
      
      private function init():void
      {
        /* this event is fired by the itemrenderer in the user list (when editing, doubleclick) */
        addEventListener(EditEvent.USER, onEditUser);
      }
      
      private function added():void
      {
        /* get the view on users list */
        _conn_users_view = SessionManager.instance.getView();
        _users_view = UserManager.instance.getView();
      }
      
      private function formatdate(item:Object, column:GridColumn):String
      {
        return TimeUtils.timestampFormatter(item[column.dataField] * 1000);
      }
      
      private function deleteUser(user:User):void
      {
        if (user == null)
          return;
        
        AlertPopUp.show(R.get('CONFIRM_USER_DELETION', [user.name]), R.get('CONFIRM'), AlertPopUp.YES|AlertPopUp.NO, null,
          function(e:CloseEvent):void {
            if (e.detail == AlertPopUp.YES) 
              UserManager.instance.removeItem(user);
          }, null, AlertPopUp.NO);
      }
      
      private function addUser():void
      {
        /* create the new user */
        UserManager.instance.newUser(function onSuccess(u:User):void {
          selectUser(u);
          editUser(u);
        });
      }
      
      private function selectUser(u:User):void
      {
//        var index:Vector.<int> = new Vector.<int>(1);
//        index[0] = _users_view.getItemIndex(u);
//        userslist.selectedIndices = index;
        userslist.selectedItem = u;
      }
      
      private function onEditUser(e:EditEvent):void
      {
        editUser(e.user);
      }
      
      private function editUser(u:User):void
      {
        var eu:UserEdit = PopUpManager.createPopUp(root, UserEdit, true) as UserEdit;
        eu.user = u;
        /* keep the user selected even if it changes position (due to alphabetical sorting) */
        eu.callback = function select():void {
          selectUser(u);
        };
        PopUpManager.centerPopUp(eu);
      }
    ]]>
  </fx:Script>
  
  <fx:Metadata>
    [ResourceBundle("localized_main")] 
  </fx:Metadata>
  
  <!-- USERS -->
  <s:SkinnableContainer width="100%" height="100%">
    <s:Label text="{resourceManager.getString('localized_main', 'USERS')}" horizontalCenter="0" top="5" paddingRight="0" styleName="AccountingTitles"/>
    <s:BorderContainer id="userlistshadow" borderVisible="true" dropShadowVisible="true" right="0" left="0" top="30" bottom="0" backgroundColor="#EAEAEA">
      <s:List id="userslist" left="5" bottom="20" right="5" top="5" borderVisible="false" dataProvider="{_users_view}" itemRenderer="it.ht.rcs.console.accounting.view.users.UserRenderer" contentBackgroundColor="#EAEAEA">
        <s:layout>
          <s:TileLayout horizontalGap="10" verticalGap="10" />
        </s:layout>
      </s:List>
      <!-- the current user cannot delete himself -->
      <s:Button label="-" width="32" height="20" right="33" bottom="1" styleName="AddRemove" 
                enabled="{userslist.selectedItem != null &amp;&amp; (userslist.selectedItem as User)._id != console.currentSession.user._id}" 
                click="deleteUser(userslist.selectedItem as User)" 
                toolTip="{resourceManager.getString('localized_main', 'USER_DELETE')}"/>
      <s:Button label="+" width="32" height="20" right="1" bottom="1" styleName="AddRemove" 
                click="addUser()" 
                toolTip="{resourceManager.getString('localized_main', 'USER_ADD')}"/>
    </s:BorderContainer>
  </s:SkinnableContainer>
  
  <!-- CONNECTED USERS -->
  <s:SkinnableContainer width="100%" height="100%">
    <s:Label text="{resourceManager.getString('localized_main', 'USERS_CONNECTED')}" horizontalCenter="0" top="5" styleName="AccountingTitles"/>
    <s:BorderContainer id="activeuserlistshadow" borderVisible="false" dropShadowVisible="true" right="0" left="0" top="30" bottom="0">

      <s:DataGrid id="activeusersgrid" left="0" right="0" top="0" bottom="0" editable="false" dataProvider="{_conn_users_view}">
        <s:columns>
          <s:ArrayList>
            <s:GridColumn headerText="{resourceManager.getString('localized_main', 'USER')}" dataField="user.name" minWidth="200"/>
            <s:GridColumn headerText="{resourceManager.getString('localized_main', 'PRIVILEGES')}" dataField="level" width="85" resizable="false" itemRenderer="it.ht.rcs.console.accounting.view.users.PrivsRenderer"/>
            <s:GridColumn headerText="{resourceManager.getString('localized_main', 'ADDRESS')}" dataField="address"/>
            <s:GridColumn headerText="{resourceManager.getString('localized_main', 'LOGON_TIME')}" dataField="time" labelFunction="formatdate" width="130" resizable="false"/>
            <s:GridColumn headerText="" sortable="false" resizable="false" width="35">
              <s:itemRenderer>
                <fx:Component>
                  <s:GridItemRenderer>
                    <fx:Script>
                      <![CDATA[
                        import it.ht.rcs.console.accounting.controller.SessionManager;
                        import it.ht.rcs.console.accounting.controller.UserManager;
                      ]]>
                    </fx:Script>
                    <s:SkinnableContainer width="100%" height="100%">
                      <s:Button skinClass="spark.skins.spark.TitleWindowCloseButtonSkin" top="5" left="5" height="15" width="15" toolTip="{resourceManager.getString('localized_main', 'DISCONNECT_USER')}" horizontalCenter="0" click="{SessionManager.instance.disconnectUser(data)}" />                                                
                    </s:SkinnableContainer>
                  </s:GridItemRenderer>
                </fx:Component>
              </s:itemRenderer>
            </s:GridColumn>
          </s:ArrayList>
        </s:columns>
      </s:DataGrid>
    </s:BorderContainer>
  </s:SkinnableContainer>
  
</s:HGroup>
