<?xml version="1.0" encoding="utf-8"?>
<s:HGroup xmlns:fx="http://ns.adobe.com/mxml/2009" 
          xmlns:s="library://ns.adobe.com/flex/spark" 
          xmlns:mx="library://ns.adobe.com/flex/mx"
          top="0" right="10" bottom="10" left="10"
          creationComplete="init()">
  <fx:Script>
    <![CDATA[
      import it.ht.rcs.console.events.EditEvent;
      
      import mx.collections.ArrayCollection;
      import mx.controls.Alert;
      import mx.events.CloseEvent;
      import mx.managers.PopUpManager;
      
      private function init():void
      {
        /* this event is fired by the itemrenderer in the user list (when editing, doubleclick) */
        addEventListener(EditEvent.GROUP, onEditGroup);
      }
      
      private function onEditGroup(e:EditEvent):void
      {
        GroupManager.instance.groups.refresh();  
      }
      
      private function deleteGroup(group:Group):void
      {
        if (group == null)
          return;
        
        Alert.show(resourceManager.getString('localized_main', 'CONFIRM_GROUP_DELETION') + ' ' + group.name + ' ?', resourceManager.getString('localized_main', 'CONFIRM'), Alert.YES|Alert.NO, null,
          function(e:CloseEvent):void {
            if (e.detail == Alert.YES) 
              GroupManager.instance.removeGroup(group);
          }, null, Alert.NO);
      }
      
      private function addGroup():void
      {
        /* create the new group */
        var new_group:Group = GroupManager.instance.newGroup();
        
        /* select the last item (the newly created one) */
        var index:Vector.<int> = new Vector.<int>(1);
        index[0] = GroupManager.instance.groups.getItemIndex(new_group);
        groupslist.selectedIndices = index;
      }
      
      private function onSelectGroup():void
      {
        if (groupslist.selectedItem != null) {
          //groupcontainer.addElement(rightpanels);
          rightpanels.visible = true;
        } else {
          //groupcontainer.removeElement(rightpanels);
          rightpanels.visible = false;
        }
      }
      
      private function removeUserFromGroup(u:User, g:Group):void
      {
        /* remove the user from the group */
        g.removeUser(u);
        g.save();
        /* and viceversa */
        u.removeGroup(g);
        u.save();
        /* refresh the dataprovider, since it is not bindable (is the result of a filter) */
        usersingroup.dataProvider = UserManager.instance.usersFromIds(g.users);
      }

      private function addUserToGroup(u:User, g:Group):void
      {
        /* add the user to the group */
        g.addUser(u);
        g.save();
        /* and viceversa */
        u.addGroup(g);
        u.save();
        /* refresh the dataprovider, since it is not bindable (is the result of a filter) */
        usersingroup.dataProvider = UserManager.instance.usersFromIds(g.users);
      }
      
    ]]>
  </fx:Script>
  
  <fx:Metadata>
    [ResourceBundle("localized_main")] 
  </fx:Metadata>
  
  <!-- GROUPS -->
  <s:SkinnableContainer width="100%" height="100%">
    <s:Label text="{resourceManager.getString('localized_main', 'GROUPS')}" horizontalCenter="0" top="5" styleName="AccountingTitles"/>
    <s:BorderContainer top="30" right="0" bottom="0" left="0" dropShadowVisible="true" backgroundColor="#EAEAEA">
      <s:List id="groupslist" left="5" bottom="20" right="5" top="5" borderVisible="false" contentBackgroundColor="#EAEAEA" 
              dataProvider="{GroupManager.instance.groups}" 
              itemRenderer="it.ht.rcs.console.accounting.GroupRenderer" change="onSelectGroup()">
        <s:layout>
          <s:TileLayout horizontalGap="10" verticalGap="10" />
        </s:layout>
      </s:List>
      <s:Button label="-" width="30" height="20" right="31" bottom="1" styleName="AddRemove" 
                enabled="{groupslist.selectedItem != null}" 
                click="deleteGroup(groupslist.selectedItem as Group)" 
                toolTip="{resourceManager.getString('localized_main', 'GROUP_DELETE')}"/>
      <s:Button label="+" width="30" height="20" right="1" bottom="1" styleName="AddRemove" 
                click="addGroup()"
                toolTip="{resourceManager.getString('localized_main', 'GROUP_ADD')}"/>
    </s:BorderContainer>
  </s:SkinnableContainer>
  
  <!-- USERS & ACTIVITIES IN GROUP -->
  <s:SkinnableContainer id="rightpanels" width="30%" height="100%" visible="true">
    <s:BorderContainer top="30" right="0" left="0" bottom="0" borderVisible="false">
      <s:VGroup left="0" top="0" right="0" bottom="0" horizontalAlign="right">
        <s:Label text="Users in this group" styleName="AccountingTitles"/>
        <s:BorderContainer width="100%" height="50%" dropShadowVisible="true" backgroundColor="#EAEAEA">
          <s:List id="usersingroup" left="5" right="5" top="5" bottom="20" borderVisible="false" contentBackgroundColor="#EAEAEA" 
                  labelField="username" 
                  dataProvider="{UserManager.instance.usersFromIds((groupslist.selectedItem as Group).users)}"/>
          <s:Button label="-" width="30" height="20" right="101" bottom="1" styleName="AddRemove"
                    enabled="{usersingroup.selectedItem != null}"
                    click="{removeUserFromGroup(usersingroup.selectedItem as User, groupslist.selectedItem as Group)}"/>
          <s:DropDownList bottom="1" right="1" width="100" height="20" enabled="{groupslist.selectedItem != null}" dataProvider="{UserManager.instance.users}" labelField="username"/>
        </s:BorderContainer>
        <mx:Spacer height="5"/>
        <s:Label text="Activities associated to this group" styleName="AccountingTitles"/>
        <s:BorderContainer width="100%" height="50%" dropShadowVisible="true" backgroundColor="#EAEAEA">
        </s:BorderContainer>
      </s:VGroup>
    </s:BorderContainer>
  </s:SkinnableContainer>

</s:HGroup>
