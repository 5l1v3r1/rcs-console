<?xml version="1.0" encoding="utf-8"?>
<s:HGroup xmlns:fx="http://ns.adobe.com/mxml/2009" 
          xmlns:s="library://ns.adobe.com/flex/spark" 
          xmlns:mx="library://ns.adobe.com/flex/mx"
          top="0" right="10" bottom="10" left="10"
          creationComplete="init()">
  <fx:Script>
    <![CDATA[
      import it.ht.rcs.console.events.EditEvent;
      import it.ht.rcs.console.model.Group;
      import it.ht.rcs.console.model.User;
      
      import mx.collections.ListCollectionView;
      import mx.controls.Alert;
      import mx.controls.Menu;
      import mx.events.CloseEvent;
      import mx.events.MenuEvent;
      import mx.managers.PopUpManager;
      
      [Bindable]
      private var _groups_view:ListCollectionView;
      
      private function init():void
      {
        _groups_view = GroupManager.instance.getView();
        
        this.removeElement(rightpanels);
      }
      
      private function deleteGroup(group:Group):void
      {
        if (group == null)
          return;
        
        Alert.show(resourceManager.getString('localized_main', 'CONFIRM_GROUP_DELETION') + ' ' + group.name + ' ?', resourceManager.getString('localized_main', 'CONFIRM'), Alert.YES|Alert.NO, null,
          function(e:CloseEvent):void {
            if (e.detail == Alert.YES) 
              GroupManager.instance.removeItem(group);
          }, null, Alert.NO);
      }
      
      private function addGroup():void
      {
        /* create the new group */
        GroupManager.instance.newGroup(function onSuccess(g:Group):void {
          selectGroup(g);
        });
      }
      
      private function selectGroup(g:Group):void
      {
        /* select the item in the list */
        var index:Vector.<int> = new Vector.<int>(1);
        index[0] = _groups_view.getItemIndex(g);
        groupslist.selectedIndices = index;
      }
      
      private function onSelectGroup():void
      {
        /* display/hide the right panel */
        if (groupslist.selectedItem != null) {
          this.addElement(rightpanels);
        } else {
          this.removeElement(rightpanels);
        }
      }
      
      private function removeUserFromGroup(u:User, g:Group):void
      {
        g.removeUser(u, function _():void {
          /* refresh the view */
          usersingroup.dataProvider = UserManager.instance.getViewIds(g.user_ids);
        });
      }
      
      private function addUserToGroup(event:MenuEvent):void 
      {
        var u:User = event.item as User;
        var g:Group = groupslist.selectedItem as Group;
       
        g.addUser(u, function _():void {
          /* refresh the view */
          usersingroup.dataProvider = UserManager.instance.getViewIds(g.user_ids);
        });        
      }
      
      private function initMenuUser():void
      {
        var _menu:Menu;
        _menu = new Menu();
        _menu.dataProvider = UserManager.instance.getView();
        _menu.labelField = 'name';
        _menu.selectedIndex = 0;
        _menu.addEventListener(MenuEvent.ITEM_CLICK, addUserToGroup);
        adduserButton.popUp = _menu;
      }
      
    ]]>
  </fx:Script>
  
  <fx:Metadata>
    [ResourceBundle("localized_main")] 
  </fx:Metadata>
  
  <!-- GROUPS -->
  <s:SkinnableContainer width="100%" height="100%">
    <s:Label text="{resourceManager.getString('localized_main', 'GROUPS')}" horizontalCenter="0" top="5" styleName="AccountingTitles"/>
    <s:BorderContainer top="30" right="0" bottom="0" left="0" dropShadowVisible="true" backgroundColor="#EAEAEA">
      <s:List id="groupslist" left="5" bottom="20" right="5" top="5" borderVisible="false" contentBackgroundColor="#EAEAEA" 
              dataProvider="{_groups_view}" 
              itemRenderer="it.ht.rcs.console.accounting.GroupRenderer" change="onSelectGroup()" >
        <s:layout>
          <s:TileLayout horizontalGap="10" verticalGap="10" />
        </s:layout>
      </s:List>
      <s:Button label="-" width="30" height="20" right="31" bottom="1" styleName="AddRemove" 
                enabled="{groupslist.selectedItem != null}" 
                click="deleteGroup(groupslist.selectedItem as Group)" 
                toolTip="{resourceManager.getString('localized_main', 'GROUP_DELETE')}"/>
      <s:Button label="+" width="30" height="20" right="1" bottom="1" styleName="AddRemove" 
                click="addGroup()"
                toolTip="{resourceManager.getString('localized_main', 'GROUP_ADD')}"/>
    </s:BorderContainer>
  </s:SkinnableContainer>
  
  <!-- USERS & ACTIVITIES IN GROUP -->
  <s:SkinnableContainer id="rightpanels" width="30%" height="100%" visible="true">
    <s:BorderContainer top="30" right="0" left="0" bottom="0" borderVisible="false">
      <s:VGroup left="0" top="0" right="0" bottom="0" horizontalAlign="right">
        <s:Label text="Users in this group" styleName="AccountingTitles"/>
        <s:BorderContainer width="100%" height="50%" dropShadowVisible="true" backgroundColor="#EAEAEA">
          <s:List id="usersingroup" left="5" right="5" top="5" bottom="20" borderVisible="false" contentBackgroundColor="#EAEAEA" 
                  labelField="name" 
                  dataProvider="{UserManager.instance.getViewIds((groupslist.selectedItem as Group).user_ids)}"/>
          <s:Button label="-" width="30" height="20" right="51" bottom="1" styleName="AddRemove"
                    enabled="{usersingroup.selectedItem != null}"
                    click="{removeUserFromGroup(usersingroup.selectedItem as User, groupslist.selectedItem as Group)}"/>
          <mx:PopUpButton id="adduserButton" right="1" bottom="1" width="50" height="20" styleName="AddRemove"
                              label="+" 
                              enabled="{groupslist.selectedItem != null}"
                              openAlways="true" creationComplete="initMenuUser()"/>
        </s:BorderContainer>
        
        <s:Spacer height="5"/>
        
        <s:Label text="Activities associated to this group" styleName="AccountingTitles"/>
        <s:BorderContainer width="100%" height="50%" dropShadowVisible="true" backgroundColor="#EAEAEA">
        </s:BorderContainer>
      </s:VGroup>
    </s:BorderContainer>
  </s:SkinnableContainer>

</s:HGroup>
