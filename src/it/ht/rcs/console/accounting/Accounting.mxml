<?xml version="1.0" encoding="utf-8"?>
<s:Panel xmlns:fx="http://ns.adobe.com/mxml/2009" 
         xmlns:s="library://ns.adobe.com/flex/spark" 
         xmlns:mx="library://ns.adobe.com/flex/mx"
         title="ACCOUNTING" width="100%" height="100%"
         addedToStage="added()"
         removedFromStage="removed()"
         creationComplete="init()">
  <fx:Script>
    <![CDATA[
      import it.ht.rcs.console.events.EditEvent;
      import it.ht.rcs.console.utils.TimeUtils;
      
      import mx.collections.ArrayCollection;
      import mx.controls.Alert;
      import mx.events.CloseEvent;
      import mx.managers.PopUpManager;
      
      private function init():void
      {
        /* this event is fired by the itemrenderer in the user list (when editing, doubleclick) */
        addEventListener(EditEvent.USER, onEditUser);
      }
      
      private function added():void
      {
        UserManager.instance.start();
        GroupManager.instance.start();
      }
      
      private function removed():void
      {
        UserManager.instance.stop(); 
        GroupManager.instance.stop();
      }
      
      private function formatdate(item:Object, column:DataGridColumn):String
      {
        return TimeUtils.timestampFormatter(item[column.dataField]);
      }
      
      private function deleteUser(user:User):void
      {
        if (user == null)
          return;
          
        Alert.show(resourceManager.getString('localized_main', 'CONFIRM_USER_DELETION') + ' ' + user.username + ' ?', resourceManager.getString('localized_main', 'CONFIRM'), Alert.YES|Alert.NO, null,
          function(e:CloseEvent):void {
            if (e.detail == Alert.YES) 
              UserManager.instance.removeUser(user);
          }, null, Alert.NO);
      }
      
      private function addUser():void
      {
        /* create the new user */
        var new_user:User = UserManager.instance.newUser();
        
        /* select the last item (the newly created one) */
        var index:Vector.<int> = new Vector.<int>(1);
        index[0] = UserManager.instance.users.length - 1;
        userslist.selectedIndices = index;
        
        /* edit the new user */
        editUser(new_user);
      }
      
      private function onEditUser(e:EditEvent):void
      {
        editUser(e.user);
      }
      
      private function editUser(u:User):void
      {
        var eu:UserEdit = PopUpManager.createPopUp(root, UserEdit, true) as UserEdit;
        eu.user = u;
        PopUpManager.centerPopUp(eu);
      }
      
      
      private function deleteGroup(group:Group):void
      {
        if (group == null)
          return;
        
        Alert.show(resourceManager.getString('localized_main', 'CONFIRM_GROUP_DELETION') + ' ' + group.name + ' ?', resourceManager.getString('localized_main', 'CONFIRM'), Alert.YES|Alert.NO, null,
          function(e:CloseEvent):void {
            if (e.detail == Alert.YES) 
              GroupManager.instance.removeGroup(group);
          }, null, Alert.NO);
      }
      
      private function addGroup():void
      {
        /* create the new group */
        var new_group:Group = GroupManager.instance.newGroup();
        
        /* select the last item (the newly created one) */
        var index:Vector.<int> = new Vector.<int>(1);
        index[0] = GroupManager.instance.groups.length - 1;
        groupslist.selectedIndices = index;
      }
      
      private function onSelectGroup():void
      {
        if (groupslist.selectedItem != null) {
          //groupcontainer.addElement(rightpanels);
          rightpanels.visible = true;
        } else {
          //groupcontainer.removeElement(rightpanels);
          rightpanels.visible = false;
        }
      }
      
    ]]>
  </fx:Script>
  
  <fx:Metadata>
    [ResourceBundle("localized_main")] 
  </fx:Metadata>

  <mx:TabNavigator left="5" top="5" right="5" bottom="5" backgroundColor="#FFFFFF">
    
    <s:NavigatorContent label="{resourceManager.getString('localized_main', 'USERS')}" width="100%" height="100%" >
      <s:HGroup id="horizontalgroup" bottom="10" top="0" right="10" left="10">
        
        <!-- USERS -->
        <s:SkinnableContainer width="100%" height="100%">
          <s:Label text="{resourceManager.getString('localized_main', 'USERS')}" horizontalCenter="0" top="5" paddingRight="0" styleName="AccountingTitles"/>
          <s:BorderContainer id="userlistshadow" borderVisible="true" dropShadowVisible="true" right="0" left="0" top="30" bottom="0" backgroundColor="#EAEAEA">
            <s:List id="userslist" left="5" bottom="20" right="5" top="5" borderVisible="false" dataProvider="{UserManager.instance.users}" itemRenderer="it.ht.rcs.console.accounting.UserRenderer" contentBackgroundColor="#EAEAEA">
              <s:layout>
                <s:TileLayout horizontalGap="10" verticalGap="10" />
              </s:layout>
            </s:List>
            <!-- the current user cannot delete himself -->
            <s:Button label="-" width="30" height="20" right="31" bottom="1" styleName="AddRemove" 
                      enabled="{userslist.selectedItem != null &amp;&amp; (userslist.selectedItem as User).id != console.currentSession.user.id}" 
                      click="deleteUser(userslist.selectedItem as User)" 
                      toolTip="{resourceManager.getString('localized_main', 'USER_DELETE')}"/>
            <s:Button label="+" width="30" height="20" right="1" bottom="1" styleName="AddRemove" 
                      click="addUser()" 
                      toolTip="{resourceManager.getString('localized_main', 'USER_ADD')}"/>
          </s:BorderContainer>
        </s:SkinnableContainer>
        
        <!-- CONNECTED USERS -->
        <s:SkinnableContainer width="100%" height="100%">
          <s:Label text="{resourceManager.getString('localized_main', 'USERS_CONNECTED')}" horizontalCenter="0" top="5" styleName="AccountingTitles"/>
          <s:BorderContainer id="activeuserlistshadow" borderVisible="false" dropShadowVisible="true" right="0" left="0" top="30" bottom="0">
            <mx:DataGrid id="activeusersgrid" left="0" right="0" top="0" bottom="0" editable="false" dataProvider="{UserManager.instance.connected_users}">
              <mx:columns>
                <mx:DataGridColumn headerText="User" dataField="user" minWidth="200"/>
                <mx:DataGridColumn headerText="Privileges" dataField="privs" width="70" resizable="false"/>
                <mx:DataGridColumn headerText="Address" dataField="address"/>
                <mx:DataGridColumn headerText="Logon Time" dataField="logon" labelFunction="formatdate" width="130" resizable="false"/>
                <mx:DataGridColumn headerText="" sortable="false" resizable="false" width="35">
                  <mx:itemRenderer>
                    <fx:Component>
                      <s:MXItemRenderer>
                        <s:Button skinClass="spark.skins.spark.TitleWindowCloseButtonSkin" height="15" width="15" toolTip="{resourceManager.getString('localized_main', 'DISCONNECT_USER')}" horizontalCenter="0" click="{UserManager.instance.disconnectUser(data)}" />                          
                      </s:MXItemRenderer>
                    </fx:Component>
                  </mx:itemRenderer>
                </mx:DataGridColumn>
              </mx:columns>
            </mx:DataGrid>
          </s:BorderContainer>
        </s:SkinnableContainer>
        
      </s:HGroup>
    </s:NavigatorContent>
    
    <s:NavigatorContent label="{resourceManager.getString('localized_main', 'GROUPS')}" width="100%" height="100%">
      <s:HGroup id="groupcontainer" top="0" right="10" bottom="10" left="10">
        
        <!-- GROUPS -->
        <s:SkinnableContainer width="100%" height="100%">
          <s:Label text="{resourceManager.getString('localized_main', 'GROUPS')}" horizontalCenter="0" top="5" styleName="AccountingTitles"/>
          <s:BorderContainer top="30" right="0" bottom="0" left="0" dropShadowVisible="true" backgroundColor="#EAEAEA">
            <s:List id="groupslist" left="5" bottom="20" right="5" top="5" borderVisible="false" contentBackgroundColor="#EAEAEA" 
                    dataProvider="{GroupManager.instance.groups}" 
                    itemRenderer="it.ht.rcs.console.accounting.GroupRenderer" change="onSelectGroup()">
              <s:layout>
                <s:TileLayout horizontalGap="10" verticalGap="10" />
              </s:layout>
            </s:List>
            <s:Button label="-" width="30" height="20" right="31" bottom="1" styleName="AddRemove" 
                      enabled="{groupslist.selectedItem != null}" 
                      click="deleteGroup(groupslist.selectedItem as Group)" 
                      toolTip="{resourceManager.getString('localized_main', 'GROUP_DELETE')}"/>
            <s:Button label="+" width="30" height="20" right="1" bottom="1" styleName="AddRemove" 
                      click="addGroup()"
                      toolTip="{resourceManager.getString('localized_main', 'GROUP_ADD')}"/>
          </s:BorderContainer>
        </s:SkinnableContainer>
        
        <!-- USERS & ACTIVITIES IN GROUP -->
        <s:SkinnableContainer id="rightpanels" width="30%" height="100%" visible="true">
          <s:BorderContainer top="30" right="0" left="0" bottom="0" borderVisible="false">
            <s:VGroup left="0" top="0" right="0" bottom="0" horizontalAlign="right">
              <s:Label text="Users in this group" styleName="AccountingTitles"/>
              <s:BorderContainer width="100%" height="50%" dropShadowVisible="true" backgroundColor="#EAEAEA">
                <s:List left="5" right="5" top="5" bottom="20" borderVisible="false" contentBackgroundColor="#EAEAEA" 
                        labelField="username" 
                        dataProvider="{UserManager.instance.usersFromIds((groupslist.selectedItem as Group).users)}"/>
                <s:Button label="-" width="30" height="20" right="31" bottom="1" styleName="AddRemove"/>
              </s:BorderContainer>
              <mx:Spacer height="5"/>
              <s:Label text="Activities associated to this group" styleName="AccountingTitles"/>
              <s:BorderContainer width="100%" height="50%" dropShadowVisible="true" backgroundColor="#EAEAEA">
              </s:BorderContainer>
            </s:VGroup>
          </s:BorderContainer>
        </s:SkinnableContainer>
      
      </s:HGroup>
    </s:NavigatorContent>
  
  </mx:TabNavigator>
</s:Panel>
