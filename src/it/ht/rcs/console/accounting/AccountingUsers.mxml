<?xml version="1.0" encoding="utf-8"?>
<s:HGroup xmlns:fx="http://ns.adobe.com/mxml/2009" 
          xmlns:s="library://ns.adobe.com/flex/spark" 
          xmlns:mx="library://ns.adobe.com/flex/mx"
          bottom="10" top="0" right="10" left="10"
          creationComplete="init()">
  <fx:Script>
    <![CDATA[
      import it.ht.rcs.console.events.EditEvent;
      import it.ht.rcs.console.utils.TimeUtils;
      
      import mx.collections.ArrayCollection;
      import mx.controls.Alert;
      import mx.events.CloseEvent;
      import mx.managers.PopUpManager;
      
      private function init():void
      {
        /* this event is fired by the itemrenderer in the user list (when editing, doubleclick) */
        addEventListener(EditEvent.USER, onEditUser);
      }
      
      private function formatdate(item:Object, column:DataGridColumn):String
      {
        return TimeUtils.timestampFormatter(item[column.dataField]);
      }
      
      private function deleteUser(user:User):void
      {
        if (user == null)
          return;
        
        Alert.show(resourceManager.getString('localized_main', 'CONFIRM_USER_DELETION') + ' ' + user.username + ' ?', resourceManager.getString('localized_main', 'CONFIRM'), Alert.YES|Alert.NO, null,
          function(e:CloseEvent):void {
            if (e.detail == Alert.YES) 
              UserManager.instance.removeUser(user);
          }, null, Alert.NO);
      }
      
      private function addUser():void
      {
        /* create the new user */
        var new_user:User = UserManager.instance.newUser();
        
        /* select the item (the newly created one) */
        selectUser(new_user);
        
        /* edit the new user */
        editUser(new_user);
      }
      
      private function selectUser(u:User):void
      {
        var index:Vector.<int> = new Vector.<int>(1);
        index[0] = UserManager.instance.users.getItemIndex(u);
        userslist.selectedIndices = index;
      }
      
      private function onEditUser(e:EditEvent):void
      {
        editUser(e.user);
      }
      
      private function editUser(u:User):void
      {
        var eu:UserEdit = PopUpManager.createPopUp(root, UserEdit, true) as UserEdit;
        eu.user = u;
        /* keep the user selected even if it changes position (due to alphabetical sorting) */
        eu.callback = function select():void {
          selectUser(u);
        };
        PopUpManager.centerPopUp(eu);
      }
    ]]>
  </fx:Script>
  
  <fx:Metadata>
    [ResourceBundle("localized_main")] 
  </fx:Metadata>
  
  <!-- USERS -->
  <s:SkinnableContainer width="100%" height="100%">
    <s:Label text="{resourceManager.getString('localized_main', 'USERS')}" horizontalCenter="0" top="5" paddingRight="0" styleName="AccountingTitles"/>
    <s:BorderContainer id="userlistshadow" borderVisible="true" dropShadowVisible="true" right="0" left="0" top="30" bottom="0" backgroundColor="#EAEAEA">
      <s:List id="userslist" left="5" bottom="20" right="5" top="5" borderVisible="false" dataProvider="{UserManager.instance.users}" itemRenderer="it.ht.rcs.console.accounting.UserRenderer" contentBackgroundColor="#EAEAEA">
        <s:layout>
          <s:TileLayout horizontalGap="10" verticalGap="10" />
        </s:layout>
      </s:List>
      <!-- the current user cannot delete himself -->
      <s:Button label="-" width="30" height="20" right="31" bottom="1" styleName="AddRemove" 
                enabled="{userslist.selectedItem != null &amp;&amp; (userslist.selectedItem as User).id != console.currentSession.user.id}" 
                click="deleteUser(userslist.selectedItem as User)" 
                toolTip="{resourceManager.getString('localized_main', 'USER_DELETE')}"/>
      <s:Button label="+" width="30" height="20" right="1" bottom="1" styleName="AddRemove" 
                click="addUser()" 
                toolTip="{resourceManager.getString('localized_main', 'USER_ADD')}"/>
    </s:BorderContainer>
  </s:SkinnableContainer>
  
  <!-- CONNECTED USERS -->
  <s:SkinnableContainer width="100%" height="100%">
    <s:Label text="{resourceManager.getString('localized_main', 'USERS_CONNECTED')}" horizontalCenter="0" top="5" styleName="AccountingTitles"/>
    <s:BorderContainer id="activeuserlistshadow" borderVisible="false" dropShadowVisible="true" right="0" left="0" top="30" bottom="0">
      <mx:DataGrid id="activeusersgrid" left="0" right="0" top="0" bottom="0" editable="false" dataProvider="{UserManager.instance.connected_users}">
        <mx:columns>
          <mx:DataGridColumn headerText="User" dataField="user" minWidth="200"/>
          <mx:DataGridColumn headerText="Privileges" dataField="privs" width="70" resizable="false"/>
          <mx:DataGridColumn headerText="Address" dataField="address"/>
          <mx:DataGridColumn headerText="Logon Time" dataField="logon" labelFunction="formatdate" width="130" resizable="false"/>
          <mx:DataGridColumn headerText="" sortable="false" resizable="false" width="35">
            <mx:itemRenderer>
              <fx:Component>
                <s:MXItemRenderer>
                  <s:Button skinClass="spark.skins.spark.TitleWindowCloseButtonSkin" height="15" width="15" toolTip="{resourceManager.getString('localized_main', 'DISCONNECT_USER')}" horizontalCenter="0" click="{UserManager.instance.disconnectUser(data)}" />                          
                </s:MXItemRenderer>
              </fx:Component>
            </mx:itemRenderer>
          </mx:DataGridColumn>
        </mx:columns>
      </mx:DataGrid>
    </s:BorderContainer>
  </s:SkinnableContainer>
  
</s:HGroup>
