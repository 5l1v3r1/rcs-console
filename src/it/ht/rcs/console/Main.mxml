<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
         xmlns:s="library://ns.adobe.com/flex/spark" 
         xmlns:mx="library://ns.adobe.com/flex/mx"
         xmlns:main="it.ht.rcs.console.*"
         xmlns:accounting="it.ht.rcs.console.accounting.view.*"
         xmlns:alerting="it.ht.rcs.console.alerting.view.*"
         xmlns:audit="it.ht.rcs.console.audit.view.*" 
         xmlns:operations="it.ht.rcs.console.operations.*"
         xmlns:correlation="it.ht.rcs.console.correlation.*"
         xmlns:dashboard="it.ht.rcs.console.dashboard.view.*"
         xmlns:monitor="it.ht.rcs.console.monitor.view.*"
         xmlns:network="it.ht.rcs.console.network.view.*" 
         width="100%" height="100%" 
         addedToStage="added()"
         removedFromStage="removed()">
  
  <fx:Script>
    <![CDATA[
      import it.ht.rcs.console.alert.controller.AlertController;
      import it.ht.rcs.console.events.SectionEvent;
      import it.ht.rcs.console.monitor.controller.LicenseManager;
      import it.ht.rcs.console.monitor.controller.MonitorManager;
      
      import mx.core.FlexGlobals;
      import mx.events.ItemClickEvent;
      
      [Bindable]
      private var main_sections:Array;
      
      private function mainButtonClickHandler(event:ItemClickEvent):void 
      {
        trace("SECTION: " + event.label.toUpperCase());
        /* dispatch the event for all */
        FlexGlobals.topLevelApplication.dispatchEvent(new SectionEvent(event.label.toLowerCase()));
        /* change the state to the current section */
        currentState = event.label;
      }
    
      private function added():void 
      {
        trace("Entering main section...")  
        
        /* different view based on privileges */
        main_sections = new Array();
        if (console.currentSession.user.is_admin()) main_sections.push('Accounting');
        if (console.currentSession.user.is_any()) main_sections.push('Operations');
        if (console.currentSession.user.is_view()) main_sections.push('Dashboard');
        if (console.currentSession.user.is_view()) main_sections.push('Alerting');
        //if (console.currentSession.user.is_viewer()) main_sections.push('Correlation');
        if (console.currentSession.user.is_sys() || console.currentSession.user.is_tech()) main_sections.push('Network');
        if (console.currentSession.user.is_admin()) main_sections.push('Audit');
        if (console.currentSession.user.is_any()) main_sections.push('Monitor');
  
        /* default state is Console */
        if (console.currentSession.user.is_any())
          currentState = "Operations";
        else
          currentState = "Nothing";
  
        /* initialize the monitor counter */
        if (console.currentSession.user.is_any()) {
          MonitorManager.instance.start_counters();
        }

        /* initialize the alert counter */
        if (console.currentSession.user.is_view()) {
          AlertController.instance.start_counters();
        }
        
  //      /* initialize the download manager */
  //      if (console.currentSession.user.is_any()) {
  //        console.downloadManagerWindow = PopUpManager.createPopUp(root, DownloadManagerWindow, false) as DownloadManagerWindow;
  //        //DownloadManager.instance.start_counters();
  //      }
  
        /* retrieve the current license limits */
        LicenseManager.instance.start();
      }
      
      private function removed():void 
      {
        trace("Exiting main section...")
  
        /* remove the monitor and alert counter */
        MonitorManager.instance.stop_counters();
        AlertController.instance.stop_counters();
      }
    ]]>
  </fx:Script>
  
  <fx:Declarations>
  </fx:Declarations>

  <s:states>
    <s:State name="Nothing"/>
    <s:State name="Accounting"/>
    <s:State name="Operations"/>
    <s:State name="Dashboard"/>
    <s:State name="Correlation"/>
    <s:State name="Network"/>
    <s:State name="Alerting"/>
    <s:State name="Audit"/>
    <s:State name="Monitor"/>
  </s:states>

  <!-- title bar (the banner) -->
  <main:TitleBar id="titleBar"/>
  
  <!-- tool bar on top -->
  <main:ButtonBar id="mainButtonBar" top="50" left="10" />
  <mx:ToggleButtonBar id="sectionsButtonBar" top="50" right="10" height="20" horizontalGap="10" buttonWidth="80" itemClick="mainButtonClickHandler(event);" dataProvider="{main_sections}" selectedIndex="{main_sections.indexOf(currentState)}"/>
  
  <!-- all the sections -->
  <accounting:AccountingSection includeIn="Accounting" height="100%" top="75" left="0" right="0" bottom="0"/>
  
  <operations:OperationsSection includeIn="Operations" height="100%" top="75" left="0" right="0" bottom="0"/>

  <dashboard:DashboardSection includeIn="Dashboard" height="100%" top="75" left="0" right="0" bottom="0"/>

  <correlation:CorrelationSection includeIn="Correlation" height="100%" top="75" left="0" right="0" bottom="0"/>
  
  <network:NetworkSection includeIn="Network" height="100%" top="75" left="0" right="0" bottom="0"/>
  
  <alerting:AlertingSection includeIn="Alerting" height="100%" top="75" left="0" right="0" bottom="0"/>
  
  <audit:AuditSection includeIn="Audit" height="100%" top="75" left="0" right="0" bottom="0"/>
  
  <monitor:MonitorSection includeIn="Monitor" height="100%" top="75" left="0" right="0" bottom="0"/>
  
  <!-- special case if the user has no privilege -->
  <s:Panel includeIn="Nothing" title="NOTHING TO DO" height="100%" top="75" left="0" right="0" bottom="0">
    <s:TextArea horizontalCenter="0" verticalCenter="0" editable="false" enabled="true" text="{resourceManager.getString('localized_main', 'NOTHING_TO_DO_MESSAGE')}" width="700" height="150" fontSize="20" fontFamily="Verdana" verticalAlign="top" textAlign="justify" borderVisible="false" contentBackgroundColor="#EAEAEA"/>
  </s:Panel>
    
</s:Group>
