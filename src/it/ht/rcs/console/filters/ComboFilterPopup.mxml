<?xml version="1.0" encoding="utf-8"?>
<filters:AbstractFilterPopup xmlns:fx="http://ns.adobe.com/mxml/2009"
                             xmlns:s="library://ns.adobe.com/flex/spark"
                             xmlns:mx="library://ns.adobe.com/flex/mx"
                             xmlns:xt="library://ns.tink.ws/flex/mx"
                             xmlns:filters="it.ht.rcs.console.filters.*"
                             xmlns:utils="it.ht.rcs.console.utils.*"
                             show="show()">

  <xt:FilterComboBox id="combo" width="150" enter="commit()" matchedTextStyleName="matched" prompt="{PROMPT}"
                     styleName="auditFilter"/>
  
  <fx:Script>
    <![CDATA[
      import com.adobe.utils.StringUtil;
      
      import it.ht.rcs.console.events.FilterEvent;
      
      import mx.core.FlexGlobals;
      
      public static const PROMPT:String = 'Type';

      override public function commit(fireEvent:Boolean=true):void
      {
        var values:Array = getValues();
        hasFilter = values.length > 0;
        hasFilter ? filter[property] = values : delete(filter[property]);
        visible = false;
        if (fireEvent)
          FlexGlobals.topLevelApplication.dispatchEvent(new FilterEvent(FilterEvent.FILTER_CHANGED));
      }
      
      override public function reset(fireEvent:Boolean=true):void
      {
        combo.text = '';
        commit(fireEvent);
      }
      
      override public function set filterValues(filterValues:Object):void
      {
        combo.dataProvider = filterValues;
        combo.selectedItem = filter[property];
      }
      
      private function getValues():Array
      {
        
        combo.text = StringUtil.trim(combo.text);
        combo.prompt = combo.text;
        
        if (combo.text == '' || combo.text == PROMPT)
          return [];
        
        if (combo.text.indexOf(',') != -1)
          return combo.text.split(',');
        
        if (combo.dropdown.selectedItems.length == 1)
          return [combo.dropdown.selectedItem];
        
        if (combo.filteredCollection.length > 0) {
          var values:Array = [];
          for each (var item:String in combo.filteredCollection)
            values.push(item);
          return values;
        }
        
        return [];
        
      }
      
      protected function show():void
      {
        combo.setFocus();
        combo.selectedItem = filter[property];
      }
      
    ]]>
  </fx:Script>
  
</filters:AbstractFilterPopup>