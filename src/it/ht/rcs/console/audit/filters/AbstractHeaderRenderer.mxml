<?xml version="1.0" encoding="utf-8"?>
<s:DefaultGridHeaderRenderer xmlns:fx="http://ns.adobe.com/mxml/2009"
                             xmlns:s="library://ns.adobe.com/flex/spark"
                             xmlns:mx="library://ns.adobe.com/flex/mx"
                             click="clickHandler(event)"
                             addedToStage="init()" removedFromStage="destroy()">
  
  <fx:Script>
    <![CDATA[
      import mx.managers.PopUpManager;
      
      import spark.components.CheckBox;
      import spark.layouts.HorizontalLayout;
      import spark.layouts.VerticalAlign;
      
      [Bindable]
      public var popup:AbstractFilterPopup;
      public static var _currentPopup:AbstractFilterPopup;
      public var popupFactory:IFactory;
      
      [Bindable]
      public var mandatory:Boolean = false;
      
      [Bindable]
      public var filter:Object;
      
      [Bindable]
      public var selectableFilters:Object;
      
      private function init():void {
        popup = popupFactory.newInstance();
        popup.property = column.dataField;
        popup.filter = filter;
        popup.selectableFilters = selectableFilters[popup.property];
        PopUpManager.addPopUp(popup, this.owner, false);
        if (mandatory) showFilter.selected = true;
      }
      
      private function destroy():void {
        PopUpManager.removePopUp(popup);
      }
      
      override public function prepare(hasBeenRecycled:Boolean):void {
        super.prepare(hasBeenRecycled);
        labelDisplayGroup.addElementAt(showFilter, 0);
        var layout:HorizontalLayout = new HorizontalLayout();
        layout.verticalAlign = VerticalAlign.MIDDLE;
        layout.gap = 0;
        labelDisplayGroup.layout = layout;
      }
      
      override protected function updateDisplayList(unscaledWidth:Number, unscaledHeight:Number):void {
        super.updateDisplayList(unscaledWidth, unscaledHeight);
        if (popup && popup.visible) centerPopup();
      }
      
      private function centerPopup():void {
        var center:Point = localToGlobal(new Point(x, y));
        popup.x = center.x - x;
        popup.y = center.y + height;
        if (popup.x + popup.width > owner.width)
          popup.x = center.x - x - popup.width + width + 1;
      }
      
      private function clickHandler(event:MouseEvent):void {
        
        if (_currentPopup && _currentPopup.visible) {
          _currentPopup.visible = false;
          if (_currentPopup === popup) {
            _currentPopup = null;
            return;
          }
        }

        centerPopup();
        popup.visible = true;
        _currentPopup = popup;
        
      }
      
      private function changeHandler(event:Event):void {
        popup.resetFilter();
        popup.visible = false;
      }
      
    ]]>
  </fx:Script>

  <fx:Declarations>
    <s:CheckBox id="showFilter" change="changeHandler(event)"
                enabled="{!mandatory &amp;&amp; showFilter.selected}"
                selected="{mandatory || popup.valid}"/>
  </fx:Declarations>

</s:DefaultGridHeaderRenderer>