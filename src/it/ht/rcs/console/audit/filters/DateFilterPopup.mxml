<?xml version="1.0" encoding="utf-8"?>
<filters:AbstractFilterPopup xmlns:fx="http://ns.adobe.com/mxml/2009"
                             xmlns:s="library://ns.adobe.com/flex/spark"
                             xmlns:mx="library://ns.adobe.com/flex/mx"
                             xmlns:xt="library://ns.tink.ws/flex/mx"
                             xmlns:filters="it.ht.rcs.console.audit.filters.*"
                             creationComplete="init()" show="show()">
  
  <fx:Script>
    <![CDATA[
      import it.ht.rcs.console.events.FilterEvent;
      import it.ht.rcs.console.model.Clock;
      import it.ht.rcs.console.utils.DateUtils;
      import it.ht.rcs.console.utils.TimeUtils;
      
      import mx.core.FlexGlobals;
      import mx.events.CalendarLayoutChangeEvent;
      
      private static const DEFAULT_RANGE:int = 30;
      public var range:int = DEFAULT_RANGE;
      
      private function init():void
      {
//        if (!filter.from)
//          reset(false);
        hasFilter = true;
      }
      
      override public function commit(fireEvent:Boolean=true):void
      {
        filter.from = getFromTimestamp();
        filter.to = getToTimestamp();
        visible = false;
        if (fireEvent)
          FlexGlobals.topLevelApplication.dispatchEvent(new FilterEvent(FilterEvent.FILTER_CHANGED));
      }
      
      override public function reset(fireEvent:Boolean=true):void
      {
        from.selectedDate = defaultFrom();
        fromChange(null);
        commit(fireEvent);
      }
      
      private function fromChange(event:CalendarLayoutChangeEvent):void
      {
        
        var time:Number = Math.min(new Date().time,
                                   DateUtils.addDays(from.selectedDate, range).time);
        
        var date:Date = new Date(time);
        to.selectedDate = date;
        to.disabledRanges = [{rangeStart: DateUtils.addDays(date, 1)}];
        
      }
      
      protected function show():void
      {
        
        var fromDate:Date = Clock.toConsoleDate(new Date(filter.from * 1000));
        from.selectedDate = fromDate;
        fromH.value = fromDate.hours;
        fromM.value = fromDate.minutes;

        var toDate:Date = Clock.toConsoleDate(new Date(filter.to * 1000));
        to.selectedDate = toDate;
        toH.value = toDate.hours;
        toM.value = toDate.minutes;
        
      }
      
    ]]>
  </fx:Script>
  
  <s:VGroup gap="10" styleName="auditFilter">
    
    <s:HGroup verticalAlign="middle">
      <s:Label width="40" text="From"/>
      <mx:DateField id="from" width="120" change="fromChange(event)"
                    disabledRanges="{[{rangeStart: DateUtils.addDays(new Date(), 1)}]}"
                    showToday="false" yearNavigationEnabled="true" formatString="YYYY-MM-DD"/>
      <s:NumericStepper id="fromH" minimum="0" maximum="23" valueFormatFunction="pad" value="0" />
      <s:NumericStepper id="fromM" minimum="0" maximum="59" valueFormatFunction="pad" value="0" />
    </s:HGroup>
    
    <s:HGroup verticalAlign="middle">
      <s:Label width="40" text="To"/>
      <mx:DateField id="to" width="120" showToday="false" yearNavigationEnabled="true" formatString="YYYY-MM-DD"/>
      <s:NumericStepper id="toH" minimum="0" maximum="23" valueFormatFunction="pad" value="23" />
      <s:NumericStepper id="toM" minimum="0" maximum="59" valueFormatFunction="pad" value="59" />
    </s:HGroup>
    
    <s:HGroup width="100%" verticalAlign="middle">
      <s:Spacer width="100%"/>
      <s:Button label="Current" click="reset()"/>
    </s:HGroup>
    
  </s:VGroup>
  
  <fx:Script>
    <![CDATA[
      
      private function defaultFrom():Date
      {
        var from:Date = DateUtils.addDays(new Date(), -range);
        return from;
      }
      
      private function getFromTimestamp():int
      {
        from.selectedDate.hours = fromH.value;
        from.selectedDate.minutes = fromM.value;
        return Clock.toUTCTime(from.selectedDate) / 1000;
      }
      
      private function getToTimestamp():int
      {
        to.selectedDate.hours = toH.value;
        to.selectedDate.minutes = toM.value;
        return Clock.toUTCTime(to.selectedDate) / 1000;
      }
      
      private function pad(n:Number):String
      {
        return TimeUtils.zeroPad(n, 2);
      }
      
    ]]>
  </fx:Script>

</filters:AbstractFilterPopup>