<?xml version="1.0" encoding="utf-8"?>
<s:VGroup xmlns:fx="http://ns.adobe.com/mxml/2009"
          xmlns:s="library://ns.adobe.com/flex/spark"
          xmlns:mx="library://ns.adobe.com/flex/mx"
          xmlns:nia="it.ht.rcs.console.system.view.nia.*"
          left="5" right="5" top="0" bottom="5" addedToStage="onAddedToStage()">
  
  
  <s:BorderContainer width="100%" height="120" dropShadowVisible="true">
    
    <nia:NIAList id="ipas" left="5" right="5" top="5" bottom="5" width="100%" borderVisible="false"
                 dataProvider="{_proxy_view}" keyDown="enter(event)"/>
    
    <s:Button right="33" bottom="1" width="32" height="20" label="-" click="deleteProxy()"
              enabled="{ipas.selectedItem != null}" styleName="AddRemove"
              toolTip="{R.get('PROXY_DELETE')}"/>
    <s:Button right="1" bottom="1" width="32" height="20" label="+" click="addProxy()"
              styleName="AddRemove" toolTip="{R.get('PROXY_ADD')}"/>

  </s:BorderContainer>
  
  <s:HGroup>
    <s:Button width="30" height="20" label="New" click="addRule()"
              enabled="{ipas.selectedItem != null}" skinClass="it.ht.rcs.console.skins.NewButton"
              toolTip="{R.get('RULE_ADD')}"/>
    <s:Button width="30" height="20" label="Edit" click="editRule()"
              enabled="{rulesGrid.selectedItem != null}"
              skinClass="it.ht.rcs.console.skins.EditButton" toolTip="{R.get('EDIT')}"/>
    <s:Button width="30" height="20" label="Delete" enabled="{rulesGrid.selectedItem != null}" click="deleteRule()"
              skinClass="it.ht.rcs.console.skins.DeleteButton" toolTip="{R.get('DELETE')}"/>
    <s:Spacer width="15"/>
    <s:Button width="30" height="20" label="Apply" enabled="{ipas.selectedItem != null}"
              skinClass="it.ht.rcs.console.skins.ApplyButton" toolTip="{R.get('APPLY_RULES')}"/>
  </s:HGroup>
  
  <nia:RulesGrid id="rulesGrid" width="100%" height="100%" dataProvider="{ipas.selectedItem.rules}"/>
  
  
  <fx:Script>
    <![CDATA[
      import it.ht.rcs.console.network.controller.ProxyController;
      import it.ht.rcs.console.network.controller.ProxyManager;
      import it.ht.rcs.console.network.model.Proxy;
      import it.ht.rcs.console.network.model.ProxyRule;
      import it.ht.rcs.console.utils.AlertPopUp;
      
      import locale.R;
      
      import mx.collections.ListCollectionView;
      import mx.events.CloseEvent;
      import mx.managers.PopUpManager;
      
      [Bindable]
      private var _proxy_view:ListCollectionView;
      
      private function onAddedToStage():void
      {
        ProxyController.instance.start();
        _proxy_view = ProxyManager.instance.getView();
      }
      
      private function onRemovedFromStage():void
      {
        ProxyController.instance.stop();
      }
      
      private function addProxy():void
      {
        ProxyController.instance.addProxy(function onSuccess(proxy:it.ht.rcs.console.network.model.Proxy):void {
          ipas.selectedItem = proxy;
          createProxy(proxy);
        });
      }
      
      private function createProxy(proxy:it.ht.rcs.console.network.model.Proxy):void
      {
        var popup:CreateNIAForm = PopUpManager.createPopUp(this.parentDocument as DisplayObject, CreateNIAForm, true) as CreateNIAForm;
        popup.proxy = proxy;
        PopUpManager.centerPopUp(popup);
      }
      
      private function editProxy(proxy:it.ht.rcs.console.network.model.Proxy):void
      {
        var popup:EditNIAForm = PopUpManager.createPopUp(this.parentDocument as DisplayObject, EditNIAForm, true) as EditNIAForm;
        popup.proxy = proxy;
        PopUpManager.centerPopUp(popup);
      }
      
      protected function deleteProxy():void
      {
        AlertPopUp.show(R.get('CONFIRM_PROXY_DELETION', [ipas.selectedItem.name]),
                        R.get('CONFIRM'),
                        AlertPopUp.YES | AlertPopUp.NO,
                        null,
                        function(e:CloseEvent):void {
                          if (e.detail == AlertPopUp.YES) 
                            ProxyController.instance.removeItem(ipas.selectedItem);
                        },
                        null, AlertPopUp.NO);
      }
      
      protected function enter(event:KeyboardEvent):void
      {
        if (event.keyCode == Keyboard.ENTER && ipas.selectedItem != null)
          editProxy(ipas.selectedItem);
      }
      
      private function addRule():void
      {
        var popup:RuleForm = PopUpManager.createPopUp(this.parentDocument as DisplayObject, RuleForm, true) as RuleForm;
        popup.mode = 'create';
        popup.proxy = ipas.selectedItem;
        PopUpManager.centerPopUp(popup);
      }
      
      protected function editRule():void
      {
        var popup:RuleForm = PopUpManager.createPopUp(this.parentDocument as DisplayObject, RuleForm, true) as RuleForm;
        popup.mode = 'edit';
        popup.proxy = ipas.selectedItem;
        popup.rule = rulesGrid.selectedItem as ProxyRule;
        PopUpManager.centerPopUp(popup);
      }
      
      protected function deleteRule():void
      {
        AlertPopUp.show(R.get('CONFIRM_RULE_DELETION'),
          R.get('CONFIRM'),
          AlertPopUp.YES | AlertPopUp.NO,
          null,
          function(e:CloseEvent):void {
            if (e.detail == AlertPopUp.YES)
              rulesGrid.dataProvider.removeItemAt(rulesGrid.selectedIndex);
          },
          null, AlertPopUp.NO);
      }
      
    ]]>
  </fx:Script>

</s:VGroup>