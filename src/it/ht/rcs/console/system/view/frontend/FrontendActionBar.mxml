<?xml version="1.0" encoding="utf-8"?>
<actionbar:ActionBar xmlns:fx="http://ns.adobe.com/mxml/2009"
                     xmlns:s="library://ns.adobe.com/flex/spark"
                     xmlns:mx="library://ns.adobe.com/flex/mx"
                     xmlns:actionbar="it.ht.rcs.console.main.actionbar.*">
  
  
  <s:Button label="{R.get('NEW_ANONYMIZER')}" click="onNewClick()" icon="@Embed('/img/NEW/newAnonymizer.png')"/>
  
  <s:Button label="{R.get('EDIT')}" click="onEditClick()" enabled="{selectedObject != null}"
            icon="@Embed('/img/NEW/edit.png')"/>
  
  <s:Button label="{R.get('DELETE')}" click="onDeleteClick()" enabled="{selectedObject != null}"
            icon="@Embed('/img/NEW/delete_32.png')"/>
  
  <actionbar:Separator width="40"/>
  
  <s:Button label="{R.get('DOWNLOAD_INSTALLER')}" click="downloadInstaller()" enabled="{selectedObject != null}" icon="@Embed('/img/NEW/build.png')"/>
  
  <actionbar:Separator width="40"/>
  
  <s:Button label="{R.get('HEALTH_CHECK')}" click="healthCheck()" icon="@Embed('/img/NEW/check.png')"/>
  <s:Button label="{R.get('APPLY_TOPOLOGY')}" click="applyTopology()" icon="@Embed('/img/NEW/confirm.png')"/>
  

  <fx:Script>
    <![CDATA[
      import it.ht.rcs.console.network.controller.CollectorManager;
      import it.ht.rcs.console.network.model.Collector;
      import it.ht.rcs.console.system.view.frontend.graph.renderers.CollectorRenderer;
      import it.ht.rcs.console.system.view.frontend.healthCheck.HealthCheckWindow;
      import it.ht.rcs.console.task.controller.DownloadManager;
      import it.ht.rcs.console.utils.AlertPopUp;
      
      import locale.R;
      
      import mx.collections.ArrayCollection;
      import mx.events.CloseEvent;
      import mx.managers.PopUpManager;
      
      private function onNewClick():void
      {
        var popup:CreateCollectorForm = PopUpManager.createPopUp(this.parentDocument as DisplayObject, CreateCollectorForm, true) as CreateCollectorForm;
        PopUpManager.centerPopUp(popup);      
      }
      
      private function onEditClick():void
      {
        var popup:EditCollectorForm = PopUpManager.createPopUp(this.parentDocument as DisplayObject, EditCollectorForm, true) as EditCollectorForm;
        popup.collector = selectedObject as Collector;
        PopUpManager.centerPopUp(popup);
      }
      
      private function onDeleteClick():void
      {
        AlertPopUp.show(R.get('CONFIRM_COLLECTOR_DELETION', [selectedObject.name]),
          R.get('CONFIRM'),
          AlertPopUp.YES | AlertPopUp.NO,
          null,
          function(e:CloseEvent):void {
            if (e.detail == AlertPopUp.YES) 
              CollectorManager.instance.removeItem(selectedObject);
              (parent as Frontend).buildGraph();
            },
          null, AlertPopUp.NO);
      }

      private function healthCheck():void
      {
        var nodes:ArrayCollection = new ArrayCollection();
        for each (var c:CollectorRenderer in (parent as Frontend).graph.db.collectors) {
          while (c.nextHop != null)
            c = c.nextHop;
          nodes.addItem({ ip: c.collector.address, name: c.collector.name });
        }
        
        var popup:HealthCheckWindow = PopUpManager.createPopUp(this.parentDocument as DisplayObject, HealthCheckWindow, true) as HealthCheckWindow;
        popup.nodes = nodes;
        PopUpManager.centerPopUp(popup);
      }
      
      private function applyTopology():void
      {
        DownloadManager.instance.createTask("topology", null, {}); 
      }
      
      private function downloadInstaller():void
      {
        var params:Object = {platform: 'anon', binary: {demo: false}, melt: {admin: false, port: (selectedObject as Collector).port} }
        var filename:String = 'anon_installer.zip'
        DownloadManager.instance.createTask("build", filename, params, null, null);
      }
      
    ]]>
  </fx:Script>

</actionbar:ActionBar>