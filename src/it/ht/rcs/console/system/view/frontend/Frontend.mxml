<?xml version="1.0" encoding="utf-8"?>
<s:VGroup xmlns:fx="http://ns.adobe.com/mxml/2009"
          xmlns:s="library://ns.adobe.com/flex/spark"
          xmlns:mx="library://ns.adobe.com/flex/mx"
          xmlns:frontend="it.ht.rcs.console.system.view.frontend.*"
          xmlns:graph="it.ht.rcs.console.system.view.frontend.graph.*"
          width="100%" height="100%" addedToStage="onAddedToStage(event)" creationComplete="init()"
          removedFromStage="onRemovedFromStage(event)">
  
  <fx:Script>
    <![CDATA[
      import it.ht.rcs.console.events.DataLoadedEvent;
      import it.ht.rcs.console.network.controller.CollectorManager;
      import it.ht.rcs.console.network.model.Collector;
      import it.ht.rcs.console.system.view.frontend.graph.renderers.CollectorRenderer;
      import it.ht.rcs.console.system.view.frontend.graph.renderers.DBRenderer;
      
      import mx.collections.ListCollectionView;
      import mx.managers.PopUpManager;
      
      import spark.events.IndexChangeEvent;
      
      [Bindable]
      private var _collector_view:ListCollectionView;
      
      [Bindable]
      private var anonymizers:ListCollectionView;
      
      private function init():void
      {
        _collector_view = CollectorManager.instance.getView();
        anonymizers = CollectorManager.instance.getView(null, anonymizerFilterFunction);
        buildGraph();
      }
      
      private function onAddedToStage(event:Event):void
      {
        CollectorManager.instance.addEventListener(DataLoadedEvent.DATA_LOADED, onDataLoaded);
        CollectorManager.instance.listenRefresh();
      }
      
      private function onRemovedFromStage(event:Event):void
      {
        CollectorManager.instance.removeEventListener(DataLoadedEvent.DATA_LOADED, onDataLoaded);
        CollectorManager.instance.unlistenRefresh();
      }
      
      private function onDataLoaded(event:DataLoadedEvent):void {
        if (_collector_view == null)
          _collector_view = CollectorManager.instance.getView();
        buildGraph();
      }
      
      private function anonymizerFilterFunction(item:Object):Boolean
      {
        return item.type == 'remote' && item.prev[0] == null && item.next[0] == null;
      }
      
      public function buildGraph():void
      {
        var nodes:Vector.<CollectorRenderer> = new Vector.<CollectorRenderer>();
        for each (var el:Collector in _collector_view) {
          var cr:CollectorRenderer = new CollectorRenderer(el, graph);
          nodes.push(cr);
        }
        
        var collectors:Vector.<CollectorRenderer> = new Vector.<CollectorRenderer>();
        for each (var node:CollectorRenderer in nodes) {
          if (node.collector.type == 'local')
            collectors.push(node);
          var nextHop:CollectorRenderer = node.collector.next ? getRendererById(node.collector.next[0], nodes) : null;
          node.nextHop = nextHop;
        }
        
        var db:DBRenderer = new DBRenderer();
        db.collectors = collectors;
        graph.db = db;
        graph.rebuildGraph();
      }
      
      private function getRendererById(_id:String, list:Vector.<CollectorRenderer>):CollectorRenderer
      {
        if (_id != null)
        {
          for each (var cr:CollectorRenderer in list)
            if (cr.collector._id == _id)
              return cr;
        }
        return null;
      }
      

      private function editCollector(collector:Collector):void
      {
        var popup:EditCollectorForm = PopUpManager.createPopUp(this.parentDocument as DisplayObject, EditCollectorForm, true) as EditCollectorForm;
        popup.collector = collector;
        PopUpManager.centerPopUp(popup);
      }
      
      
      private function getCollectorById(id:String):Collector
      {
        return null;
      }
      
      private function enter(event:KeyboardEvent):void
      {
        if (event.keyCode == Keyboard.ENTER && list.selectedItem != null)
          editCollector(list.selectedItem);
      }
    ]]>
  </fx:Script>
  
  <frontend:FrontendActionBar selectedObject="{list.selectedItem}"/>
  
  <s:BorderContainer width="100%" height="100%" borderColor="#dddddd" borderVisible="true"
                     borderWeight="2" cornerRadius="10">
    
    <s:Rect width="100%" height="100%" radiusX="10" radiusY="10">
      <s:fill>
        <s:LinearGradient rotation="90">
          <s:GradientEntry color="#eeeeee"/>
          <s:GradientEntry color="#ffffff"/>
          <s:GradientEntry color="#ffffff"/>
        </s:LinearGradient>
      </s:fill>
    </s:Rect>
    
    <s:VGroup width="100%" height="100%" gap="0">
      
      <frontend:CollectorList id="list" contentBackgroundAlpha="0" dataProvider="{anonymizers}"
                              keyDown="enter(event)"/>
      
      <frontend:Separator/>
      
      <s:Scroller id="scroller" width="100%" height="100%">
        <graph:FrontendGraph id="graph"/>
      </s:Scroller>
      
    </s:VGroup>
    
  </s:BorderContainer>
  
</s:VGroup>