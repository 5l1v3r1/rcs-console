<?xml version="1.0" encoding="utf-8"?>
<actionbar:ActionBar xmlns:fx="http://ns.adobe.com/mxml/2009"
                     xmlns:s="library://ns.adobe.com/flex/spark"
                     xmlns:mx="library://ns.adobe.com/flex/mx"
                     xmlns:actionbar="it.ht.rcs.console.main.actionbar.*">
  
  
  <s:Button label="{R.get('NEW_INJECTOR')}" click="onNewClick()"
            icon="@Embed('/img/NEW/newInjector.png')"/>
  
  <s:Button label="{R.get('EDIT')}" click="onEditClick()" enabled="{selectedObject != null}"
            icon="@Embed('/img/NEW/edit.png')"/>
  
  <s:Button label="{R.get('DELETE')}" click="onDeleteClick()" enabled="{selectedObject != null}"
            icon="@Embed('/img/NEW/delete_32.png')"/>
  
  <!--
  <s:HGroup width="100%">
    <s:Spacer width="3"/>
    <s:Button x="0" y="0" width="30" height="20" label="N" click="addJob()"
              skinClass="it.ht.rcs.console.skins.NewButton"
              toolTip="{resourceManager.getString('localized_main', 'NEW')}"/>
    <s:Button x="40" y="0" width="30" height="20" label="E"
              click="editJob(backupjobs.selectedItem as BackupJob)"
              enabled="{backupjobs.selectedItem != null}"
              skinClass="it.ht.rcs.console.skins.EditButton" toolTip="{R.get('EDIT')}"/>
    <s:Button x="80" y="0" width="30" height="20" label="D"
              click="deleteJob(backupjobs.selectedItem as BackupJob)"
              enabled="{backupjobs.selectedItem != null}"
              skinClass="it.ht.rcs.console.skins.DeleteButton" toolTip="{R.get('DELETE')}"/>
    <s:Button x="120" y="0" width="30" height="20" label="R"
              click="runJob(backupjobs.selectedItem as BackupJob)"
              enabled="{backupjobs.selectedItem != null}"
              skinClass="it.ht.rcs.console.skins.RunButton" toolTip="{R.get('RUN_NOW')}"/>
  </s:HGroup>
-->
  <fx:Script>
    <![CDATA[
      import it.ht.rcs.console.network.model.Collector;
      
      import locale.R;
      
      
      
//      private function addProxy():void
//      {
//        InjectorController.instance.addProxy(function onSuccess(injector:it.ht.rcs.console.network.model.Injector):void {
//          nias.selectedItem = injector;
//          createProxy(injector);
//        });
//      }
//      
//      private function createProxy(injector:it.ht.rcs.console.network.model.Injector):void
//      {
//        var popup:CreateNIAForm = PopUpManager.createPopUp(this.parentDocument as DisplayObject, CreateNIAForm, true) as CreateNIAForm;
//        popup.injector = injector;
//        PopUpManager.centerPopUp(popup);
//      }
//      
//      private function editProxy(proxy:it.ht.rcs.console.network.model.Injector):void
//      {
//        var popup:EditNIAForm = PopUpManager.createPopUp(this.parentDocument as DisplayObject, EditNIAForm, true) as EditNIAForm;
//        popup.injector = proxy;
//        PopUpManager.centerPopUp(popup);
//      }
//      
//      protected function deleteProxy():void
//      {
//        AlertPopUp.show(R.get('CONFIRM_PROXY_DELETION', [nias.selectedItem.name]),
//          R.get('CONFIRM'),
//          AlertPopUp.YES | AlertPopUp.NO,
//          null,
//          function(e:CloseEvent):void {
//            if (e.detail == AlertPopUp.YES) 
//              InjectorController.instance.removeItem(nias.selectedItem);
//          },
//          null, AlertPopUp.NO);
//      }
      
      private function onNewClick():void
      {
//        CollectorManager.instance.addCollector(function onSuccess(collector:Collector):void {
//          (parent as Frontend).list.selectedItem = collector;
//          createCollector(collector);
//        });
      }
      
      private function createCollector(collector:Collector):void
      {
//        var popup:CreateCollectorForm = PopUpManager.createPopUp(this.parentDocument as DisplayObject, CreateCollectorForm, true) as CreateCollectorForm;
//        popup.collector = collector;
//        PopUpManager.centerPopUp(popup);
      }
      
      private function onEditClick():void
      {
//        var popup:EditCollectorForm = PopUpManager.createPopUp(this.parentDocument as DisplayObject, EditCollectorForm, true) as EditCollectorForm;
//        popup.collector = selectedObject as Collector;
//        PopUpManager.centerPopUp(popup);
      }
      
      private function onDeleteClick():void
      {
//        AlertPopUp.show(R.get('CONFIRM_COLLECTOR_DELETION', [selectedObject.name]),
//          R.get('CONFIRM'),
//          AlertPopUp.YES | AlertPopUp.NO,
//          null,
//          function(e:CloseEvent):void {
//            if (e.detail == AlertPopUp.YES) 
//              CollectorManager.instance.removeItem(selectedObject);
//              (parent as Frontend).buildGraph();
//            },
//          null, AlertPopUp.NO);
      }
    ]]>
  </fx:Script>

</actionbar:ActionBar>