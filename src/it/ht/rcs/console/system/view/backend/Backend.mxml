<?xml version="1.0" encoding="utf-8"?>
<s:VGroup xmlns:fx="http://ns.adobe.com/mxml/2009"
          xmlns:s="library://ns.adobe.com/flex/spark"
          xmlns:mx="library://ns.adobe.com/flex/mx"
          xmlns:backend="it.ht.rcs.console.system.view.backend.*"
          left="5" right="5" top="0" bottom="5" addedToStage="onAddedToStage(event)"
          removedFromStage="onRemovedFromStage(event)">
  
  <fx:Script>
    <![CDATA[
      import it.ht.rcs.console.backup.controller.BackupArchiveManager;
      import it.ht.rcs.console.backup.controller.BackupJobManager;
      import it.ht.rcs.console.backup.model.BackupArchive;
      import it.ht.rcs.console.backup.model.BackupJob;
      import it.ht.rcs.console.events.DataLoadedEvent;
      import it.ht.rcs.console.events.RefreshEvent;
      import it.ht.rcs.console.shard.controller.ShardManager;
      import it.ht.rcs.console.shard.model.Shard;
      import it.ht.rcs.console.system.view.backend.renderers.DBRenderer;
      import it.ht.rcs.console.system.view.backend.renderers.ShardRenderer;
      import it.ht.rcs.console.utils.AlertPopUp;
      
      import locale.R;
      
      import mx.collections.ListCollectionView;
      import mx.collections.Sort;
      import mx.collections.SortField;
      import mx.core.FlexGlobals;
      import mx.events.CloseEvent;
      import mx.managers.PopUpManager;
      
      [Bindable]
      private var _shard_view:ListCollectionView;
      [Bindable]
      private var _backup_job_view:ListCollectionView;
      [Bindable]
      private var _backup_archive_view:ListCollectionView;
            
      [Bindable]
      private var rootNode:DBRenderer;
      
      private function onAddedToStage(event:Event):void
      {
        BackupJobManager.instance.start();
        BackupArchiveManager.instance.start();
        _backup_job_view = BackupJobManager.instance.getView(); 
        _backup_archive_view = BackupArchiveManager.instance.getView(); 
        
        ShardManager.instance.addEventListener(DataLoadedEvent.DATA_LOADED, onDataLoaded);
        ShardManager.instance.start();
      }
      
      private function onRemovedFromStage(event:Event):void
      {
        ShardManager.instance.removeEventListener(DataLoadedEvent.DATA_LOADED, onDataLoaded);
        ShardManager.instance.stop();
        _shard_view = null;
        BackupJobManager.instance.stop();
        _backup_job_view = null;
        BackupArchiveManager.instance.stop();
        _backup_archive_view = null;
      }
      
      private function onDataLoaded(event:DataLoadedEvent):void
      {
        if (_shard_view == null) {
          var sort:Sort = new Sort();
          sort.fields = [new SortField('_id', true, false, false)];
          _shard_view = ShardManager.instance.getView(sort);
        }
        buildGraph();
      }
      
      public function buildGraph():void
      {
        var shards:Vector.<ShardRenderer> = new Vector.<ShardRenderer>();
        for each (var el:Shard in _shard_view) {
          var sr:ShardRenderer = new ShardRenderer();
          sr.shard = el;
          shards.push(sr);
        }
        
        var db:DBRenderer = new DBRenderer();
        db.shards = shards;
        rootNode = db;
      }
      
      private function addJob():void
      {
        BackupJobManager.instance.newJob(function onSuccess(j:BackupJob):void {
          selectJob(j);
          editJob(j);
        });
      }
      
      private function selectJob(j:BackupJob):void
      {
        backupjobs.selectedItem = j;
      }
      
      private function editJob(j:BackupJob):void
      {
        var ej:BackupJobEdit = PopUpManager.createPopUp(root, BackupJobEdit, true) as BackupJobEdit;
        ej.job = j;
        PopUpManager.centerPopUp(ej);
      }
      
      private function deleteJob(j:BackupJob):void
      {
        if (j == null)
          return;
        
        BackupJobManager.instance.removeItem(j);
      }
      
      private function runJob(j:BackupJob):void
      {
        if (j == null)
          return;
        
        BackupJobManager.instance.runJob(j);
        BackupJobManager.instance.refresh();
      }
      
      private function restoreArchive(a:BackupArchive):void
      {
        if (a == null)
          return;
        
        AlertPopUp.show(R.get('CONFIRM_BACKUP_RESTORE', [a.name]), R.get('CONFIRM'), AlertPopUp.YES|AlertPopUp.NO, null,
          function(e:CloseEvent):void {
            if (e.detail == AlertPopUp.YES) 
              BackupArchiveManager.instance.restoreArchive(a, false);
          }, null, AlertPopUp.NO);
      }

      private function deleteArchive(a:BackupArchive):void
      {
        if (a == null)
          return;
        
        AlertPopUp.show(R.get('CONFIRM_BACKUP_DELETION', [a.name]), R.get('CONFIRM'), AlertPopUp.YES|AlertPopUp.NO, null,
          function(e:CloseEvent):void {
            if (e.detail == AlertPopUp.YES) 
              BackupArchiveManager.instance.removeItem(a);
          }, null, AlertPopUp.NO);
      }
        
    ]]>
  </fx:Script>
  
  <s:Scroller id="stageScroller" width="100%" height="100%">
    <backend:BackendGraph id="backendGraph" rootNode="{rootNode}"/>
  </s:Scroller>
  
  <mx:TabNavigator width="100%" height="250" backgroundColor="0xeaeaea">
    <s:NavigatorContent label="{R.get('BACKUP_JOBS')}">
      <s:VGroup width="100%" height="100%">
        <s:HGroup width="100%">
          <s:Spacer width="3" />
          <s:Button x="0" y="0" label="N" width="30" height="20" click="addJob()" toolTip="{resourceManager.getString('localized_main', 'NEW')}" skinClass="it.ht.rcs.console.skins.NewButton"/>
          <s:Button x="40" y="0" label="E" width="30" height="20" click="editJob(backupjobs.selectedItem as BackupJob)" enabled="{backupjobs.selectedItem != null}" toolTip="{R.get('EDIT')}" skinClass="it.ht.rcs.console.skins.EditButton"/>
          <s:Button x="80" y="0" label="D" width="30" height="20" click="deleteJob(backupjobs.selectedItem as BackupJob)" enabled="{backupjobs.selectedItem != null}" toolTip="{R.get('DELETE')}" skinClass="it.ht.rcs.console.skins.DeleteButton"/>
          <s:Button x="120" y="0" label="R" width="30" height="20" click="runJob(backupjobs.selectedItem as BackupJob)" enabled="{backupjobs.selectedItem != null}" toolTip="{R.get('RUN_NOW')}" skinClass="it.ht.rcs.console.skins.DeleteButton"/>
        </s:HGroup>
        <backend:BackupJobs id="backupjobs" dataProvider="{_backup_job_view}" doubleClickEnabled="true" doubleClick="editJob(backupjobs.selectedItem as BackupJob)"/>
      </s:VGroup>
    </s:NavigatorContent>
    
    <s:NavigatorContent label="{R.get('BACKUP_ARCHIVE')}">
      <s:VGroup width="100%" height="100%">
        <s:HGroup>
          <s:Spacer width="3" />
          <s:Button x="0" y="0" width="30" height="20" click="restoreArchive(backuparchives.selectedItem as BackupArchive)" enabled="{backuparchives.selectedItem != null}" toolTip="{resourceManager.getString('localized_main', 'RESTORE')}" skinClass="it.ht.rcs.console.skins.RestoreButton"/>
          <s:Button x="40" y="0" width="30" height="20" click="deleteArchive(backuparchives.selectedItem as BackupArchive)" enabled="{backuparchives.selectedItem != null}" toolTip="{resourceManager.getString('localized_main', 'DELETE')}" skinClass="it.ht.rcs.console.skins.DeleteButton"/>
        </s:HGroup>
        <backend:BackupArchives id="backuparchives" dataProvider="{_backup_archive_view}"/>
      </s:VGroup>
    </s:NavigatorContent>
  </mx:TabNavigator>

</s:VGroup>