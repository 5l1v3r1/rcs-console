<?xml version="1.0" encoding="utf-8"?>
<s:VGroup xmlns:fx="http://ns.adobe.com/mxml/2009"
          xmlns:s="library://ns.adobe.com/flex/spark"
          xmlns:mx="library://ns.adobe.com/flex/mx"
          xmlns:backend="it.ht.rcs.console.system.view.backend.*"
          xmlns:graph="it.ht.rcs.console.system.view.backend.graph.*"
          xmlns:backups="it.ht.rcs.console.system.view.backend.backups.*"
          width="100%" height="100%" addedToStage="onAddedToStage(event)"
          removedFromStage="onRemovedFromStage(event)">
  
  <fx:Script>
    <![CDATA[
      import it.ht.rcs.console.events.DataLoadedEvent;
      import it.ht.rcs.console.shard.controller.ShardManager;
      import it.ht.rcs.console.shard.model.Shard;
      import it.ht.rcs.console.system.view.backend.graph.renderers.DBRenderer;
      import it.ht.rcs.console.system.view.backend.graph.renderers.ShardRenderer;
      
      import mx.collections.ListCollectionView;
      
      [Bindable]
      private var _shard_view:ListCollectionView;
            
      private function onAddedToStage(event:Event):void
      {
        ShardManager.instance.addEventListener(DataLoadedEvent.DATA_LOADED, onDataLoaded);
        ShardManager.instance.listenRefresh();
      }
      
      private function onRemovedFromStage(event:Event):void
      {
        ShardManager.instance.removeEventListener(DataLoadedEvent.DATA_LOADED, onDataLoaded);
        ShardManager.instance.unlistenRefresh();
      }
      
      private function onDataLoaded(event:DataLoadedEvent):void
      {
        if (_shard_view == null)
          _shard_view = ShardManager.instance.getView();
        buildGraph();
//        if (_shard_view == null) {
//          var sort:Sort = new Sort();
//          sort.fields = [new SortField('_id', true, false, false)];
//          _shard_view = ShardManager.instance.getView(sort);
//        }
      }
      
      public function buildGraph():void
      {
        var shards:Vector.<ShardRenderer> = new Vector.<ShardRenderer>();
        for each (var el:Shard in _shard_view) {
          var sr:ShardRenderer = new ShardRenderer();
          sr.shard = el;
          shards.push(sr);
        }
        
        var db:DBRenderer = new DBRenderer();
        db.shards = shards;
        graph.db = db;
        graph.rebuildGraph();
      }
    ]]>
  </fx:Script>
  
  <backend:Backups/>
  
  <s:BorderContainer width="100%" height="100%" borderColor="#dddddd" borderVisible="true"
                     borderWeight="2" cornerRadius="10">
    
    <s:Rect width="100%" height="100%" radiusX="10" radiusY="10">
      <s:fill>
        <s:LinearGradient rotation="90">
          <s:GradientEntry color="#eeeeee"/>
          <s:GradientEntry color="#ffffff"/>
          <s:GradientEntry color="#ffffff"/>
        </s:LinearGradient>
      </s:fill>
    </s:Rect>
    
    <s:Scroller id="scroller" width="100%" height="100%">
      <graph:BackendGraph id="graph"/>
    </s:Scroller>
    
  </s:BorderContainer>
  
</s:VGroup>