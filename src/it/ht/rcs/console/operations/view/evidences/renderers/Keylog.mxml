<?xml version="1.0" encoding="utf-8"?>
<renderers:EvidenceDataRenderer xmlns:fx="http://ns.adobe.com/mxml/2009"
                                xmlns:s="library://ns.adobe.com/flex/spark"
                                xmlns:mx="library://ns.adobe.com/flex/mx"
                                xmlns:renderers="it.ht.rcs.console.operations.view.evidences.renderers.*"
                                width="100%" height="100%" addedToStage="init()"
                                >
  
  <fx:Script>
    <![CDATA[
      import flashx.textLayout.conversion.TextConverter;
      
      import it.ht.rcs.console.evidence.controller.EvidenceManager;
      import it.ht.rcs.console.evidence.model.Evidence;
      import it.ht.rcs.console.operations.view.evidences.EvidencesView;
      
      import locale.R;
      
      import mx.rpc.events.FaultEvent;
      import mx.rpc.events.ResultEvent;
      
      import spark.components.DataGrid;
      
      [Bindable]
      private var originalContent:String="";
      
      [Bindable]
      private var translatedContent:String="";
      
      [Bindable]
      private var translation:Boolean;
      
      private var mainView:EvidencesView;
      
      [Bindable]
      override public function set data(value:*):void
      {
        
        super.data=value;
      
        originalContent=data.data.content
        translatedContent=data.data.tr;
        switch (translatedContent)
        {
          
          case 'TRANS_QUEUED':
            translatedContent='(' + R.get('TRANS_QUEUED') + ')';
            break;
          case 'TRANS_IN_PROGRESS':
            translatedContent='(' + R.get('TRANS_IN_PROGRESS') + ')';
            break;
          case 'TRANS_ERROR':
            translatedContent='(' + R.get('TRANS_ERROR') + ')';
            break;
          case null:
            translatedContent='(' + R.get('TRANSLATION_UNAVAILABLE') + ')';
            break;
          default:
            translatedContent=translatedContent;
        }
        
        processTxt.textFlow= TextConverter.importToFlow("<b>Program: </b>"+data.data.program, TextConverter.TEXT_FIELD_HTML_FORMAT)
        translationTxt.setStyle("color", 0x666666)
        translationTxt.textFlow=TextConverter.importToFlow("<b>Content: </b><i>" + translatedContent+"</i>", TextConverter.TEXT_FIELD_HTML_FORMAT)
        contentTxt.textFlow= TextConverter.importToFlow("<b>Content: </b>"+originalContent, TextConverter.TEXT_FIELD_HTML_FORMAT)
          
        windowTxt.textFlow= TextConverter.importToFlow("<b>Window: </b>"+data.data.window, TextConverter.TEXT_FIELD_HTML_FORMAT)
        
        onTranslate(null)
      }
      
      private function init():void
      {
        var renderer:EvidenceRenderer=this.owner as EvidenceRenderer
        var grid:DataGrid=renderer.owner as DataGrid;
        mainView=grid.owner as EvidencesView;
        mainView.addEventListener("translate", onTranslate);
        translation=mainView.translation;
        translateLink.setStyle("color", 0x0000FF)
        translateLink.addEventListener(TextEvent.LINK, doTranslate);
        translateLink.htmlText="<u><b><a href='event:doTranslate'>" + R.get('TRANSLATE_NOW') + "</a></b></u>"
        onTranslate(null)
      }
      
      private function onTranslate(e:Event):void
      {
        if (data)
        {
          
          if (!mainView.translation)
          {
            contentTxt.visible=contentTxt.includeInLayout=true;
            translationTxt.visible=translationTxt.includeInLayout=false;
            translateLink.visible=translateLink.includeInLayout=false;
          }
          else
          {
            contentTxt.visible=contentTxt.includeInLayout=false;
            translationTxt.visible=translationTxt.includeInLayout=true;
            
            if (translatedContent == '(' + R.get('TRANSLATION_UNAVAILABLE') + ')')
              translateLink.visible=translateLink.includeInLayout=true;
            else
              translateLink.visible=translateLink.includeInLayout=false;
            
          }
        }
      }
      
      private function onTranslateResult(e:ResultEvent):void
      {
        data=e.result;
        for (var i:int=0; i < EvidenceManager.instance._view.length; i++)
        {
          var evidence:Evidence=EvidenceManager.instance._view.getItemAt(i) as Evidence;
          if (evidence)
          {
            if (evidence._id == e.result._id)
            {
              evidence.data.tr=e.result.data.tr;
            }
          }
        }
      }
      
      private function onTranslateFault(e:FaultEvent):void
      {
        trace("translation fault");
      }

      
      private function doTranslate(e:TextEvent):void
      {
        var id:String=encodeURIComponent(data._id);
        var target:String=encodeURIComponent(EvidenceManager.instance.evidenceFilter.target);
        EvidenceManager.instance.translate(id, target, onTranslateResult, onTranslateFault); 
      }
      
    ]]>
  </fx:Script>
  <s:HGroup verticalAlign="top"
            height="100%"
            width="100%">
    <s:VGroup verticalAlign="top" width="100%">
      <s:RichText id="contentTxt" width="100%"/>
      <s:RichText id="translationTxt" width="100%"/>
      <mx:Text id="translateLink"
               visible="false"
               includeInLayout="false"/>
    </s:VGroup>
    <s:Line height="100%">
      <s:stroke>
        <s:SolidColorStroke color="0xCCCCCC"/>
      </s:stroke>
    </s:Line>
    <s:VGroup verticalAlign="top" width="100%">
      <s:RichText id="processTxt" width="100%"/>
      <s:RichText id="windowTxt" width="100%"/>
    </s:VGroup>
  </s:HGroup>
  
</renderers:EvidenceDataRenderer>
