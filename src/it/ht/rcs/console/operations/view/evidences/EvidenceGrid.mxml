<?xml version="1.0" encoding="utf-8"?>
<s:DataGrid xmlns:fx="http://ns.adobe.com/mxml/2009"
            xmlns:s="library://ns.adobe.com/flex/spark"
            xmlns:mx="library://ns.adobe.com/flex/mx"
            xmlns:filters="it.ht.rcs.console.operations.view.evidences.filters.*"
            width="100%" height="100%" sortableColumns="false" variableRowHeight="true" editable="true" alternatingRowColors="[#FFFFFF, #EEEEEE]" 
            gridItemEditorSessionStarting="onItemEditingStart()" gridItemEditorSessionSave="onItemEditingSave()"
            doubleClickEnabled="true">

  <fx:Script>
     
    <![CDATA[
      import it.ht.rcs.console.agent.controller.AgentManager;
      import it.ht.rcs.console.agent.model.Agent;
      import it.ht.rcs.console.evidence.controller.EvidenceManager;
      import it.ht.rcs.console.evidence.model.Evidence;
      import it.ht.rcs.console.utils.TimeUtils;
      
      import locale.R;
      
      import mx.collections.IList;
      import mx.events.CollectionEvent;
      import mx.events.FlexEvent;
      
      import spark.core.NavigationUnit;
      import spark.events.GridEvent;
      import spark.events.GridItemEditorEvent;
      
      [Bindable]
      public var filter:Object = EvidenceManager.instance.evidenceFilter;
      
      private function dateLabelFunction(item:Object, column:GridColumn):String
      {
        return TimeUtils.timestampFormatter(item[column.dataField] * 1000);
      }
      
      public function editNote():void
      {
        if(!selectedItems || selectedItems.length<1)
        {
          return;
        }
        else
        {
          var rowIndex:int=this.selectedIndices[0];
          var columnIndex:int=7 //note column index
          this.startItemEditorSession(rowIndex,columnIndex);
        }
      }
      
      private function onItemEditingStart():void
      {
       this.focusEnabled=false;
       this.selectedItem.note=this.selectedItem.note
       this.focusEnabled=true;
      }
      
      private function onItemEditingSave():void
      {
        for(var i:int=0;i<selectedItems.length;i++)
        {
          var evidence:Evidence=selectedItems[i] as Evidence;
          evidence.note=selectedItem.note;
        }
      }
      
      private function showName(item:Object, column:GridColumn):String
      {
        var agent:Agent=AgentManager.instance.getItem(item.aid);
        if (agent == null) return "<unknown>";
        return agent.name;
      }
      
      private function showData(item:Object, column:GridColumn):String
      {
        
        return item.data._grid
      }
      
      
      [Bindable]
      override public function set dataProvider(value:IList):void
      {
        
        super.dataProvider=value;
        //this.grid.addEventListener(Event.RESIZE, onGridResize)
      }
      
      private function onGridResize(e:Event):void
      {
        //scrollDown();
      }
      
//      private function scrollDown():void
//      {
//        // update the verticalScrollPosition to the end of the List
//        // virtual layout may require us to validate a few times (it's a trick)
//        var delta:Number = 0;
//        var count:int = 0;
//        while (count++ < 10)
//        {
//          this.validateNow();
//          delta = this.grid.getVerticalScrollPositionDelta(NavigationUnit.END);
//          this.grid.verticalScrollPosition += delta;
//          
//          if (delta == 0)
//            break;
//        }
//      }

      
    ]]>
  </fx:Script>
  
  <s:columns>
    <s:ArrayList>
      
      <s:GridColumn width="37" dataField="rel" headerText=""
                    itemRenderer="it.ht.rcs.console.alerting.view.TagRenderer" resizable="false" editable="false">
        <s:headerRenderer>
          <fx:Component>
            <filters:AbstractHeaderRenderer filter="{outerDocument.filter}"
                                            popupFactory="it.ht.rcs.console.operations.view.evidences.filters.TagFilterPopup"/>
          </fx:Component>
        </s:headerRenderer>
      </s:GridColumn>
      
      <s:GridColumn width="30" dataField="blo" headerText=""
                    itemRenderer="it.ht.rcs.console.operations.view.evidences.renderers.BlotterRenderer"
                    resizable="false" editable="false">
        <s:headerRenderer>
          <fx:Component>
            <filters:AbstractHeaderRenderer filter="{outerDocument.filter}"
                                            popupFactory="it.ht.rcs.console.operations.view.evidences.filters.BlotterFilterPopup"/>
          </fx:Component>
        </s:headerRenderer>
      </s:GridColumn>
      
      <s:GridColumn width="130" dataField="da" headerText="{R.get('DATE_ACQUIRED')}"
                    labelFunction="dateLabelFunction" resizable="false" editable="false">
        <s:headerRenderer>
          <fx:Component>
            <filters:AbstractHeaderRenderer filter="{outerDocument.filter}"
                                            popupFactory="it.ht.rcs.console.operations.view.evidences.filters.DateFilterPopup"/>
          </fx:Component>
        </s:headerRenderer>
        <s:itemRenderer>
          <fx:Component>
            <s:GridItemRenderer>
              <s:layout>
                <s:HorizontalLayout verticalAlign="middle" horizontalAlign="left" paddingLeft="6" paddingRight="6" paddingTop="4"/>
              </s:layout>
              <s:Label id="labelDisplay"/>
            </s:GridItemRenderer>
          </fx:Component>
        </s:itemRenderer>    
      </s:GridColumn>
      
      <s:GridColumn width="130" dataField="dr" headerText="{R.get('DATE_RECEIVED')}"
                    labelFunction="dateLabelFunction" resizable="false" editable="false">
        <s:headerRenderer>
          <fx:Component>
            <filters:AbstractHeaderRenderer filter="{outerDocument.filter}"
                                            popupFactory="it.ht.rcs.console.operations.view.evidences.filters.DateFilterPopup"/>
          </fx:Component>
        </s:headerRenderer>
        <s:itemRenderer>
          <fx:Component>
            <s:GridItemRenderer>
              <s:layout>
                <s:HorizontalLayout verticalAlign="middle" horizontalAlign="left"  paddingLeft="6" paddingRight="6" paddingTop="4"/>
              </s:layout>
              <s:Label id="labelDisplay"/>
            </s:GridItemRenderer>
          </fx:Component>
        </s:itemRenderer>
      </s:GridColumn>
      
      <s:GridColumn width="150" dataField="aid" headerText="Agent"
                    labelFunction="showName" resizable="false" editable="false">
        <s:itemRenderer>
          <fx:Component>
            <s:GridItemRenderer>
              <s:layout>
                <s:HorizontalLayout verticalAlign="middle" horizontalAlign="left"  paddingLeft="6" paddingRight="6" paddingTop="4"/>
              </s:layout>
              <s:Label id="labelDisplay"/>
            </s:GridItemRenderer>
          </fx:Component>
        </s:itemRenderer>    
      </s:GridColumn>
      
      <s:GridColumn width="80" dataField="type" headerText="{R.get('TYPE')}" resizable="false" editable="false">
        <s:headerRenderer>
          <fx:Component>
            <filters:AbstractHeaderRenderer filter="{outerDocument.filter}"
                                            popupFactory="it.ht.rcs.console.operations.view.evidences.filters.TypeFilterPopup"/>
          </fx:Component>
        </s:headerRenderer>
        <s:itemRenderer>
          <fx:Component>
            <s:GridItemRenderer>
              <s:layout>
                <s:HorizontalLayout verticalAlign="middle" horizontalAlign="left"  paddingLeft="6" paddingRight="6" paddingTop="4"/>
              </s:layout>
              <s:Label id="labelDisplay"/>
            </s:GridItemRenderer>
          </fx:Component>
        </s:itemRenderer>    
      </s:GridColumn>
      
      <s:GridColumn dataField="data" headerText="Info" width="500"
                    itemRenderer="it.ht.rcs.console.operations.view.evidences.renderers.EvidenceRenderer" resizable="false" editable="false" >
        <s:headerRenderer>
          <fx:Component>
            <filters:AbstractHeaderRenderer filter="{outerDocument.filter}"
                                            popupFactory="it.ht.rcs.console.operations.view.evidences.filters.TextFilterPopup"
                                            propertyName="info"/>
          </fx:Component>
        </s:headerRenderer>
      </s:GridColumn>
      
      <s:GridColumn  dataField="note" headerText="Note" resizable="false" editable="true" >
        
      </s:GridColumn>
      <s:GridColumn  dataField="data" headerText="Data" resizable="false" editable="true" labelFunction="showData">
        
      </s:GridColumn>

    </s:ArrayList>
  </s:columns>
</s:DataGrid>