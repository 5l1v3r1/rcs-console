<?xml version="1.0" encoding="utf-8"?>
<renderers:EvidenceDataRenderer xmlns:fx="http://ns.adobe.com/mxml/2009"
																xmlns:s="library://ns.adobe.com/flex/spark"
																xmlns:mx="library://ns.adobe.com/flex/mx"
																xmlns:renderers="it.ht.rcs.console.operations.view.evidences.renderers.*"
																width="100%"
																height="100%">

	<fx:Script>
		<![CDATA[
			import it.ht.rcs.console.DB;
			import flashx.textLayout.conversion.TextConverter;

			import it.ht.rcs.console.operations.view.evidences.renderers.ChatIcons;

			[Bindable]
			private var ImageClass:Class;

			[Embed('/img/NEW/target_16.png')]
			private static const targetIcon:Class;



			[Bindable]
			override public function set data(value:*):void
			{

				super.data=value;
				if (data.data.program != null)
				{
					ImageClass=ChatIcons[data.data.program.toLowerCase()]
					icon.toolTip=data.data.program
				}
        if (data.data.program == "litecoin" || data.data.program == "bitcoin" || data.data.program == "feathercoin" || data.data.program=="namecoin")
        {
          rightBox.visible = rightBox.includeInLayout=false;
          separator.visible = separator.includeInLayout=false;
        }
        else
        {
          rightBox.visible = rightBox.includeInLayout=true;
          separator.visible = separator.includeInLayout=true;
        }
     
				// name, contact, info
				nameTxt.textFlow=TextConverter.importToFlow("<b>Name: </b>" + data.data.name, TextConverter.TEXT_FIELD_HTML_FORMAT)
				if (data.data.contact != "")
				{
					contactTxt.visible=contactTxt.includeInLayout=true;
					contactTxt.textFlow=TextConverter.importToFlow("<b>Contact: </b>" + data.data.contact, TextConverter.TEXT_FIELD_HTML_FORMAT)
				}
				else
				{
					contactTxt.visible=contactTxt.includeInLayout=false;
				}
				infoLabelTxt.textFlow=TextConverter.importToFlow("<b>Info: </b>", TextConverter.TEXT_FIELD_HTML_FORMAT);
				infoTxt.textFlow=TextConverter.importToFlow(lineBreak(data.data.info), TextConverter.TEXT_FIELD_HTML_FORMAT);


				if (data.data.type == "target")
				{
					target.visible=true;
				}
        
        else if (data.data.type == "peer")
        {
          target.visible=false;
        }
        
        else
        {
          target.visible=false;
        }

				//typeTxt.textFlow=TextConverter.importToFlow("<b>Type: </b>"+data.data.type, TextConverter.TEXT_FIELD_HTML_FORMAT)
			}

			private function lineBreak(s:String):String
			{
				var result:String=s.replace(new RegExp("\n", "g"), "<br>");
				return result;
			}
		]]>
	</fx:Script>
	<s:HGroup verticalAlign="middle"
						height="100%"
						width="100%">
		<s:VGroup verticalAlign="top"
							width="100%">
			<s:HGroup verticalAlign="middle"
								width="100%">
				<s:Image width="16" id="icon"
								 height="16"
								 source="{ImageClass}"
								 visible="{data.data.program!=null}"
								 includeInLayout="{data.data.program!=null}"
								 toolTip="{data.data.program}"/>
				<s:Image width="16"
								 height="16"
								 source="{targetIcon}"
								 toolTip="target"
								 id="target"
								 visible="false"/>
				<s:RichText id="typeTxt"
										width="100%"/>
			</s:HGroup>
			<s:RichText id="nameTxt"
									width="100%"/>
			<s:RichText id="contactTxt"
									width="100%"
									visible="{data.data.contact!='' &amp;&amp; data.data.contact!=null}"
									includeInLayout="{data.data.contact!='' &amp;&amp; data.data.contact!=null}"/>
		</s:VGroup>
		<s:Line height="100%" id="separator">
			<s:stroke>
				<s:SolidColorStroke color="0xCCCCCC"/>
			</s:stroke>
		</s:Line>

		<s:HGroup verticalAlign="top" id="rightBox"
							width="100%" visible="{data.data.program!='litecoin'}" includeInLayout="{data.data.program!='litecoin'}">
			<s:RichText id="infoLabelTxt"/>
			<s:RichText id="infoTxt"
									width="100%"
									maxDisplayedLines="2"/>
		</s:HGroup>
	</s:HGroup>

</renderers:EvidenceDataRenderer>
