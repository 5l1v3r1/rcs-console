<?xml version="1.0" encoding="utf-8"?>
<s:DefaultGridHeaderRenderer xmlns:fx="http://ns.adobe.com/mxml/2009"
														 xmlns:s="library://ns.adobe.com/flex/spark"
														 xmlns:mx="library://ns.adobe.com/flex/mx"
														 addedToStage="onAddedToStage()"
														 click="clickHandler(event)"
														 removedFromStage="onRemovedFromStage()"
														 initialize="onAddedToStage()"
														 rollOver="onRollover(event)"
														 rollOut="onRollout(event)"
														 useHandCursor="true"
														 buttonMode="true">

	<fx:Script>
		<![CDATA[
			import it.ht.rcs.console.events.FilterEvent;

			import locale.R;

			import mx.controls.ToolTip;
			import mx.core.FlexGlobals;
			import mx.core.IToolTip;
			import mx.events.FlexMouseEvent;
			import mx.managers.PopUpManager;
			import mx.managers.ToolTipManager;

			import spark.components.CheckBox;
			import spark.components.HGroup;

			private static var currentPopup:AbstractFilterPopup;
			private var tip:ToolTip

			[Bindable]
			private var popup:AbstractFilterPopup;

			public var popupFactory:IFactory;

			[Bindable]
			public var mandatory:Boolean=false;

			[Bindable]
			public var editable:Boolean=true;

			public var filter:Object;

			public var propertyName:String=null;

			private function onAddedToStage():void
			{

				popup=popupFactory.newInstance();
				popup.property=propertyName || column.dataField;

				popup.filter=filter;

				PopUpManager.addPopUp(popup, this.owner, false);

				showFilter.selected=filter.hasOwnProperty(popup.property) || mandatory;

				FlexGlobals.topLevelApplication.addEventListener(FilterEvent.REBUILD, popup.rebuild);
				FlexGlobals.topLevelApplication.addEventListener(FilterEvent.RESET_FILTER, resetFilter);

			}

			private function getToolTip():String
			{

				switch (this.column.dataField)
				{
					case "_id":
						return "id";
						break;
					case "da":
						return R.get('DATE_ACQUIRED');
						break;
					case "dr":
						return R.get('DATE_RECEIVED');
						break;
					case "rel":
						return R.get('RELEVANCE');
						break;
					case "type":
						return R.get('TYPE');
						break;
					case "data":
						return R.get('INFO');
						break;
					case "note":
						return R.get('NOTE');
						break;
					case "blo":
						return R.get('REPORT');
						break;
					case "aid":
						return R.get('AGENT');
						break;

				}

				return "";
			}

			private function onRemovedFromStage():void
			{
				//FlexGlobals.topLevelApplication.removeEventListener(FilterEvent.REBUILD, popup.rebuild);
				//FlexGlobals.topLevelApplication.removeEventListener(FilterEvent.RESET_FILTER, resetFilter);
				PopUpManager.removePopUp(popup);
			}

			private function resetFilter(event:FilterEvent):void
			{
				trace("reset filter " + column.dataField)
				showFilter.selected=mandatory || false;
				changeHandler(false);
			}

			override public function prepare(hasBeenRecycled:Boolean):void
			{
				super.prepare(hasBeenRecycled);
				height=22;
				(labelDisplayGroup.parent as HGroup).top=2;
				labelDisplay.left=20;
				labelDisplay.top=1;
				labelDisplayGroup.addElementAt(showFilter, 0);
			}

			override protected function updateDisplayList(unscaledWidth:Number, unscaledHeight:Number):void
			{
				super.updateDisplayList(unscaledWidth, unscaledHeight);
				if (popup && popup.visible)
					centerPopup();
			}

			private function centerPopup():void
			{
				var center:Point=localToGlobal(new Point(x, y));
				popup.x=center.x - x;
				popup.y=center.y + height;
				if (popup.x + popup.width > owner.width)
					popup.x=center.x - x - popup.width + width + 1;
			}

			// Al click su un header...
			private function clickHandler(event:MouseEvent):void
			{

				// ...se gia' c'e' un popup visualizzato...
				if (currentPopup && currentPopup.visible)
				{
					currentPopup.removeEventListener(FlexMouseEvent.MOUSE_DOWN_OUTSIDE, clickHandler);
					currentPopup.commit(); // ...committalo...
					if (currentPopup === popup)
					{ // ...e se il popup era quello dell'header cliccato nascondilo e basta
						currentPopup=null;
						return;
					}
				}

				// ...altrimenti posizionalo correttamente e visualizzalo
				centerPopup();
				popup.visible=true;
				popup.addEventListener(FlexMouseEvent.MOUSE_DOWN_OUTSIDE, clickHandler);
				currentPopup=popup;
				showFilter.selected=popup.hasFilter;

			}

			// Triggered only when a filter is set (ie. when switching from selected to deselected state)
			// because the checkbox is disabled when there's no filter
			private function changeHandler(fireEvent:Boolean=true):void
			{
				//trace("change "+column.dataField+" "+popup.hasFilter)
				popup.reset(fireEvent);
				popup.visible=false;
			}

			protected function onRollover(event:MouseEvent):void
			{
				var p:Point=this.localToGlobal(new Point(this.showFilter.x + 20, this.showFilter.y - 20));
				ToolTipManager.showDelay=1000;
				tip=ToolTipManager.createToolTip(getToolTip(), p.x, p.y) as ToolTip;

			}

			protected function onRollout(event:MouseEvent):void
			{
				ToolTipManager.destroyToolTip(tip);
			}
		]]>
	</fx:Script>

	<fx:Declarations>
		<s:CheckBox id="showFilter"
								change="changeHandler()"
								buttonMode="true"
								useHandCursor="true"
								enabled="{editable &amp;&amp; showFilter.selected}"
								selected="{mandatory || popup.hasFilter}"
								skinClass="it.ht.rcs.console.skins.FilterCheckBoxSkin"/>
	</fx:Declarations>

</s:DefaultGridHeaderRenderer>
