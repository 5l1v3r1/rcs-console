<?xml version="1.0" encoding="utf-8"?>
<actionbar:ActionBar xmlns:fx="http://ns.adobe.com/mxml/2009"
                     xmlns:s="library://ns.adobe.com/flex/spark"
                     xmlns:mx="library://ns.adobe.com/flex/mx"
                     xmlns:actionbar="it.ht.rcs.console.main.actionbar.*"
                     xmlns:editors="it.ht.rcs.console.operations.view.evidences.actionbar.editors.*"
                     creationComplete="init()" removedFromStage="onRemovedFromStage()" addedToStage="onAddedToStage()"
                     >
  
  <s:Button label="{R.get('EVIDENCE_EXPORT')}" click="onExportClick()" icon="@Embed('/img/NEW/export.png')" enabled="{selectedObject != null}"/>
  
  <editors:TagEditor label="{R.get('RELEVANCE')}" enabled="false"
                     id="tagEditor" change="onRelevanceChange(event)"/>
  
  <s:Button label="{R.get('REPORT_ADD')}" click="onReportClick()" enabled="false"
            icon="@Embed('/img/NEW/export.png')" id="reportBtn" width="150"/>
  
  <!-- <actionbar:Separator width="40"/> -->
  
  <s:Button label="{R.get('EDIT_NOTE')}" click="onEditNoteClick()"
            enabled="{selectedObject != null}"
            icon="@Embed('/img/NEW/logout_32.png')"/>
  
  
  <s:Spacer width="100%"/>
 
  <fx:Metadata> 
    [Event(name="editNote", type="flash.events.Event")] 
  </fx:Metadata> 
  
  <fx:Script>
    <![CDATA[
      import it.ht.rcs.console.accounting.controller.SessionManager;
      import it.ht.rcs.console.accounting.controller.UserManager;
      import it.ht.rcs.console.accounting.model.User;
      import it.ht.rcs.console.evidence.model.Evidence;
      import it.ht.rcs.console.utils.AlertPopUp;
      
      import locale.R;
      
      import mx.events.CloseEvent;
      import mx.managers.PopUpManager;
      
      private var _selectedObjects:Vector.<Object>;
      
      [Embed (source="/img/NEW/export.png" )]
      public var ReportAddIcon:Class;
      
      [Embed (source="/img/NEW/import.png" )]
      public var ReportRemoveIcon:Class;
      
      [Bindable]
      public function set selectedObjects(value:Vector.<Object>):void
      {
        
        _selectedObjects=value;
        
        if(!selectedObjects) {
          tagEditor.tag=0
          tagEditor.enabled=false;
          reportBtn.enabled=false;
          toggleReportButton(true)
          return;
        }
        
        if(selectedObjects.length<1)
        {
          tagEditor.tag=0;
          tagEditor.enabled=false;
          reportBtn.enabled=false;
          stage.removeEventListener(KeyboardEvent.KEY_UP, onKeyPress)
        }
        else if(selectedObjects.length==1)
        {
          tagEditor.tag=selectedObjects[0].relevance;
          tagEditor.enabled=true;
          reportBtn.enabled=true;
          toggleReportButton(selectedObjects[0].blotter);
          stage.addEventListener(KeyboardEvent.KEY_DOWN, onKeyPress)
        }
        else
        {
          tagEditor.tag=0;
          tagEditor.enabled=true;
          var blotterValue:Boolean;
          if(sameValue(selectedObjects, "blotter"))
          {
               blotterValue=selectedObjects[0].blotter  
          }
          if(sameValue(selectedObjects, "relevance"))
          {
            tagEditor.tag=selectedObjects[0].relevance;
            
          }
          reportBtn.enabled=true;
          toggleReportButton(blotterValue);
          stage.addEventListener(KeyboardEvent.KEY_DOWN, onKeyPress)
         }
      }
      
      private function init():void
      {
        
      }
      
      private function onKeyPress(e:KeyboardEvent):void
      {
        
        switch(e.keyCode)
        {
          //0 key
          case 48:
            updateRelevance(0);
            break;
          //1 key
          case 49:
            updateRelevance(1);
            break;
          //2 key
          case 50:
            updateRelevance(2);
            break;
          //3 key
          case 51:
            updateRelevance(3);
            break;
          //4 key
          case 52:
            updateRelevance(4);
            break;
          //n key
          case 78:
            e.stopPropagation()
            e.preventDefault()
            onEditNoteClick()
            break;
          //r key
          case 82:
            updateReport(reportBtn.getStyle("icon")==ReportAddIcon);
            toggleReportButton(reportBtn.getStyle("icon")==ReportAddIcon)
            break; 
        }

      }
      
      private function onRemovedFromStage():void
      {
        stage.removeEventListener(KeyboardEvent.KEY_DOWN, onKeyPress)
      }
      
      private function onAddedToStage():void
      {
        
      }
      
      private function sameValue(selectedObjects:Vector.<Object>, property:String):Boolean{
        
        var result:Boolean=true;
        var value:*=selectedObjects[0][property]
        for(var i:int=0;i<selectedObjects.length;i++)
        {
     
          if(selectedObjects[i][property]!=value)
          {
            result=false;
           
          }
        }
        return result;
      }
      
      private function toggleReportButton(value:Boolean):void{
        
        if(value){
          reportBtn.setStyle("icon", ReportRemoveIcon);
          reportBtn.label=R.get('REPORT_REMOVE');
        }
        else
        {
          reportBtn.setStyle("icon", ReportAddIcon);
          reportBtn.label=R.get('REPORT_ADD')
        }
        
      }
      
      public function get selectedObjects():Vector.<Object>
      {
        return _selectedObjects;
      }
      
      private function onExportClick():void
      {
        
      }
      
      private function updateRelevance(value:int):void
      {
        for(var i:int=0;i<selectedObjects.length;i++)
        {
          var evidence:Evidence=selectedObjects[i] as Evidence;
          evidence.relevance=value
          
        }
        tagEditor.tag=value;
        
      }
      
      private function updateReport(value:Boolean):void
      {
        for(var i:int=0;i<selectedObjects.length;i++)
        {
          var evidence:Evidence=selectedObjects[i] as Evidence;
          evidence.blotter=value;
          
        }
        
      }
      
      private function onRelevanceChange(e:Event):void
      {
        var tagEditor:TagEditor= e.currentTarget as TagEditor
        updateRelevance(tagEditor.tag)
      }
      
      private function onDeleteClick():void
      {
       
      }
      
      private function onEditNoteClick():void
      {
       dispatchEvent(new Event("editNote"))
      }
      
      private function onReportClick():void
      {
        var value:Boolean=(reportBtn.getStyle("icon")==ReportAddIcon);
        updateReport(value)
        toggleReportButton(value)
        // EvidenceManager.instance.updateReport([_id], true)
      }
      
    
       
    ]]>
  </fx:Script>
  
</actionbar:ActionBar>