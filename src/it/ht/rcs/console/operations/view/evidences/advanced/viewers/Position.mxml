<?xml version="1.0" encoding="utf-8"?>
<s:BorderContainer xmlns:fx="http://ns.adobe.com/mxml/2009"
									 xmlns:s="library://ns.adobe.com/flex/spark"
									 xmlns:mx="library://ns.adobe.com/flex/mx"
									 xmlns:viewers="it.ht.rcs.console.operations.view.evidences.advanced.viewers.*"
									 height="100%"
									 width="100%"
									 borderColor="0xCCCCCC"
									 backgroundColor="0xFFFFFF"
									 backgroundAlpha="1"
									 creationComplete="init()"
									 creationPolicy="all"
									 xmlns:map="it.ht.rcs.console.operations.view.evidences.advanced.viewers.map.*">
	<fx:Metadata> 
    [Event(name="change", type="flash.events.Event")]
    [Event(name="update", type="flash.events.Event")]
  </fx:Metadata>
	<fx:Script>
		<![CDATA[
			import flashx.textLayout.conversion.TextConverter;

			import it.ht.rcs.console.evidence.controller.EvidenceManager;
			import it.ht.rcs.console.evidence.model.Evidence;
			import it.ht.rcs.console.evidence.model.EvidenceDataAddress;

			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;

			[Bindable]
			private var _evidence:Evidence;
			[Bindable]
			private var _positions:Array;
			[Bindable]
			private var type:String;
			[Bindable]
			private var latitude:String;
			[Bindable]
			private var longitude:String;
			[Bindable]
			private var accuracy:String;
			[Bindable]
			private var address:String;
			[Bindable]
			private var details:String;
			[Bindable]
			public var isUpdated:Boolean;
			[Bindable]
			public var idVisible:Boolean;

			[Bindable]
			public function set evidence(value:Evidence):void
			{
				_evidence=value;

				if (isNaN(evidence.data.latitude) || isNaN(evidence.data.longitude))
				{
					if (!isUpdated)
					{
						var id:String=encodeURIComponent(value._id);
						var target:String=encodeURIComponent(EvidenceManager.instance.evidenceFilter.target);
						EvidenceManager.instance.show(id, target, onShowResult, onShowFault)
						isUpdated=true;
					}

				}
				else
				{
					isUpdated=true;
				}

				if (evidence.data.type == null)
				{
					type="(unknown)";
				}
				else
				{
					type=evidence.data.type;
				}

				if (isNaN(evidence.data.latitude))
				{
					latitude="(unknown)";
				}
				else
				{
					latitude=String(evidence.data.latitude);
				}

				if (isNaN(evidence.data.longitude))
				{
					longitude="(unknown)";
				}
				else
				{
					longitude=String(evidence.data.longitude);
				}

				if (isNaN(evidence.data.accuracy))
				{
					accuracy="(unknown)";
				}
				else
				{
					accuracy=String(evidence.data.accuracy + " mt");
				}

				var city:String;
				var country:String;
				var street_number:String;
				var street:String;
				var postal_code:String;

				if (evidence.data.address == null)
				{
					address='(unknown)';
				}
				else if (evidence.data.address.text != '' && evidence.data.address.text != null)
				{
					address=evidence.data.address.text;
				}
				else
				{
					city=evidence.data.address.city || "";
					country=evidence.data.address.country || "";
					street_number=evidence.data.address.street_number || "";
					street=evidence.data.address.street || "";
					postal_code=evidence.data.address.postal_code || "";

					address=city;
					if (country != "" && country != null)
						address+=" (" + country + ") ";
					if (street_number != "" && street_number != null)
						address+=street_number + " ";
					if (street != "" && street != null)
						address+=street + " ";
					if (postal_code != "" && postal_code != null)
						address+=postal_code;
				}

				details="";

				if (evidence.data.cell != null)
				{
					details+="<b>Cell: </b>" + "adv: " + evidence.data.cell.adv + ", age: " + evidence.data.cell.age + ", cid: " + evidence.data.cell.cid + ", db: " + evidence.data.cell.db + ", lac: " + evidence.data.cell.lac + ", mcc: " + evidence.data.cell.mcc + ", mnc: " + evidence.data.cell.mnc;
				}

				if (evidence.data.wifi != null)
				{
					for (var k:int=0; k < evidence.data.wifi.length; k++)
					{
						var ssid:String="-";
						var mac:String="-";
						var sig:String="-";

						if (evidence.data.wifi.getItemAt(k).ssid != null)
						{
							ssid=evidence.data.wifi.getItemAt(k).ssid;
						}
						if (evidence.data.wifi.getItemAt(k).mac != null)
						{
							mac=evidence.data.wifi.getItemAt(k).mac;
						}
						if (evidence.data.wifi.getItemAt(k).sig != null)
						{
							sig=evidence.data.wifi.getItemAt(k).sig;
						}

						details+="<b>WIFI: </b>" + "ssid: " + ssid + ", mac: " + mac + ", sig: " + sig + "<BR>";
					}
				}
				if (evidence.data.ip != null)
				{
					details+="<b>IP: </b> " + evidence.data.ip;
				}
				detailPanel.visible=details != "";
				if (detailPanel.visible)
					detailPanel.currentState="expanded";

				_positions=new Array();

				var pos:Object={lat: evidence.data.latitude, lng: evidence.data.longitude, range: evidence.data.accuracy, evidence: evidence};
				_positions.push(pos);


				if( mapViewer.ready) mapViewer.positions=_positions;

			}

			public function get evidence():Evidence
			{
				return _evidence;
			}


			public function set evidences(value:Vector.<Object>):void
			{
				evidence=value[0] as Evidence;

				_positions=new Array();
				for (var i:int=0; i < value.length; i++)
				{
					var pos:Object={lat: value[i].data.latitude, lng: value[i].data.longitude, range: value[i].data.accuracy, evidence: value[i]};
					_positions.push(pos);
				}

				if (mapViewer.ready)
					mapViewer.positions=_positions;

			}

			private function lineBreak(s:String):String
			{
				var result:String=s.replace(new RegExp("\n", "g"), "<br>");
				return result;
			}

			private function init():void
			{
				mapViewer.addEventListener("ready", onMapReady)
			}

			private function onMapChange():void
			{
				evidence=mapViewer.selectedPosition.evidence;
				dispatchEvent(new Event("change"));
			}

			private function onMapReady(e:Event):void
			{
				mapViewer.removeEventListener("ready", onMapReady)
				mapViewer.positions=_positions;
			}

			private function onShowResult(e:ResultEvent):void
			{
				isUpdated=true;
				var updated:Vector.<Object>=new Vector.<Object>()
				updated.push(e.result as Evidence)
				evidences=updated;
				dispatchEvent(new Event("update"));
			}

			private function onShowFault(e:FaultEvent):void
			{
				isUpdated=true;
			}

			private function checkForPositionUpdate():void
			{
				isUpdated=false;
				var id:String=encodeURIComponent(evidence._id);
				var target:String=encodeURIComponent(EvidenceManager.instance.evidenceFilter.target);
				EvidenceManager.instance.show(id, target, onShowResult, onShowFault)
			}
		]]>
	</fx:Script>
	<s:layout>
		<s:VerticalLayout paddingBottom="10"
											paddingLeft="10"
											paddingRight="10"
											paddingTop="10"/>
	</s:layout>
	<s:RichText id="idTxt"
							width="100%"
							textFlow="{TextConverter.importToFlow('&lt;b&gt;Id: &lt;/b&gt;'+evidence._id, TextConverter.TEXT_FIELD_HTML_FORMAT)}"
							fontSize="12"
							visible="{idVisible}"
							includeInLayout="{idVisible}"/>
	<s:Line width="100%"
					visible="{idVisible}"
					includeInLayout="{idVisible}">
		<s:stroke>
			<s:SolidColorStroke color="0xCCCCCC"/>
		</s:stroke>
	</s:Line>
	<s:RichText id="typeTxt"
							width="100%"
							textFlow="{TextConverter.importToFlow('&lt;b&gt;Type: &lt;/b&gt;'+type, TextConverter.TEXT_FIELD_HTML_FORMAT)}"
							fontSize="12"/>
	<s:Line width="100%">
		<s:stroke>
			<s:SolidColorStroke color="0xCCCCCC"/>
		</s:stroke>
	</s:Line>
	<s:RichText id="addressTxt"
							width="100%"
							textFlow="{TextConverter.importToFlow('&lt;b&gt;Address: &lt;/b&gt;'+address, TextConverter.TEXT_FIELD_HTML_FORMAT)}"
							fontSize="12"/>
	<s:Line width="100%">
		<s:stroke>
			<s:SolidColorStroke color="0xCCCCCC"/>
		</s:stroke>
	</s:Line>
	<s:HGroup verticalAlign="middle"
						width="100%">
		<s:RichText id="latTxt"
								textFlow="{TextConverter.importToFlow('&lt;b&gt;Latitude: &lt;/b&gt;'+latitude, TextConverter.TEXT_FIELD_HTML_FORMAT)}"
								fontSize="12"/>
		<s:RichText id="longTxt"
								textFlow="{TextConverter.importToFlow('&lt;b&gt;Longitude: &lt;/b&gt;'+longitude, TextConverter.TEXT_FIELD_HTML_FORMAT)}"
								fontSize="12"/>
		<s:RichText id="accTxt"
								textFlow="{TextConverter.importToFlow('&lt;b&gt;Accuracy: &lt;/b&gt;'+accuracy, TextConverter.TEXT_FIELD_HTML_FORMAT)}"
								fontSize="12"/>
		<s:Spacer width="100%"/>
		<mx:LinkButton id="refreshBtn"
									 label="Update position"
									 click="checkForPositionUpdate()"
									 fontWeight="bold"/>
	</s:HGroup>

	<s:Group width="100%"
					 height="100%">
		<viewers:MapViewer id="mapViewer"
											 change="onMapChange()"
											 ready="onMapReady(event)"/>
		<map:DetailPanel details="{details}"
										 id="detailPanel"/>
	</s:Group>
</s:BorderContainer>
