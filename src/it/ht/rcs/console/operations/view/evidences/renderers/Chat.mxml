<?xml version="1.0" encoding="utf-8"?>
<renderers:EvidenceDataRenderer xmlns:fx="http://ns.adobe.com/mxml/2009"
																xmlns:s="library://ns.adobe.com/flex/spark"
																xmlns:mx="library://ns.adobe.com/flex/mx"
																xmlns:renderers="it.ht.rcs.console.operations.view.evidences.renderers.*"
                                addedToStage="init()"
																width="100%"
																height="100%">

	<fx:Script>
		<![CDATA[
			import flashx.textLayout.conversion.TextConverter;
      import spark.components.DataGrid;
			import it.ht.rcs.console.DB;
			import it.ht.rcs.console.operations.view.evidences.renderers.ChatIcons;
      import it.ht.rcs.console.operations.view.evidences.EvidencesView;

			import mx.collections.ArrayCollection;
      
      private var content:String
      private var mainView:EvidencesView;

			[Bindable]
			private var renderMode:String;
      
			[Bindable]
			private var ImageClass:Class;

			[Bindable]
			override public function set data(value:*):void
			{
				super.data=value;
        if(data.data.program.toLowerCase()=="" || data.data.program.toLowerCase()==null)
        {
          ImageClass=ChatIcons["chat"]
        }
          
        else if(data.data.program.toLowerCase()=="google talk")
        {
          ImageClass=ChatIcons["gtalk"]
        }
          
        else if(data.data.program.toLowerCase()=="messenger")
        {
          ImageClass=ChatIcons["bbm"]
        }    
        else
        {
          ImageClass=ChatIcons[data.data.program.toLowerCase()]
        }
        
				// topic, peer, content, program
        
				if (data.data.topic != "")
				{
					topicTxt.visible=topicTxt.includeInLayout=true;
					topicTxt.textFlow=TextConverter.importToFlow("<b>Topic: </b>" + data.data.topic, TextConverter.TEXT_FIELD_HTML_FORMAT)
				}
				else
				{
					topicTxt.visible=topicTxt.includeInLayout=false;
				}
				if (data.data.program == "Facebook")
				{
					renderMode=TextConverter.TEXT_FIELD_HTML_FORMAT;
				}
				else
				{
					renderMode=TextConverter.PLAIN_TEXT_FORMAT
				}
      
        
          content=data.data.content;
        
				peerTxt.textFlow=TextConverter.importToFlow("<b>Peer: </b>" + data.data.peer, TextConverter.TEXT_FIELD_HTML_FORMAT)
				contentTxt.textFlow=TextConverter.importToFlow("<b>Content: </b>" + content,TextConverter.TEXT_FIELD_HTML_FORMAT)
				programTxt.textFlow=TextConverter.importToFlow("<b>Program: </b>" + data.data.program, TextConverter.TEXT_FIELD_HTML_FORMAT)
        onTranslate(null)
			}
      private function init():void
      {
        var renderer:EvidenceRenderer = this.owner as EvidenceRenderer
        var grid:DataGrid= renderer.owner as DataGrid;
        mainView = grid.owner as EvidencesView;
        mainView.addEventListener("translate", onTranslate);
      }
      private function onTranslate(e:Event):void
      {
       if(data)
       {
         if(mainView.translation)
           content=data.data.tr || "(TRANSLATION NOT AVAILABLE)";
         else
           content=data.data.content;
       }
        contentTxt.textFlow= TextConverter.importToFlow("<b>Content: </b>"+content, TextConverter.TEXT_FIELD_HTML_FORMAT)
      }
		]]>
	</fx:Script>
	<s:HGroup verticalAlign="top"
						height="100%"
						width="100%">
    
    <s:VGroup verticalAlign="middle"
              width="50%">
      <s:RichText id="peerTxt"
                  width="100%"/>
      <s:HGroup verticalAlign="middle">
        <s:BitmapImage width="16"
                       height="16"
                       source="{ImageClass}"/>
        <s:RichText id="programTxt"
                    width="100%"/>
      </s:HGroup>
    </s:VGroup>
    
		
		<s:Line height="100%">
			<s:stroke>
				<s:SolidColorStroke color="0xCCCCCC"/>
			</s:stroke>
		</s:Line>
    <s:VGroup verticalAlign="middle"
              width="50%">
      <s:RichText id="topicTxt"
                  width="100%"/>
      <s:RichText id="contentTxt"
                  width="100%"/>
    </s:VGroup>
	</s:HGroup>

</renderers:EvidenceDataRenderer>
