<?xml version="1.0" encoding="utf-8"?>
<renderers:EvidenceDataRenderer xmlns:fx="http://ns.adobe.com/mxml/2009"
																xmlns:s="library://ns.adobe.com/flex/spark"
																xmlns:mx="library://ns.adobe.com/flex/mx"
																xmlns:renderers="it.ht.rcs.console.operations.view.evidences.renderers.*"
																width="100%"
																height="100%"
																addedToStage="init()">

	<fx:Declarations>
		<s:Fade id="fadeIn"
						alphaFrom="0"
						alphaTo="1"
						duration="350"/>
		<s:Fade id="fadeOut"
						alphaFrom="1"
						alphaTo="0"
						duration="350"/>
	</fx:Declarations>
	<fx:Script>
		<![CDATA[
      import flashx.textLayout.conversion.TextConverter;
      
      import it.ht.rcs.console.DB;
      import it.ht.rcs.console.evidence.controller.EvidenceManager;
      import it.ht.rcs.console.evidence.model.Evidence;
      import it.ht.rcs.console.monitor.controller.LicenseManager;
      import it.ht.rcs.console.operations.view.evidences.EvidencesView;
      import it.ht.rcs.console.operations.view.evidences.renderers.ChatIcons;
      import it.ht.rcs.console.utils.BMPDecoder;
      import it.ht.rcs.console.utils.ExifUtils;
      
      import jp.shichiseki.exif.ExifInfo;
      import jp.shichiseki.exif.ExifLoader;
      
      import locale.R;
      
      import mx.collections.ArrayCollection;
      import mx.rpc.events.FaultEvent;
      import mx.rpc.events.ResultEvent;
      
      import spark.components.DataGrid;

			private var content:String
			private var mainView:EvidencesView;

			private static const MAGIC_NUMBER:String="BM";

			[Bindable]
			private var renderMode:String;

			[Bindable]
			private var ImageClass:Class;

			[Bindable]
			private var translation:Boolean;

			[Bindable]
			private var originalContent:String="";

			[Bindable]
			private var translatedContent:String="";

			private var imgLoader:URLLoader=new URLLoader();

			[Bindable]
			[Embed(source="/img/evidence/spinner30.swf")]
			public var SpinnerAnimation:Class;

			[Bindable]
			[Embed(source="/img/evidence/broken-link-image-gif.jpg")]
			public var BrokenImage:Class;

			[Bindable]
			private var frameWidth:Number=4;
			[Bindable]
			private var url:String;

			[Bindable]
			override public function set data(value:*):void
			{
				super.data=value;

				originalContent=data.data.content;
				translatedContent=data.data.tr;

				if (data.data.program.toLowerCase() == "" || data.data.program.toLowerCase() == null)
				{
					ImageClass=ChatIcons["chat"]
				}

				else if (data.data.program.toLowerCase() == "google talk")
				{
					ImageClass=ChatIcons["gtalk"]
				}

				else if (data.data.program.toLowerCase() == "messenger")
				{
					ImageClass=ChatIcons["bbm"]
				}
				else
				{
					ImageClass=ChatIcons[data.data.program.toLowerCase()]
				}

				// topic, peer, content, program

				if (data.data.from_display != "" && data.data.from_display != null)
				{
					fromTxt.visible=true;
					fromTxt.includeInLayout=true;
					fromTxt.textFlow=TextConverter.importToFlow("<b>" + R.get('FROM') + ": </b>" + data.data.from_display, TextConverter.TEXT_FIELD_HTML_FORMAT)
				}
				else if (data.data.from != "" && data.data.from != null)
				{
					fromTxt.visible=true;
					fromTxt.includeInLayout=true;
					fromTxt.textFlow=TextConverter.importToFlow("<b>" + R.get('FROM') + ": </b>" + data.data.from, TextConverter.TEXT_FIELD_HTML_FORMAT)
				}
				else
				{
					fromTxt.visible=false;
					fromTxt.includeInLayout=false;
				}
				if (data.data.program == "Facebook")
				{
					renderMode=TextConverter.TEXT_FIELD_HTML_FORMAT;
				}
				else
				{
					renderMode=TextConverter.PLAIN_TEXT_FORMAT
				}

				content=data.data.content;

				//new format
				if (data.data.rcpt_display != null && data.data.rcpt_display != "")
				{
					toTxt.textFlow=TextConverter.importToFlow("<b>" + R.get('TO') + ": </b>" + data.data.rcpt_display, TextConverter.TEXT_FIELD_HTML_FORMAT)
					toTxt.visible=toTxt.includeInLayout=true;
				}
				else if (data.data.rcpt != null && data.data.rcpt != "")
				{
					toTxt.textFlow=TextConverter.importToFlow("<b>" + R.get('TO') + ": </b>" + data.data.rcpt, TextConverter.TEXT_FIELD_HTML_FORMAT)
					toTxt.visible=toTxt.includeInLayout=true;
				}

				//old format
				else if (data.data.peer != null && data.data.peer != "")
				{
					toTxt.textFlow=TextConverter.importToFlow("<b>" + R.get('TO') + ": </b>" + data.data.peer, TextConverter.TEXT_FIELD_HTML_FORMAT)
					toTxt.visible=toTxt.includeInLayout=true;
				}

				else
				{
					toTxt.visible=toTxt.includeInLayout=false;

				}
				switch (translatedContent)
				{

					case 'TRANS_QUEUED':
						translatedContent='(' + R.get('TRANS_QUEUED') + ')';
						break;
					case 'TRANS_IN_PROGRESS':
						translatedContent='(' + R.get('TRANS_IN_PROGRESS') + ')';
						break;
					case 'TRANS_ERROR':
						translatedContent='(' + R.get('TRANS_ERROR') + ')';
						break;
					case null:
						translatedContent='(' + R.get('TRANSLATION_UNAVAILABLE') + ')';
						break;
					default:
						translatedContent=translatedContent;
				}
        
        if (data.data._grid)
        {    
          DB.instance.demo? url="grid/" + data.data._grid: url=DB.hostAutocomplete(Console.currentSession.server) + "grid/" + data.data._grid + "?target_id=" + encodeURIComponent(EvidenceManager.instance.evidenceFilter.target);
          loadImage()
        }
        else
        {
          contentTxt.visible=contentTxt.includeInLayout=true;
          frame.visible=frame.includeInLayout=false;
        }

				contentTxt.textFlow=TextConverter.importToFlow("<b>" + R.get('CONTENT') + ": </b>" + originalContent, TextConverter.TEXT_FIELD_HTML_FORMAT);
				translationTxt.setStyle("color", 0x666666);
				translationTxt.textFlow=TextConverter.importToFlow("<b>" + R.get('CONTENT') + ": </b><i>" + translatedContent + "</i>", TextConverter.TEXT_FIELD_HTML_FORMAT);
				programTxt.textFlow=TextConverter.importToFlow("<b>" + R.get('PROGRAM') + ": </b>" + data.data.program, TextConverter.TEXT_FIELD_HTML_FORMAT);
				incomingTxt.textFlow=TextConverter.importToFlow("<b>Incoming: </b>" + data.data.incoming, TextConverter.TEXT_FIELD_HTML_FORMAT)
				
				onTranslate(null);
			}
      
      
      private function loadImage():void
      {
      

          imgLoader.addEventListener(ProgressEvent.PROGRESS, onImageLoading);
          imgLoader.addEventListener(Event.COMPLETE, onImageLoaded);
          imgLoader.addEventListener(IOErrorEvent.IO_ERROR, onImageError);
          imgLoader.dataFormat=URLLoaderDataFormat.BINARY;
          imgLoader.load(new URLRequest(url))
            
          contentTxt.visible=contentTxt.includeInLayout=false;
          translationTxt.visible=translationTxt.includeInLayout=false
          frame.visible=frame.includeInLayout=true;
          img.smooth=true;
  
      
      }

			private function init():void
			{
				var renderer:EvidenceRenderer=this.owner as EvidenceRenderer;
				var grid:DataGrid=renderer.owner as DataGrid;
				mainView=grid.owner as EvidencesView;
				mainView.addEventListener("translate", onTranslate);
				translation=mainView.translation;
				translateLink.setStyle("color", 0x0000FF);
				translateLink.addEventListener(TextEvent.LINK, doTranslate);
				translateLink.htmlText="<u><b><a href='event:doTranslate'>" + R.get('TRANSLATE_NOW') + "</a></b></u>"
				onTranslate(null)


			}

			private function onImageLoading(e:ProgressEvent):void
			{
				img.visible=false;
				spinner.visible=true;
			}

			private function onImageError(e:IOErrorEvent):void
			{
				imgLoader.removeEventListener(ProgressEvent.PROGRESS, onImageLoading);
				imgLoader.removeEventListener(Event.COMPLETE, onImageLoaded);
				imgLoader.removeEventListener(IOErrorEvent.IO_ERROR, onImageError);
				spinner.visible=false;
				img.source=new BrokenImage()
				img.visible=true;
				fadeIn.play([img]);
			}

			private function onImageLoaded(e:Event):void
			{
				imgLoader.removeEventListener(ProgressEvent.PROGRESS, onImageLoading);
				imgLoader.removeEventListener(Event.COMPLETE, onImageLoaded);
				imgLoader.removeEventListener(IOErrorEvent.IO_ERROR, onImageError);
				if (e.target.data.readUTFBytes(2) == MAGIC_NUMBER)
				{
					img.source=new BMPDecoder().decode(e.target.data as ByteArray)
          spinner.visible=false;
          img.visible=true;
          fadeIn.play([img]);
					return;
				}
				else
				{
          var el:ExifLoader=new ExifLoader()
          el.addEventListener(Event.COMPLETE, onExifLoaded );
          el.addEventListener(IOErrorEvent.IO_ERROR, onExifError);
          el.load( new URLRequest(url) );
					img.source=e.target.data
				}
        img.visible=true;
        fadeIn.play([img]);
				
			}
      
      private function onExifError(e:IOErrorEvent):void
      {
        e.currentTarget.removeEventListener(Event.COMPLETE, onExifLoaded );
        e.currentTarget.removeEventListener(IOErrorEvent.IO_ERROR, onExifError);
        spinner.visible=false;
        img.source=imgLoader.data
        img.visible=true;
        fadeIn.play([img]);
      }
      
      private function onExifLoaded(e:Event):void
      {
        var exif:ExifInfo = e.target.exif;
        if(exif.ifds) 
          var rotation:int = ExifUtils.getEyeOrientedAngle( exif.ifds );
        var bitmap:Bitmap=new Bitmap(img.bitmapData);
       
        if(bitmap.bitmapData && exif.ifds)
        {
          bitmap.smoothing=true;
          bitmap=ExifUtils.getEyeOrientedBitmap(bitmap, exif.ifds)
          img.source=bitmap
        }
        else
        {
          img.source=imgLoader.data
        }
        spinner.visible=false;
        img.visible=true;
        fadeIn.play([img]);
      }
      
      private function getExifBytes(input:IDataInput):ByteArray
      {
        var eb:ByteArray = new ByteArray();
        input.readBytes(eb, 0, 64*1024);
        return eb;
      }


			private function doTranslate(e:TextEvent):void
			{
				if (LicenseManager.instance.translation && !data.data._grid)
				{
					var id:String=encodeURIComponent(data._id);
					var target:String=encodeURIComponent(EvidenceManager.instance.evidenceFilter.target);
					EvidenceManager.instance.translate(id, target, onTranslateResult, onTranslateFault);
				}
			}

			private function onTranslateResult(e:ResultEvent):void
			{
				data=e.result;
				for (var i:int=0; i < EvidenceManager.instance._view.length; i++)
				{
					var evidence:Evidence=EvidenceManager.instance._view.getItemAt(i) as Evidence;
					if (evidence)
					{
						if (evidence._id == e.result._id)
						{
							evidence.data.tr=e.result.data.tr;
						}
					}
				}
			}

			private function onTranslateFault(e:FaultEvent):void
			{
				trace("translation fault");
			}


			private function onTranslate(e:Event):void
			{
				if (data && !data.data._grid)
				{
					if (!mainView.translation)
					{
						contentTxt.visible=contentTxt.includeInLayout=true;
						translationTxt.visible=translationTxt.includeInLayout=false;
						translateLink.visible=translateLink.includeInLayout=false;
					}
					else
					{
						if (LicenseManager.instance.translation)
						{
							contentTxt.visible=contentTxt.includeInLayout=false;
							translationTxt.visible=translationTxt.includeInLayout=true;

							if (translatedContent == '(' + R.get('TRANSLATION_UNAVAILABLE') + ')')
								translateLink.visible=translateLink.includeInLayout=true;
							else
								translateLink.visible=translateLink.includeInLayout=false;
						}
					}
				}

			}
		]]>
	</fx:Script>
	<s:HGroup width="100%"
						height="100%"
						verticalAlign="top">

		<s:VGroup width="50%"
							verticalAlign="middle">
			<s:RichText id="fromTxt"
									width="100%"/>
			<s:RichText id="toTxt"
									width="100%"/>
			<s:HGroup verticalAlign="middle">
				<s:BitmapImage width="16"
											 height="16"
											 source="{ImageClass}"/>
				<s:RichText id="programTxt"
										width="100%"/>
			</s:HGroup>
		</s:VGroup>


		<s:Line height="100%">
			<s:stroke>
				<s:SolidColorStroke color="0xCCCCCC"/>
			</s:stroke>
		</s:Line>
		<s:VGroup width="50%"
							verticalAlign="middle">
			<s:RichText id="incomingTxt"
									visible="false"
									width="100%"
									includeInLayout="false"/>
			<s:RichText id="contentTxt"
									width="100%"
									visible="{data.data._grid==null}"
									includeInLayout="{data.data._grid==null}"/>
			<s:RichText id="translationTxt"
									width="100%"
									visible="{data.data._grid==null}"
									includeInLayout="{data.data._grid==null}"/>
			<s:BorderContainer id="frame"
												 visible="{data.data._grid!=null}"
												 includeInLayout="{data.data._grid!=null}"
												 width="{img.width+(frameWidth*2)}"
												 height="{img.height+(frameWidth*2)}"
												 backgroundColor="0xFFFFFF"
												 borderColor="0xCCCCCC">
				<s:SWFLoader id="spinner"
										 width="30"
										 height="30"
										 x="27"
										 y="27"
										 source="{SpinnerAnimation}"/>
				<s:BitmapImage id="img"
											 width="80"
											 height="80"
											 scaleMode="zoom"
											 x="{frameWidth-1}"
											 y="{frameWidth-1}"
											 visible="false">
				</s:BitmapImage>
			</s:BorderContainer>
			<mx:Text id="translateLink"
							 visible="false"
							 includeInLayout="false"/>
		</s:VGroup>
	</s:HGroup>

</renderers:EvidenceDataRenderer>
