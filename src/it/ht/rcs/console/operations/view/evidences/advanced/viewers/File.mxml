<?xml version="1.0" encoding="utf-8"?>
<s:BorderContainer xmlns:fx="http://ns.adobe.com/mxml/2009"
									 xmlns:s="library://ns.adobe.com/flex/spark"
									 xmlns:mx="library://ns.adobe.com/flex/mx"
									 height="100%"
									 width="100%"
                   borderColor="0xCCCCCC"
                   backgroundColor="0xFFFFFF"
                   backgroundAlpha="1">
	<fx:Script>
		<![CDATA[
			import flash.filesystem.File;
			
			import flashx.textLayout.conversion.TextConverter;
			
			import it.ht.rcs.console.DB;
			import it.ht.rcs.console.evidence.controller.EvidenceManager;
			import it.ht.rcs.console.utils.Size;
			import it.ht.rcs.console.utils.StringUtils;

			private var _evidence:Object;
			private var file:flash.filesystem.File;
			private var stream:URLStream;
			private var extension:String;
			private var request:URLRequest

			[Bindable]
			private var size:String;

			[Bindable]
			public function set evidence(value:Object):void
			{
				_evidence=value;
				if (isNaN(evidence.data.size))
				{
					size="(unknown)"
				}
				else
				{
					size=Size.toHumanBytes(evidence.data.size)
				}
        downloadStatusTxt.text=""
        downloadBtn.label="Download"
			}

			public function get evidence():Object
			{
				return _evidence; //program, path, size
			}

			private function lineBreak(s:String):String
			{
				var result:String=s.replace(new RegExp("\n", "g"), "<br>");
				return result;
			}

			private function getFile():void
			{
				if(downloadBtn.label=="Download")
        {
          var target:String=EvidenceManager.instance.evidenceFilter.target;
          var url:String=DB.hostAutocomplete(Console.currentSession.server) + "grid/" + evidence.data._grid + "?target_id=" + encodeURIComponent(target);
          extension=StringUtils.getExtension(evidence.data.path)
          var fileName:String=evidence.data._grid + encodeURIComponent(target) + "." + extension;// ?? get original filename? (StringUtils.getFilename)
          
          request=new URLRequest(url);
          stream=new URLStream();
          file=flash.filesystem.File.documentsDirectory.resolvePath(fileName);
          file.browseForSave("Download " + fileName);
          file.addEventListener(Event.SELECT, onSelect);
        }
        else if(downloadBtn.label=="Open")
        {
          try
          {
            file.openWithDefaultApplication()
          }
          catch (e:Error)
          {
            downloadStatusTxt.text="Unable to open the file with default application."
          }

        }
			}

			private function onSelect(e:Event):void
			{
        downloadBtn.enabled=false;
				if (file.extension != extension)
				{
					file=new flash.filesystem.File(file.nativePath + "." + extension);
				}
				stream.addEventListener(Event.COMPLETE, onFileDownloaded);
        stream.addEventListener(ProgressEvent.PROGRESS, onDownloadProgress);
        stream.addEventListener(IOErrorEvent.IO_ERROR,onDownloadError);
        stream.addEventListener(SecurityErrorEvent.SECURITY_ERROR ,onDownloadError)
 				stream.load(request);
			}
      
      private function onDownloadProgress(e:ProgressEvent):void
      {
        var perc:int=int((e.bytesLoaded/e.bytesTotal)*100)
        downloadStatusTxt.text="Downloading file..."+perc+" % completed."
      }
      
      private function onDownloadError(e:*):void
      {
        downloadBtn.enabled=true;
        downloadStatusTxt.text="Error downloading file. Try again"
      }

			private function onFileDownloaded(e:Event):void
			{
        downloadBtn.label="Open"
        downloadStatusTxt.text="File downloaded successfully."
        downloadBtn.enabled=true;
				var fileData:ByteArray=new ByteArray();
				stream.readBytes(fileData, 0, stream.bytesAvailable);
				var fileStream:FileStream=new FileStream();
				fileStream.open(file, FileMode.WRITE);
				fileStream.writeBytes(fileData, 0, fileData.length);
				fileStream.close();
       
			}
		]]>
	</fx:Script>
	<s:layout>
		<s:VerticalLayout paddingBottom="10"
											paddingLeft="10"
											paddingRight="10"
											paddingTop="10"/>
	</s:layout>
	<s:RichText id="programTxt"
							width="100%"
							textFlow="{TextConverter.importToFlow('&lt;b&gt;Program: &lt;/b&gt;'+evidence.data.program, TextConverter.TEXT_FIELD_HTML_FORMAT)}"
							fontSize="12"
							visible="{evidence.data.type=='open'}"
							includeInLayout="{evidence.data.type=='open'}"/>
	<s:Line width="100%"
					visible="{evidence.data.type=='open'}"
					includeInLayout="{evidence.data.type=='open'}">
		<s:stroke>
			<s:SolidColorStroke color="0xCCCCCC"/>
		</s:stroke>
	</s:Line>
	<s:RichText id="pathTxt"
							width="100%"
							textFlow="{TextConverter.importToFlow('&lt;b&gt;Path: &lt;/b&gt;'+evidence.data.path, TextConverter.TEXT_FIELD_HTML_FORMAT)}"
							fontSize="12"/>
	<s:Line width="100%">
		<s:stroke>
			<s:SolidColorStroke color="0xCCCCCC"/>
		</s:stroke>
	</s:Line>
	<s:RichText id="sizeTxt"
							width="100%"
							textFlow="{TextConverter.importToFlow('&lt;b&gt;Size: &lt;/b&gt;'+size, TextConverter.TEXT_FIELD_HTML_FORMAT)}"
							fontSize="12"/>
	<s:Line width="100%"
					visible="{evidence.data.type=='capture'}"
					includeInLayout="{evidence.data.type=='capture'}">
		<s:stroke>
			<s:SolidColorStroke color="0xCCCCCC"/>
		</s:stroke>
	</s:Line>
	<s:HGroup visible="{evidence.data.type=='capture'}"
            includeInLayout="{evidence.data.type=='capture'}" verticalAlign="middle">
    <s:Button id="downloadBtn"
              label="Download"
              click="getFile()"/>
    <s:Label id="downloadStatusTxt"/>
  </s:HGroup>
</s:BorderContainer>
