<?xml version="1.0" encoding="utf-8"?>
<s:BorderContainer xmlns:fx="http://ns.adobe.com/mxml/2009"
									 xmlns:s="library://ns.adobe.com/flex/spark"
									 xmlns:mx="library://ns.adobe.com/flex/mx"
									 xmlns:chat="it.ht.rcs.console.operations.view.evidences.advanced.viewers.chat.*"
									 height="100%"
									 width="100%"
									 borderColor="0xCCCCCC"
									 backgroundColor="0xFFFFFF"
									 backgroundAlpha="1">
  <fx:Metadata> 
    [Event(name="change", type="flash.events.Event")]
  </fx:Metadata>
	<fx:Script>
		<![CDATA[
			import flashx.textLayout.conversion.TextConverter;
			
			import it.ht.rcs.console.evidence.controller.EvidenceManager;
			import it.ht.rcs.console.operations.view.evidences.renderers.ChatIcons;
			import it.ht.rcs.console.utils.Size;
			import it.ht.rcs.console.utils.TimeUtils;
			
			import locale.R;
			
			import mx.collections.ArrayCollection;
			
			import spark.components.gridClasses.GridColumn;

			[Bindable]
			private var _evidence:Object;

			[Bindable]
			private var renderMode:String

			[Bindable]
			private var chatFlow:ArrayCollection;
      
      [Bindable]
      private var ImageClass:Class;
      
      [Bindable]
      public var idVisible:Boolean;

			[Bindable]
			public function set evidence(value:Object):void
			{
				_evidence=value;
        if(evidence.data.program.toLowerCase()=="" || evidence.data.program.toLowerCase()==null)
        {
          ImageClass=ChatIcons["chat"]
        }
        
        else if(evidence.data.program.toLowerCase()=="google talk")
        {
          ImageClass=ChatIcons["gtalk"]
        }
        
        else if(evidence.data.program.toLowerCase()=="messenger")
        {
          ImageClass=ChatIcons["bbm"]
        }    
        else
        {
          ImageClass=ChatIcons[evidence.data.program.toLowerCase()]
        }
				chatFlow=EvidenceManager.instance.getChatFlow(evidence.data.program, evidence.data.peer);

				if (evidence.data.program == "Facebook")
				{
					renderMode=TextConverter.TEXT_FIELD_HTML_FORMAT;
				}
				else
				{
					renderMode=TextConverter.PLAIN_TEXT_FORMAT;
				}
        //
        chatGrid.selectedItem=_evidence;
        chatGrid.ensureCellIsVisible(chatGrid.selectedIndex,0)
          
        translateBtn.label="Translate";
        contentColumn.dataField="data.content";
         
			}

			public function get evidence():Object
			{
				return _evidence; //topic, peer, content, program
			}

			private function lineBreak(s:String):String
			{
				var result:String=s.replace(new RegExp("\n", "g"), "<br>");
				return result;
			}

			private function dateLabelFunction(item:Object, column:GridColumn):String
			{
				return TimeUtils.timestampFormatter(item[column.dataField] * 1000);
			}
      
      private function onSelectionChange():void
      {
        trace(chatGrid.selectedItem.data.content);
        evidence=chatGrid.selectedItem;
        dispatchEvent(new Event("change"));
      }
      
      private function translate():void
      {
        if(translateBtn.label=="Translate")
        {
          translateBtn.label="Show original";
          contentColumn.dataField="data.tr";
          //contentTxt.textFlow = TextConverter.importToFlow("<b>Content: </b><br>"+lineBreak(evidence.data.tr), TextConverter.TEXT_FIELD_HTML_FORMAT)
        }
        else
        {
          translateBtn.label="Translate";
          contentColumn.dataField="data.content";
          //contentTxt.textFlow = TextConverter.importToFlow("<b>Content: </b><br>"+lineBreak(evidence.data.content), TextConverter.TEXT_FIELD_HTML_FORMAT)
        }
      }
      
		]]>
	</fx:Script>
	<s:layout>
		<s:VerticalLayout paddingBottom="10"
											paddingLeft="10"
											paddingRight="10"
											paddingTop="10"/>
	</s:layout>
  <s:RichText id="idTxt"
              width="100%"
              textFlow="{TextConverter.importToFlow('&lt;b&gt;Id: &lt;/b&gt;'+evidence._id, TextConverter.TEXT_FIELD_HTML_FORMAT)}"
              fontSize="12" visible="{idVisible}" includeInLayout="{idVisible}"/>
  <s:Line width="100%" visible="{idVisible}" includeInLayout="{idVisible}">
    <s:stroke>
      <s:SolidColorStroke color="0xCCCCCC"/>
    </s:stroke>
  </s:Line>
	<s:RichText id="topicTxt"
							width="100%"
							textFlow="{TextConverter.importToFlow('&lt;b&gt;Topic: &lt;/b&gt;'+evidence.data.topic, TextConverter.TEXT_FIELD_HTML_FORMAT)}"
							fontSize="12"/>
	<s:Line width="100%">
		<s:stroke>
			<s:SolidColorStroke color="0xCCCCCC"/>
		</s:stroke>
	</s:Line>
	<s:RichText id="peerTxt"
							width="100%"
							textFlow="{TextConverter.importToFlow('&lt;b&gt;Peer: &lt;/b&gt;'+evidence.data.peer, TextConverter.TEXT_FIELD_HTML_FORMAT)}"
							fontSize="12"/>
	<s:Line width="100%">
		<s:stroke>
			<s:SolidColorStroke color="0xCCCCCC"/>
		</s:stroke>
	</s:Line>
  <s:HGroup verticalAlign="middle" width="100%">
    <s:BitmapImage width="16"
                   height="16"
                   source="{ImageClass}"/>
	<s:RichText id="programTxt"
							width="100%"
							textFlow="{TextConverter.importToFlow('&lt;b&gt;Program: &lt;/b&gt;'+evidence.data.program, TextConverter.TEXT_FIELD_HTML_FORMAT)}"
							fontSize="12"/>
    <s:Spacer width="100%"/>
    <s:Button label="Translate" id="translateBtn" click="translate()" visible="{evidence.data.tr!=null &amp;&amp; evidence.data.tr!=''}"/>
    </s:HGroup>
	<s:Line width="100%">
		<s:stroke>
			<s:SolidColorStroke color="0xCCCCCC"/>
		</s:stroke>
	</s:Line>

	<!--	<s:RichText id="contentLabelTxt"
								textFlow="{TextConverter.importToFlow('&lt;b&gt;Content: &lt;/b&gt;', TextConverter.TEXT_FIELD_HTML_FORMAT)}"
								fontSize="12"/>
		<s:Scroller height="100%"
								width="100%">
			<s:RichEditableText editable="false"
													id="contentTxt"
													textFlow="{TextConverter.importToFlow(lineBreak(evidence.data.content), renderMode)}"
													fontSize="12"/>
		</s:Scroller>-->
	<!-- format the grid -->
	<s:DataGrid dataProvider="{chatFlow}"
							width="100%"
							height="100%"
							skinClass="it.ht.rcs.console.skins.ChatSkin"
							selectedItem="{_evidence}"
							borderVisible="false"
							borderAlpha="0"
							variableRowHeight="true" rollOverColor="0xFFFFFF" selectionColor="0xFFFFFF" id="chatGrid" selectionChange="onSelectionChange()">
		<s:columns>
			<s:ArrayList>
			<!--	<s:GridColumn dataField="da"
											headerText="{R.get('DATE_ACQUIRED')}"
											labelFunction="dateLabelFunction"/>-->
				<s:GridColumn dataField="data.content"
											headerText="peer" id="contentColumn"
											resizable="false"
											itemRenderer="it.ht.rcs.console.operations.view.evidences.advanced.viewers.chat.ChatEntryRenderer"/>
        

			</s:ArrayList>
		</s:columns>
	</s:DataGrid>
</s:BorderContainer>
