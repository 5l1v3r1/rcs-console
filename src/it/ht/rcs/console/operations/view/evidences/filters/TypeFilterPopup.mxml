<?xml version="1.0" encoding="utf-8"?>
<filters:AbstractFilterPopup xmlns:fx="http://ns.adobe.com/mxml/2009"
                             xmlns:s="library://ns.adobe.com/flex/spark"
                             xmlns:mx="library://ns.adobe.com/flex/mx"
                             xmlns:xt="library://ns.tink.ws/flex/mx"
                             xmlns:filters="it.ht.rcs.console.operations.view.evidences.filters.*"
                             creationComplete="init()" show="show()">
  
  <s:VGroup paddingBottom="10" paddingLeft="10" paddingRight="10" paddingTop="10">
    
    <filters:TypeFilterItemRenderer id="addressbook" label="addressbook" click="checkboxClick(addressbook)"/>
    <filters:TypeFilterItemRenderer id="application" label="application" click="checkboxClick(application)"/>
    <filters:TypeFilterItemRenderer id="calendar" label="calendar" click="checkboxClick(calendar)"/>
    <filters:TypeFilterItemRenderer id="call" label="call" click="checkboxClick(call)"/>
    
    <filters:TypeFilterItemRenderer id="camera" label="camera" click="checkboxClick(camera)"/>
    <filters:TypeFilterItemRenderer id="chat" label="chat" click="checkboxClick(chat)"/>
    <filters:TypeFilterItemRenderer id="clipboard" label="clipboard" click="checkboxClick(clipboard)"/>
    
    <filters:TypeFilterItemRenderer id="device" label="device" click="checkboxClick(device)"/>
    <filters:TypeFilterItemRenderer id="file" label="file" click="checkboxClick(file)"/>
    <filters:TypeFilterItemRenderer id="keylog" label="keylog" click="checkboxClick(keylog)"/>
    
    <filters:TypeFilterItemRenderer id="messages" label="messages" click="checkboxClick(messages)"/>
    <filters:TypeFilterItemRenderer id="mic" label="mic" click="checkboxClick(mic)"/>
    <filters:TypeFilterItemRenderer id="mouse" label="mouse" click="checkboxClick(mouse)"/>
    <filters:TypeFilterItemRenderer id="password" label="password" click="checkboxClick(password)"/>
    
    <filters:TypeFilterItemRenderer id="position" label="position" click="checkboxClick(position)"/>
    <filters:TypeFilterItemRenderer id="print" label="print" click="checkboxClick(print)"/>
    <filters:TypeFilterItemRenderer id="screenshot" label="screenshot" click="checkboxClick(screenshot)"/>
    <filters:TypeFilterItemRenderer id="url" label="url" click="checkboxClick(url)"/>
    
  </s:VGroup>
  
  <fx:Script>
    <![CDATA[
      import it.ht.rcs.console.events.FilterEvent;
      
      import mx.core.FlexGlobals;
      import mx.events.FlexEvent;
      import mx.utils.StringUtil;
      
      private var checks:Array;
      
      private function init():void
      {
        checks = [addressbook, application, calendar, call, camera, chat, clipboard, device, file,
                  keylog, messages, mic, mouse, password, position, print, screenshot, url];
      }
      
      override public function commit(fireEvent:Boolean=true):void
      {
        var values:Array = getValues();
        hasFilter = values.length > 0;
        hasFilter ? filter[property] = values : delete(filter[property]);
        visible = false;
        if (fireEvent)
          FlexGlobals.topLevelApplication.dispatchEvent(new FilterEvent(FilterEvent.FILTER_CHANGED));
      }
      
      private function getValues():Array
      {
        var toReturn:Array = [];
        
        checks.forEach(function(item:TypeFilterItemRenderer, index:int, array:Array):void {
          if (item.checkbox.selected)
            toReturn.push(item.id);
        });
        
        return toReturn;
      }
      
      override public function reset(fireEvent:Boolean=true):void
      {
        deselectAll();
        commit(fireEvent);
      }
      
      private function checkboxClick(item:TypeFilterItemRenderer):void
      {
//        if (item === all) {
//          deselectAll();
//          select(item);
//        } else {
//          select(all, false);
//        }
      }
      
      private function deselectAll():void
      {
        checks.forEach(function(item:TypeFilterItemRenderer, index:int, array:Array):void {
          item.checkbox.selected = false;
        });
      }
      
      private function show():void
      {
        if (!filter.hasOwnProperty(property)) return;
        checks.forEach(function(item:TypeFilterItemRenderer, index:int, array:Array):void {
          item.checkbox.selected =  filter[property].indexOf(item.id) != -1;
        });
      }
    ]]>
  </fx:Script>
  
</filters:AbstractFilterPopup>