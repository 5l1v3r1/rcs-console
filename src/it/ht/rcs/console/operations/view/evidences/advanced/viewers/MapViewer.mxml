<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009"
				 xmlns:s="library://ns.adobe.com/flex/spark"
				 xmlns:mx="library://ns.adobe.com/flex/mx"
				 xmlns:maps="com.google.maps.*"
				 width="100%"
				 height="100%">
	<maps:Map xmlns:maps="com.google.maps.*"
						id="map"
						mapevent_mapready="onMapReady(event)"
						width="100%"
						height="100%"
						key="ABQIAAAA8fmTpYQsyimBWFWKgeE9PBRhMg83CBLwD9y4vh6Mu8HzQS3H_RRayLm54B1SF17x6N9sYwYVwJV_FQ"
						url="http://www.hackingteam.it/"
						sensor="false"
						accessibilityDescription=""/>
  <fx:Metadata> 
    [Event(name="change", type="flash.events.Event")]
  </fx:Metadata>
	<fx:Script>
		<![CDATA[
			import com.google.maps.LatLng;
			import com.google.maps.LatLngBounds;
			import com.google.maps.Map;
			import com.google.maps.MapEvent;
			import com.google.maps.MapMouseEvent;
			import com.google.maps.MapType;
			import com.google.maps.MapZoomEvent;
			import com.google.maps.PaneId;
			import com.google.maps.controls.MapTypeControl;
			import com.google.maps.controls.PositionControl;
			import com.google.maps.controls.ZoomControl;
			import com.google.maps.interfaces.IOverlay;
			import com.google.maps.interfaces.IPane;
			import com.google.maps.overlays.GroundOverlay;
			import com.google.maps.overlays.GroundOverlayOptions;
			import com.google.maps.overlays.Marker;
			import com.google.maps.overlays.MarkerOptions;
			
			import it.ht.rcs.console.operations.view.evidences.advanced.viewers.map.CustomMarker;

			private var position:LatLng;
			private var _mapPane:IPane;
			private var _scale:Number;
			private var _centre:LatLng;
			private var _circleOverlay:IOverlay;


			//Styling
			private var circleFillColor:uint=0xFFFF00;
			private var circleFillAlpha:Number=0.2;
			private var circleBorderTickness:int=0.2;
			private var circleBorderFillColor:uint=0xFF0000;
			private var circleBorderFillAlpha:Number=0.5;

			private var _positions:Array=new Array();
			private var _ready:Boolean;
			private var _overlays:Array=new Array();

			private var _selectedPosition:Object;
			private var _markers:Array=new Array();

			//HANDLE MAP LOADING

			private function onMapReady(event:Event):void
			{

				trace("map ready")

				map.addControl(new ZoomControl());
				map.addControl(new PositionControl());
				map.addControl(new MapTypeControl())

				//range error

				_mapPane=map.getPaneManager().getPaneAt(PaneId.PANE_MAP);

				map.addEventListener(MapZoomEvent.ZOOM_CHANGED, onMapZoomed);


				if (_positions.length > 0)
				{
					drawPositions()
				}
				_ready=true;

			}

			public function set positions(value:Array):void
			{
				_positions=value;
       
				if (_ready)
					drawPositions();

			}

			private function onMarkerClick(e:MapMouseEvent):void
			{
				var marker:Marker=e.currentTarget as Marker;
				var customMarker:CustomMarker=marker.getOptions().icon as CustomMarker;
				for (var i:int=0; i < _positions.length; i++)
				{
					if (customMarker.data == _positions[i].evidence)
					{
						selectedPosition=_positions[i]
					}
				}

			}


			private function drawPositions():void
			{
				_markers=new Array()
				var i:int=0;
				for (i=0; i < _overlays.length; i++)
				{
					map.removeOverlay(_overlays[i] as IOverlay);
				}

				var bounds:LatLngBounds=new LatLngBounds();
				_centre=new LatLng(_positions[0].lat, _positions[0].lng);
				map.setCenter(_centre, 14, MapType.NORMAL_MAP_TYPE);
				_overlays=new Array()
				for (i=0; i < _positions.length; i++)
				{
					var coordinates:LatLng=new LatLng(_positions[i].lat, _positions[i].lng)
					var marker:Marker=new Marker(coordinates, new MarkerOptions({icon: new CustomMarker(_positions[i].evidence)}));
					marker.addEventListener(MapMouseEvent.CLICK, onMarkerClick)

					marker.foreground.alpha=1

					bounds.extend(coordinates);
					drawCircle(_positions[i].range / 1000, coordinates);
					_overlays.push(marker);
					_markers.push(marker);
					map.addOverlay(marker);
				}
        selectedPosition=_positions[0]
				map.setCenter(bounds.getCenter(), map.getBoundsZoomLevel(bounds));
			}


			private function drawCircle(radiusKm:Number, position:LatLng):void
			{

				_scale=calculateMapScale();
				var shape:Shape=new Shape();
				var overlay:GroundOverlay;
				var bounds:LatLngBounds;
				var centrePoint:Point;
				var topLeft:LatLng;
				var bottomRight:LatLng;
				var options:GroundOverlayOptions;
				var circleWidth:Number=radiusKm * 2 * _scale;

				shape.graphics.lineStyle(circleBorderTickness, circleBorderFillColor, circleBorderFillAlpha);
				shape.graphics.beginFill(circleFillColor, circleFillAlpha);
				shape.graphics.drawCircle(circleWidth * .5, circleWidth * .5, circleWidth);
				shape.graphics.endFill();

				centrePoint=_mapPane.fromLatLngToPaneCoords(position);
				topLeft=_mapPane.fromPaneCoordsToLatLng(new Point(centrePoint.x - circleWidth * .5, centrePoint.y - circleWidth * .5));
				bottomRight=_mapPane.fromPaneCoordsToLatLng(new Point(centrePoint.x + circleWidth * .5, centrePoint.y + circleWidth * .5));
				bounds=new LatLngBounds(topLeft, bottomRight);

				/*  if (_circleOverlay != null)
				 {
					 map.removeOverlay(_circleOverlay);

					 _circleOverlay = null;
				 }
					*/
				if (circleWidth < map.height)
				{
					options=new GroundOverlayOptions();
					options.applyProjection=true;
					_circleOverlay=new GroundOverlay(shape, bounds, options);
					map.addOverlay(_circleOverlay);
					_overlays.push(_circleOverlay)
				}
				else
				{

					// the circle has gone outside the viewable map area.
				}
			}

			private function calculateMapScale():Number
			{
				var topLeft:LatLng;
				var bottomLeft:LatLng;
				var scale:Number;
				var distance:Number;

				topLeft=_mapPane.fromPaneCoordsToLatLng(new Point(0, 0));
				bottomLeft=_mapPane.fromPaneCoordsToLatLng(new Point(0, map.height));
				distance=topLeft.distanceFrom(bottomLeft) / 1000;
				scale=map.height / distance;

				return scale;
			}

			private function onMapZoomed(event:MapEvent):void
			{
				_scale=calculateMapScale();
			}

			public function set selectedPosition(value:Object):void
			{
				if (_selectedPosition != value)
				{
					_selectedPosition=value;
					for (var i:int=0; i < _markers.length; i++)
					{
						var marker:Marker=_markers[i] as Marker;
						var customMarker:CustomMarker=marker.getOptions().icon as CustomMarker;
						if (customMarker.data == _selectedPosition.evidence)
						{
							customMarker.alpha=1;
						}
						else
						{
							customMarker.alpha=0.3;
						}
					}
          dispatchEvent(new Event("change"))
				}
			}

			public function get selectedPosition():Object
			{
				return _selectedPosition;
			}
		]]>
	</fx:Script>
</s:Group>
