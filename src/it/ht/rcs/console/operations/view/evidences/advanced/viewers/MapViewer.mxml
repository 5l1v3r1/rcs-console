<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
         xmlns:s="library://ns.adobe.com/flex/spark" 
         xmlns:mx="library://ns.adobe.com/flex/mx"
         xmlns:maps="com.google.maps.*"
         width="100%" height="100%">
  <maps:Map xmlns:maps="com.google.maps.*"
            id="map"
            mapevent_mapready="onMapReady(event)"
            width="100%"
            height="100%"
            key="ABQIAAAA8fmTpYQsyimBWFWKgeE9PBRhMg83CBLwD9y4vh6Mu8HzQS3H_RRayLm54B1SF17x6N9sYwYVwJV_FQ"
            url="http://www.hackingteam.it/"
            sensor="false"
            accessibilityDescription=""/>
  <fx:Script>
    <![CDATA[
      
      import com.google.maps.LatLng;
      import com.google.maps.LatLngBounds;
      import com.google.maps.Map;
      import com.google.maps.MapEvent;
      import com.google.maps.MapType;
      import com.google.maps.MapZoomEvent;
      import com.google.maps.PaneId;
      import com.google.maps.controls.MapTypeControl;
      import com.google.maps.controls.PositionControl;
      import com.google.maps.controls.ZoomControl;
      import com.google.maps.interfaces.IOverlay;
      import com.google.maps.interfaces.IPane;
      import com.google.maps.overlays.GroundOverlay;
      import com.google.maps.overlays.GroundOverlayOptions;
      import com.google.maps.overlays.Marker;

      private var position:LatLng;
      private var _mapPane:IPane;
      private var _scale:Number;
      private var _centre:LatLng;
      private var _circleOverlay:IOverlay;
      
      
      //Styling
      private var circleFillColor:uint=0xFF0000;
      private var circleFillAlpha:Number=0.3;
      private var circleBorderTickness:int=1;
      private var circleBorderFillColor:uint=0x000000;
      private var circleBorderFillAlpha:Number=1;
      
      private var _positions:Array=new Array();
      private var _ready:Boolean;
      
      //HANDLE MAP LOADING
      
      private function onMapReady(event:Event):void
      {
        
       trace("map ready")
        
        map.addControl(new ZoomControl());
        map.addControl(new PositionControl());
        map.addControl(new MapTypeControl())
       
        //range error
        
        _mapPane = map.getPaneManager().getPaneAt(PaneId.PANE_MAP);
       
        map.addEventListener(MapZoomEvent.ZOOM_CHANGED, onMapZoomed);
        
        if(_positions.length>0)
        {
          drawPositions()
        }
        _ready=true;
        
      }
      
      public function set positions(value:Array):void
      {
        trace("draw positions")
        
        _positions=value;
        if(_ready)
        {
          drawPositions()
        }
      }
      
      private function drawPositions():void
      {
        var bounds:LatLngBounds = new LatLngBounds ();
        _centre=new LatLng(_positions[0].lat, _positions[0].lng);
        map.setCenter(_centre, 14, MapType.NORMAL_MAP_TYPE);
        for(var i:int=0;i<_positions.length;i++)
        {
          var coordinates:LatLng=new LatLng(_positions[i].lat, _positions[i].lng)
          var marker:Marker=new Marker(coordinates);
          bounds.extend( coordinates);
          drawCircle(_positions[i].range / 1000,coordinates)
          map.addOverlay(marker)
          
        }
        
        //  Fit these bounds to the map
        map.setCenter(bounds.getCenter(), map.getBoundsZoomLevel(bounds));
      }
      
      
      private function drawCircle(radiusKm:Number, position:LatLng):void
      {
        
        _scale=calculateMapScale();
        var shape:Shape=new Shape();
        var overlay:GroundOverlay;
        var bounds:LatLngBounds;
        var centrePoint:Point;
        var topLeft:LatLng;
        var bottomRight:LatLng;
        var options:GroundOverlayOptions;
        var circleWidth:Number=radiusKm * 2 * _scale;
        
        shape.graphics.lineStyle(circleBorderTickness,circleBorderFillColor,circleBorderFillAlpha);
        shape.graphics.beginFill(circleFillColor,circleFillAlpha);
        shape.graphics.drawCircle(circleWidth*.5, circleWidth*.5, circleWidth);
        shape.graphics.endFill();
        
        centrePoint = _mapPane.fromLatLngToPaneCoords(position);
        topLeft = _mapPane.fromPaneCoordsToLatLng(new Point(centrePoint.x - circleWidth*.5, centrePoint.y - circleWidth*.5));
        bottomRight = _mapPane.fromPaneCoordsToLatLng(new Point(centrePoint.x + circleWidth*.5, centrePoint.y + circleWidth*.5));
        bounds = new LatLngBounds(topLeft, bottomRight);
        
       /*  if (_circleOverlay != null)
        {
          map.removeOverlay(_circleOverlay);
          
          _circleOverlay = null;
        }
         */
        if (circleWidth < map.height)
        {
          options = new GroundOverlayOptions();
          options.applyProjection = true;
          _circleOverlay = new GroundOverlay(shape, bounds, options);  
          map.addOverlay(_circleOverlay);
        }
        else
        {
          // show some text somewhere to tell the user that
          // the circle has gone outside the viewable map area.
        }
      }
      
      private function calculateMapScale():Number
      {
        var topLeft:LatLng;
        var bottomLeft:LatLng;
        var scale:Number;
        var distance:Number;
        
        topLeft = _mapPane.fromPaneCoordsToLatLng(new Point(0,0));
        bottomLeft = _mapPane.fromPaneCoordsToLatLng(new Point(0, map.height));
        distance = topLeft.distanceFrom(bottomLeft) / 1000 ; 
        scale = map.height / distance;
        
        return scale;
      }
      
      private function onMapZoomed(event:MapEvent):void
      {
        _scale = calculateMapScale();
      }
      
    ]]>
  </fx:Script>
</s:Group>
