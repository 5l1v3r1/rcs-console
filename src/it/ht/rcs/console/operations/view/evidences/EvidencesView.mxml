<?xml version="1.0" encoding="utf-8"?>
<s:VGroup xmlns:fx="http://ns.adobe.com/mxml/2009"
          xmlns:s="library://ns.adobe.com/flex/spark"
          xmlns:mx="library://ns.adobe.com/flex/mx"
          xmlns:evidences="it.ht.rcs.console.operations.view.evidences.*"
          width="100%" height="100%" addedToStage="onAddedToStage()" horizontalAlign="center"
          removedFromStage="onRemovedFromStage()">

  <fx:Script>
    <![CDATA[
      import it.ht.rcs.console.events.FilterEvent;
      import it.ht.rcs.console.evidence.controller.EvidenceManager;
      import it.ht.rcs.console.evidence.model.Evidence;
      import it.ht.rcs.console.operations.view.OperationsSection;
      
      import mx.core.FlexGlobals;
      import mx.managers.PopUpManager;
      
      import spark.events.GridEvent;
      
      [Bindable]
      public var section:OperationsSection;
      
      
      private function onAddedToStage():void
      {
        EvidenceManager.instance.evidenceFilter.target = section.stateManager.selectedTarget._id;
        if (section.stateManager.selectedAgent != null)
          EvidenceManager.instance.evidenceFilter.agent = section.stateManager.selectedAgent._id;
        else
          delete EvidenceManager.instance.evidenceFilter.agent;
        
        FlexGlobals.topLevelApplication.addEventListener(FilterEvent.FILTER_CHANGED, onFilterChanged);
        //EvidenceManager.instance.addEventListener(DataLoadedEvent.DATA_LOADED, onDataLoaded);
        EvidenceManager.instance.listenRefresh();
        EvidenceManager.instance.refresh();
       
      }
      
      private function onRemovedFromStage():void
      {
        FlexGlobals.topLevelApplication.removeEventListener(FilterEvent.FILTER_CHANGED, onFilterChanged);
        //EvidenceManager.instance.removeEventListener(DataLoadedEvent.DATA_LOADED, onDataLoaded);
        EvidenceManager.instance.unlistenRefresh();
      }
      
      private function onFilterChanged(event:FilterEvent):void
      {
        EvidenceManager.instance.refresh();
      }
      
      private function onGridChange():void
      {
        
        actionBar.selectedObjects = evidenceDg.selectedItems;
       
      }
      
      private function toggleState():void
      {
        
        if(currentState=="default")
        {
         
          currentState="count";
        }
        else
        {
          currentState="default"
        }
        actionBar.toggleSummaryButton(currentState);
      }

      private function onEditNote(e:Event):void
      {
        if(evidenceDg.visible)
        {
         evidenceDg.editNote();
        }
        //TODO - NOTE in advanced mode
      }
      
      private function onGridDoubleClick(e:GridEvent):void
      {
        var evidence:Evidence=e.currentTarget.dataProvider.getItemAt(e.rowIndex) as Evidence;
        viewer.currentItem=evidence;
        viewer.currentIndex=e.rowIndex;
        viewer.visible=true;
        viewer.includeInLayout=true;
        evidenceDg.visible=false;
        evidenceDg.includeInLayout=false;
        counter.visible=false;
        var singleSelection: Vector.<Object>=new Vector.<Object>
        singleSelection.push(evidence)
        actionBar.selectedObjects=singleSelection;
      }
      
      private function onViewerSelection():void
      {
        var singleSelection: Vector.<Object>=new Vector.<Object>
        singleSelection.push(viewer.currentItem)
        actionBar.selectedObjects=singleSelection;
      }
      
      private function onViewerClose():void
      {
        viewer.visible=false;
        viewer.includeInLayout=false;
        evidenceDg.visible=true;
        evidenceDg.includeInLayout=true;
        counter.visible=true;
        actionBar.selectedObjects = evidenceDg.selectedItems;
      }
      
    ]]>
  </fx:Script>
  
  <s:states>
    <s:State name="default"/>
    <s:State name="count"/>
  </s:states>
  
  <evidences:EvidenceActionBar id="actionBar" editNote="onEditNote(event)" summary="toggleState()" counts="{EvidenceManager.instance.counts}"/>
  
  <evidences:EvidenceGrid id="evidenceDg" dataProvider="{EvidenceManager.instance._view}"
                          selectionChange="onGridChange()" selectionMode="multipleRows" gridDoubleClick="onGridDoubleClick(event)"
                          />
  <evidences:EvidenceAdvancedViewer id="viewer" visible="false" includeInLayout="false" close="onViewerClose()" dataProvider="{EvidenceManager.instance._view}" selectionChange="onViewerSelection()"/>
  <evidences:EvidenceCountPanel counts="{EvidenceManager.instance.counts}" includeIn="count" id="countPanel" width="100%"/>
  <evidences:EvidenceCounter id="counter" counts="{EvidenceManager.instance.counts}" filtered="{EvidenceManager.instance._view.length}" click="toggleState()"/>

</s:VGroup>