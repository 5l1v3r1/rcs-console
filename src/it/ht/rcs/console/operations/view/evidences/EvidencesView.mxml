<?xml version="1.0" encoding="utf-8"?>
<s:VGroup xmlns:fx="http://ns.adobe.com/mxml/2009"
          xmlns:s="library://ns.adobe.com/flex/spark"
          xmlns:mx="library://ns.adobe.com/flex/mx"
          xmlns:evidences="it.ht.rcs.console.operations.view.evidences.*"
          width="100%" height="100%" addedToStage="onAddedToStage()" horizontalAlign="center"
          removedFromStage="onRemovedFromStage()">

  <fx:Script>
    <![CDATA[
      import it.ht.rcs.console.events.DataLoadedEvent;
      import it.ht.rcs.console.events.FilterEvent;
      import it.ht.rcs.console.evidence.controller.EvidenceManager;
      import it.ht.rcs.console.evidence.model.Evidence;
      import it.ht.rcs.console.operations.view.OperationsSection;
      
      import mx.core.FlexGlobals;
      import mx.managers.PopUpManager;
      
      import spark.events.GridEvent;
      
      [Bindable]
      public var section:OperationsSection;
      
      
      private function onAddedToStage():void
      {
        resetFilter();
        
        EvidenceManager.instance.evidenceFilter.target = section.stateManager.selectedTarget._id;
        if (section.stateManager.selectedAgent != null)
          EvidenceManager.instance.evidenceFilter.agent = section.stateManager.selectedAgent._id;
        else
          delete EvidenceManager.instance.evidenceFilter.agent;
        
        FlexGlobals.topLevelApplication.dispatchEvent(new FilterEvent(FilterEvent.REBUILD));
        
        FlexGlobals.topLevelApplication.addEventListener(FilterEvent.FILTER_CHANGED, onFilterChanged);
        EvidenceManager.instance.addEventListener(DataLoadedEvent.DATA_LOADED, onDataLoaded);
        EvidenceManager.instance.listenRefresh();
        EvidenceManager.instance.refresh();
       
       
        trace("evidence view added to stage")
      }
      
      private function resetFilter():void
      {
        var filter:Object = EvidenceManager.instance.evidenceFilter;
        filter.date = 'dr';
        delete(filter.from);
        delete(filter.to);
        delete(filter.rel);
        delete(filter.type);
        delete(filter.info);
      }
      
      private function onDataLoaded(e:DataLoadedEvent):void
      { 
        evidenceDg.invalidateDisplayList();
        evidenceDg.dataProvider=EvidenceManager.instance._view;
        evidenceDg.visible=true;
        if(viewer.visible)
        {
          viewer.visible=viewer.includeInLayout=false;
          evidenceDg.visible=evidenceDg.includeInLayout=true;
          counter.visible=true;
          notice.visible=notice.includeInLayout=true;
        }
      }
      
      private function onRemovedFromStage():void
      {
        FlexGlobals.topLevelApplication.removeEventListener(FilterEvent.FILTER_CHANGED, onFilterChanged);
        EvidenceManager.instance.unlistenRefresh();
        trace("evidence view removed from stage")
        evidenceDg.selectedItems=new Vector.<Object>
        actionBar.selectedObjects=evidenceDg.selectedItems;
        currentState="default";
        actionBar.toggleSummaryButton(currentState);
        evidenceDg.dataProvider=null;
        if(viewer.visible)
        {
        closeViewer();
        actionBar.toggleDetailButton();
        }
      }
      
      private function onFilterChanged(event:FilterEvent):void
      {
        EvidenceManager.instance.refresh();
      }
      
      private function onGridChange():void
      {

        
        //actionBar.selectedObjects = evidenceDg.selectedItems;
      }
      
      private function toggleState():void
      {
        
        if(currentState=="default")
        {
         
          currentState="count";
        }
        else
        {
          currentState="default"
        }
        actionBar.toggleSummaryButton(currentState);
      }

      private function onEditNote(e:Event):void
      {
        if(evidenceDg.visible) evidenceDg.editNote();
        else if(viewer.visible) viewer.editNote();
      }
      
      private function onGridDoubleClick(e:GridEvent):void
      {
       if(e.columnIndex==7)//note column index
       {
         evidenceDg.editNote();
         return;
       }
       else 
       {
         if(e.rowIndex!=-1)
         {
           var evidence:Evidence=e.currentTarget.dataProvider.getItemAt(e.rowIndex) as Evidence;
           viewer.currentItem=evidence;
           viewer.currentIndex=e.rowIndex;
           viewer.visible=viewer.includeInLayout=true;
           evidenceDg.visible=evidenceDg.includeInLayout=false;
           counter.visible=false;
           var singleSelection: Vector.<Object>=new Vector.<Object>
           singleSelection.push(evidence)
           actionBar.selectedObjects=singleSelection;
           notice.visible=notice.includeInLayout=false;
           actionBar.toggleDetailButton();
         }
       }
      }
      //TODO -OPTIMIZE CODE
      private function showDetail():void
      {
        if(!viewer.visible)
        {
          var evidence:Evidence=evidenceDg.selectedItems[0] as Evidence;
          viewer.currentItem=evidence;
          viewer.currentIndex=evidenceDg.selectedIndices[0]
          viewer.visible=viewer.includeInLayout=true;
          evidenceDg.visible=evidenceDg.includeInLayout=false;
          counter.visible=false;
          var singleSelection: Vector.<Object>=new Vector.<Object>
          singleSelection.push(evidence)
          actionBar.selectedObjects=singleSelection;
          notice.visible=notice.includeInLayout=false;
         
        }
        else
        {
          closeViewer()
        }
        actionBar.toggleDetailButton();
       
      }
      private function onViewerSelection():void
      {
        var singleSelection: Vector.<Object>=new Vector.<Object>
        singleSelection.push(viewer.currentItem)
        //actionBar.selectedObjects=singleSelection;
        evidenceDg.selectedItems=singleSelection;
      }
      
      private function closeViewer():void
      {
        viewer.visible=viewer.includeInLayout=false;
        evidenceDg.selectedIndex=viewer.currentIndex;
        evidenceDg.visible=evidenceDg.includeInLayout=true;
        counter.visible=true;
        actionBar.selectedObjects = evidenceDg.selectedItems;
        notice.visible=notice.includeInLayout=true;
        
      }
      
      private function onGridDataChange():void
      {
        evidenceDg.selectedItems=new Vector.<Object>
        actionBar.selectedObjects=evidenceDg.selectedItems;
      }
    ]]>
  </fx:Script>
  
  <s:states>
    <s:State name="default"/>
    <s:State name="count"/>
  </s:states>
  
  <evidences:EvidenceActionBar id="actionBar" editNote="onEditNote(event)" summary="toggleState()" counts="{EvidenceManager.instance.counts}" selectedObjects="{evidenceDg.selectedItems}" detail="showDetail()"/>
  <evidences:FilterNotice id="notice"/>
  <evidences:EvidenceGrid id="evidenceDg" selectionChange="onGridChange()" selectionMode="multipleRows" gridDoubleClick="onGridDoubleClick(event)" dataChange="onGridDataChange()"/>
  <evidences:EvidenceAdvancedViewer id="viewer" visible="false" includeInLayout="false" close="closeViewer()" dataProvider="{EvidenceManager.instance._view}" selectionChange="onViewerSelection()"/>
  <evidences:EvidenceCountPanel counts="{EvidenceManager.instance.counts}" includeIn="count" id="countPanel" width="100%"/>
  <evidences:EvidenceCounter id="counter" counts="{EvidenceManager.instance.counts}" filtered="{EvidenceManager.instance._view.length}" click="toggleState()"/>

</s:VGroup>