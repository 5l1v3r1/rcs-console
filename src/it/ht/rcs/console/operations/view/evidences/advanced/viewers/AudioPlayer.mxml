<?xml version="1.0" encoding="utf-8"?>
<s:VGroup xmlns:fx="http://ns.adobe.com/mxml/2009"
					xmlns:s="library://ns.adobe.com/flex/spark"
					xmlns:mx="library://ns.adobe.com/flex/mx"
          xmlns:utils="it.ht.rcs.console.utils.*"
          xmlns:viewers="it.ht.rcs.console.operations.view.evidences.advanced.viewers.*"
					height="100%"
					width="100%"
					creationComplete="init()"
          hide="onHide()">
	<fx:Script>
		<![CDATA[
      import mx.core.UIComponent;
      import it.ht.rcs.console.utils.TimeUtils;
      import flashx.textLayout.conversion.TextConverter;
      
      
      private var _sound:Sound;
      private var _channel:SoundChannel;
      private var _playingTime:int;
      private var _looper:Timer = new Timer(0,0);
      private var _pausePoint:Number=0;
      private var _isPlaying:Boolean=false;
      private var _soundTransform:SoundTransform;
      
      [Bindable]
      [Embed (source="/img/mediaplayers/play.png" )]
      public var PlayIcon:Class;
      [Bindable]
      [Embed (source="/img/mediaplayers/pause.png" )]
      public var PauseIcon:Class;
      [Bindable]
      [Embed (source="/img/mediaplayers/stop.png" )]
      public var StopIcon:Class;
      
      [Bindable]
			private var _url:String;

			public function set url(value:String):void
			{
				_url=value;
      }

			public function get url():String
			{
				return _url;
			}
      
      private function init():void
      {
        _looper.addEventListener( TimerEvent.TIMER, onTime );
        
        //styles
        
        spectrumMonitor.addEventListener(SoundSpectrumMonitor.SELECTION, onSpectrumSelection)
        _soundTransform=new SoundTransform()
      }
      [BINDABLE]
      public function set sound(value:String):void
      {
        if(_channel) {
          _channel.stop();
          
        }
        stopBtn.enabled=false;
        playBtn.enabled=false;
        removeEventListener( Event.ENTER_FRAME, update );
        _sound=new Sound();
        _sound.addEventListener(ProgressEvent.PROGRESS, onSoundLoading)
        _sound.addEventListener(Event.COMPLETE, onSoundLoaded);
        _sound.load(new URLRequest(value));
        spectrumMonitor.scaleX=1
        spectrumMonitor.clear()
        
        _looper.stop();
      }
      
      private function onSoundLoading(e:ProgressEvent):void{
        trace(e.bytesLoaded)
        trace(e.bytesTotal)
      }
      
      
      
      private function onSoundLoaded(e:Event):void
      {
        
        _playingTime = _sound.length;
        addEventListener( Event.ENTER_FRAME, update );
        playBtn.toolTip="pause";
        playBtn.source=PauseIcon;
        playBtn.enabled=true;
        stopBtn.enabled=true;
        _channel = _sound.play();
        _channel.soundTransform=_soundTransform;
        _isPlaying=true;
        spectrumMonitor.draw(_sound)
        
      }
      private function onTime(e:TimerEvent):void
      {
        _channel.stop();
        _channel = _sound.play( spectrumMonitor.selectionRect.x*spectrumMonitor.ratio );
      }
      
      private function update(e:Event):void
      {
        timeTxt.text=TimeUtils.formatTime(_playingTime)
        durationTxt.text=TimeUtils.formatTime(_channel.position)
        spectrumMonitor.update(_channel.position)
      }
      
      private function onSpectrumSelection(e:Event):void{
        _channel.stop();
        var monitor:SpectrumMonitor=e.currentTarget as SpectrumMonitor;
        _channel = _sound.play( monitor.selectionRect.x*monitor.ratio );
        _isPlaying = true;
        playBtn.toolTip="pause";
        playBtn.source=PauseIcon;
        if (monitor.selectionRect.width)
        {
          _looper.delay = monitor.ratio*monitor.selectionRect.width;
          _looper.start();
          
        } else _looper.stop();
      }
      
      private function onPlayClick(e:MouseEvent):void
      {
        if (_isPlaying) {
          _pausePoint = _channel.position;
          _channel.stop();
          _isPlaying = false;
          playBtn.toolTip="play";
          playBtn.source=PlayIcon;
        } else {
          _channel = _sound.play(_pausePoint);
          _isPlaying = true;
          playBtn.toolTip="pause";
          playBtn.source=PauseIcon;
        }
      }
      
      private function onStopClick(e:MouseEvent):void
      {
       stop();
      }
      
      private function stop():void
      {
        _pausePoint = 0;
        _channel=_sound.play(0)
        _channel.stop();
        _isPlaying = false;
        playBtn.toolTip="play";
        playBtn.source=PlayIcon
      }
      
      private function zoom(e:MouseEvent):void
      {
        
        if(e.currentTarget.id=="zoomPlusBtn")
        {
          spectrumMonitor.scaleX+=0.2
        }
        else if(e.currentTarget.id=="zoomMinusBtn")
        {
          spectrumMonitor.scaleX-=0.2
        }
        
      }
      
      private function onVolumeChange():void
      {
        trace(_soundTransform.volume);
        _soundTransform.volume=volumeControl.value;
        _channel.soundTransform=_soundTransform;
      }
	
      public function onHide():void
      {
        trace("")
        stop();
        _looper.stop();
      }
      
    ]]>
	</fx:Script>
 
  <viewers:SpectrumMonitor id="spectrumMonitor" visible="true" width="100%"/>
  <s:HGroup verticalAlign="middle" width="100%" horizontalAlign="center">
    <s:Line height="100%">
      <s:stroke>
        <s:SolidColorStroke color="0xCCCCCC"/>
      </s:stroke>
    </s:Line>
    <s:Image source="{PlayIcon}" buttonMode="true" useHandCursor="true" toolTip="play" click="onPlayClick(event)" id="playBtn"/>
    <s:Line height="100%">
      <s:stroke>
        <s:SolidColorStroke color="0xCCCCCC"/>
      </s:stroke>
    </s:Line>
    <s:Image source="{StopIcon}" buttonMode="true" useHandCursor="true" toolTip="stop" click="onStopClick(event)" id="stopBtn"/>
    <s:Line height="100%">
      <s:stroke>
        <s:SolidColorStroke color="0xCCCCCC"/>
      </s:stroke>
    </s:Line>
    
    <!--<s:Button id="zoomPlusBtn" label="+" enabled="true" click="zoom(event)"/>
    <s:Button id="zoomMinusBtn" label="-" enabled="true" click="zoom(event)"/>-->
    <s:HSlider id="volumeControl" enabled="true" minimum="0" maximum="2" change="onVolumeChange()" stepSize="0.1"/>
    <s:Spacer width="100%"/>
    <s:HGroup>
      <s:RichText id="durationTxt" text="00:00:00" fontSize="15"/>
      <s:RichText  fontSize="15" text="|"/>
      <s:RichText id="timeTxt" text="00:00:00" fontSize="15"/>
    </s:HGroup>
  </s:HGroup>
</s:VGroup>
