<?xml version="1.0" encoding="utf-8"?>
<actionbar:ActionBar xmlns:fx="http://ns.adobe.com/mxml/2009"
										 xmlns:s="library://ns.adobe.com/flex/spark"
										 xmlns:mx="library://ns.adobe.com/flex/mx"
										 xmlns:actionbar="it.ht.rcs.console.main.actionbar.*"
										 xmlns:editors="it.ht.rcs.console.operations.view.evidences.actionbar.editors.*"
										 creationComplete="init()"
										 removedFromStage="onRemovedFromStage()"
										 addedToStage="onAddedToStage()">

	<s:Button label="{R.get('COMMANDS_EXPORT')}"
						click="onExportClick()"
						icon="@Embed('/img/evidence/boxdownload32.png')"
						enabled="{selectedObject != null}"/>
	<actionbar:Separator width="40"/>

	<s:Button label="{R.get('DELETE')}"
						click="onDeleteClick()"
						enabled="{Console.currentSession.user.is_view_delete() &amp;&amp; selectedObject != null}"
						icon="@Embed('/img/NEW/delete_32.png')"
						visible="{LicenseManager.instance.deletion == true}"
						includeInLayout="{LicenseManager.instance.deletion == true}"/>

	<actionbar:Separator width="40"
											 visible="{LicenseManager.instance.deletion == true}"
											 includeInLayout="{LicenseManager.instance.deletion == true}"/>

	<s:Button label="{R.get('DETAIL_SHOW')}"
						click="onDetailClick()"
						icon="@Embed('/img/evidence/article32.png')"
						id="detailBtn"
						enabled="{selectedObject != null}"/>

	<actionbar:Separator width="40"
											 visible="{LicenseManager.instance.deletion == true}"
											 includeInLayout="{LicenseManager.instance.deletion == true}"/>

	<s:Button label="{R.get('COMMAND_ADD')}"
						click="onCommandClick()"
						icon="@Embed('/img/NEW/commands_32.png')"
						enabled="{Console.currentSession.user.is_tech_exec() &amp;&amp; LicenseManager.instance.modify}"/>

	<fx:Metadata> 
    [Event(name="export", type="flash.events.Event")] 
    [Event(name="detail", type="flash.events.Event")]
    [Event(name="delete", type="flash.events.Event")] 
  </fx:Metadata>

	<fx:Script>
		<![CDATA[
			import it.ht.rcs.console.evidence.controller.EvidenceManager;
			import it.ht.rcs.console.evidence.model.Evidence;
			import it.ht.rcs.console.evidence.model.TypeCount;
			import it.ht.rcs.console.monitor.controller.LicenseManager;
			import it.ht.rcs.console.target.model.Target;
			import it.ht.rcs.console.utils.AlertPopUp;
			import it.ht.rcs.console.operations.view.OperationsSection;

			import locale.R;

			import mx.managers.PopUpManager;
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.events.CloseEvent;

			[Embed(source="/img/evidence/paperplus32.png")]
			public var ReportAddIcon:Class;

			[Embed(source="/img/evidence/paperminus32.png")]
			public var ReportRemoveIcon:Class;

			[Embed(source="/img/evidence/linedpaperplus32.png")]
			public var SummaryShowIcon:Class;

			[Embed(source="/img/evidence/linedpaperminus32.png")]
			public var SummaryHideIcon:Class;

			[Embed(source="/img/evidence/article32.png")]
			public var DetailShowIcon:Class;

			[Embed(source="/img/evidence/stop32.png")]
			public var DetailHideIcon:Class;

			[Bindable]
			public var target:Target;

			[Bindable]
			public var section:OperationsSection;


			public function onDetailClick():void
			{
				dispatchEvent(new Event("detail"))
			}

			public function onExportClick():void
			{
				dispatchEvent(new Event("export"));
			}

			private function onDeleteClick():void
			{
				dispatchEvent(new Event("delete"));
			}

			public function toggleDetailButton():void
			{
				if (detailBtn.label == R.get('DETAIL_SHOW'))
				{
					detailBtn.setStyle("icon", DetailHideIcon);
					detailBtn.label=R.get('DETAIL_HIDE');
				}
				else
				{
					detailBtn.setStyle("icon", DetailShowIcon);
					detailBtn.label=R.get('DETAIL_SHOW');
				}
			}

			private function init():void
			{

			}

			private function onCommandClick():void
			{
				var popup:CommandsPopup=PopUpManager.createPopUp(root, CommandsPopup, true) as CommandsPopup;
				//popup.target=section.stateManager.selectedTarget;
				popup.agent=section.stateManager.selectedAgent;
				popup.getCommands();
				PopUpManager.centerPopUp(popup);
			}

			private function onRemovedFromStage():void
			{

			}

			private function onAddedToStage():void
			{

			}
		]]>
	</fx:Script>

</actionbar:ActionBar>
