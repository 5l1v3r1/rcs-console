<?xml version="1.0" encoding="utf-8"?>
<s:VGroup xmlns:fx="http://ns.adobe.com/mxml/2009"
          xmlns:s="library://ns.adobe.com/flex/spark"
          xmlns:mx="library://ns.adobe.com/flex/mx"
          xmlns:filesystem="it.ht.rcs.console.operations.view.filesystem.*"
          width="100%" height="100%" removedFromStage="onRemovedFromStage()" addedToStage="onAddedToStage()">

  <fx:Script>
    <![CDATA[
      import it.ht.rcs.console.agent.controller.AgentManager;
      import it.ht.rcs.console.agent.model.Agent;
      import it.ht.rcs.console.dashboard.view.renderer.Icons;
      import it.ht.rcs.console.events.RefreshEvent;
      import it.ht.rcs.console.evidence.controller.EvidenceManager;
      import it.ht.rcs.console.evidence.model.Evidence;
      import it.ht.rcs.console.operations.view.OperationsSection;
      import it.ht.rcs.console.utils.Size;
      import it.ht.rcs.console.utils.TimeUtils;
      
      import mx.collections.ArrayCollection;
      import mx.collections.HierarchicalCollectionView;
      import mx.collections.HierarchicalData;
      import mx.core.FlexGlobals;
      import mx.rpc.events.ResultEvent;
      import mx.utils.ObjectUtil;
      
      [Bindable]
      public var section:OperationsSection;
      
      public function showTree(e:Event=null):void
      {
        var agent:Agent = section.stateManager.selectedAgent;
        EvidenceManager.instance.filesystem(section.stateManager.selectedTarget._id, agent ? agent._id : null, onResult);
      }
      
      private function onResult(event:ResultEvent):void
      {
        var root:Object = { name: section.stateManager.selectedTarget.name, children: [], attr: ROOT, parent: null };
        
        var grouped:Object = groupByAgentId(event.result as ArrayCollection);
        for (var aid:String in grouped) {
          var subroot:Object = buildSubTree(grouped[aid]);
          subroot.parent = root;
          root.children.push(subroot);
        }

        var hcv:HierarchicalCollectionView = new HierarchicalCollectionView(new HierarchicalData(root));
        hcv.showRoot = true;
        grid.dataProvider = hcv;
        
      }
      
      private function groupByAgentId(collection:ArrayCollection):Object
      {
        var grouped:Object = {};
        for each (var e:Evidence in collection) {
          if (!grouped.hasOwnProperty(e.aid))
            grouped[e.aid] = [];
          grouped[e.aid].push(e);
        }
        return grouped;
      }
      
      public static const ROOT:int = -2;
      public static const SUBROOT:int = -1;
      public static const FILE:int = 0;
      public static const EMPTY_FOLDER:int = 1;
      public static const FULL_FOLDER:int = 3;
      
      private function buildSubTree(evidences:Array):Object
      {
        var subroot:Object = { name: 'Agent', children: [], attr: SUBROOT, parent: null };
        
        for each (var e:Evidence in evidences) {
          var path:String = e.data.path;
          path = path.replace('\\\\', '\\');
          var separator:String = path.indexOf('/') == -1 ? '\\' : '/';
          var tokens:Array = path.split(separator);
          var node:Object = subroot;
          for (var idx:int = 0; idx < tokens.length; idx++) {
            var t:String = tokens[idx];
            if (t == '') continue;
            
            var next:Object = getAppendToNode(node.children, t);
            
            if (next == null) {
              next = { name: t, children: [], attr: FULL_FOLDER, parent: node };
              node.children.push(next);
            }
            
            node = next;
            
            if (idx == tokens.length-1) { // ultimo elemento del path
              node.size = e.data.size;
              node.attr = e.data.attr;
              node.date = e.da;
              node.evidence = e;
              if (e.data.attr == FILE)
                delete(node.children);
            }
          }
        }
        
        if (e) {
          var agent:Agent = AgentManager.instance.getItem(e.aid);
          subroot.name = agent.name;
          subroot.agent = agent;
        }
        
        return subroot;
      }
      
      private function getAppendToNode(a:Array, name:String):Object
      {
        for each (var el:Object in a)
          if (el.name == name)
            return el;
        return null;
      }
      
      private function dateFunction(item:Object, column:AdvancedDataGridColumn):String
      {
        try {
          var value:Number = item[column.dataField];
          return value ? TimeUtils.timestampFormatter(value * 1000) : '';
        } catch (e:Error) {}
        return '';
      }
      
      private function sizeFunction(item:Object, column:AdvancedDataGridColumn):String
      {
        try {
          var value:Number = item[column.dataField];
          return value && item.attr == FILE ? Size.toHumanBytes(value) : '';
        } catch (e:Error) {}
        return '';
      }
      
      [Embed('/img/NEW/emptyFolder.png')]
      private static const emptyFolder:Class;
      [Embed('/img/NEW/fullFolder.png')]
      private static const fullFolder:Class;
      [Embed('/img/NEW/file.png')]
      private static const file:Class;
      [Embed('/img/NEW/device/agent_mobile_16.png')]
      private static const mobile:Class;
      [Embed('/img/NEW/device/agent_desktop_16.png')]
      private static const desktop:Class;
      [Embed('/img/NEW/device.png')]
      private static const device:Class;
      
      private function fsIconFunction(item:Object):Class
      {
        if (!item) return null;
        
        if (item.hasOwnProperty('children')) {
          switch (item.attr) {
            case ROOT: return Icons.target16;
            case SUBROOT: return item.agent ? (item.agent.type == 'mobile' ? mobile : desktop) : device;
            case EMPTY_FOLDER: return emptyFolder;
            case FULL_FOLDER: return fullFolder;
            default: return null;
          }
        }
        
        return file;
      }
      
      private function onAddedToStage():void
      {
        FlexGlobals.topLevelApplication.addEventListener(RefreshEvent.REFRESH, showTree);
        if (grid)
          showTree();
      }
      
      private function onRemovedFromStage():void
      {
        FlexGlobals.topLevelApplication.removeEventListener(RefreshEvent.REFRESH, showTree);
        grid.dataProvider = null;
      }
    ]]>
  </fx:Script>
  
  <filesystem:FileSystemActionBar id="actionBar" selectedObject="{grid.selectedItem}" section="{section}"/>
  
  <!--mx:Tree id="tree" width="100%" height="100%" allowMultipleSelection="false" borderVisible="false"
           labelField="name" showRoot="true"/-->
  
  <mx:AdvancedDataGrid id="grid" width="100%" height="100%" sortableColumns="false" iconFunction="fsIconFunction">
    <mx:columns>
      <mx:AdvancedDataGridColumn dataField="name" width="400"/>
      <mx:AdvancedDataGridColumn dataField="date" labelFunction="dateFunction" width="160"/>
      <mx:AdvancedDataGridColumn dataField="size" labelFunction="sizeFunction" width="100"/>
      <!--mx:AdvancedDataGridColumn dataField="attr" width="100"/-->
    </mx:columns>
  </mx:AdvancedDataGrid>
  
</s:VGroup>