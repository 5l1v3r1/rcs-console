<?xml version="1.0" encoding="utf-8"?>
<s:BorderContainer xmlns:fx="http://ns.adobe.com/mxml/2009"
									 xmlns:s="library://ns.adobe.com/flex/spark"
									 xmlns:mx="library://ns.adobe.com/flex/mx"
									 xmlns:utils="it.ht.rcs.console.utils.*"
									 backgroundAlpha="0"
									 borderColor="#dddddd"
									 borderWeight="2"
									 cornerRadius="10"
									 creationComplete="init()">

	<fx:Script>
		<![CDATA[
			import it.ht.rcs.console.DefaultConfigBuilder;
			import it.ht.rcs.console.utils.DateUtils;
			import it.ht.rcs.console.utils.TimeUtils;

			import locale.R;

			import mx.events.ValidationResultEvent;
			import mx.formatters.DateFormatter;

			private var formatter:DateFormatter;

			public var module:Object;

			public var property:String;

			[Bindable]
			public var label:String;

			[Bindable]
			public var showMaxSize:Boolean=true;

			private function init():void
			{
				if (!module.hasOwnProperty(property))
					return;

				formatter=new DateFormatter();
				formatter.formatString='YYYY-MM-DD';

				isEnabled.selected=module[property].enabled;
				if (module[property].filter.datefrom != "" && module[property].filter.datefrom != null)
				{
					fromDate.selectedDate=DateUtils.parseDateTimeString(module[property].filter.datefrom);
				}
				else
				{
					fromDate.selectedDate=new Date();
				}
				fromTime.time=module[property].filter.datefrom.split(' ')[1];
				if (module[property].filter.dateto == "0000-00-00 00:00:00")
					module[property].filter.dateto=DefaultConfigBuilder.FOREVER_DATE;
				notForever.selected=module[property].filter.dateto != DefaultConfigBuilder.FOREVER_DATE;
				if (notForever.selected)
				{
					toDate.selectedDate=DateUtils.parseDateTimeString(module[property].filter.dateto);
					toTime.time=module[property].filter.dateto.split(' ')[1];
				}
				else
				{
					toDate.selectedDate=new Date();
					toTime.time='00:00:00';
				}

				if (showMaxSize)
					maxSize.text=module[property].filter.maxsize ? String(module[property].filter.maxsize / 1000) : '100';
			}

			public function save():void
			{
				module[property].enabled=isEnabled.selected;

				module[property].filter.datefrom=formatter.format(fromDate.selectedDate) + ' ' + fromTime.time;

				if (notForever.selected)
					module[property].filter.dateto=formatter.format(toDate.selectedDate) + ' ' + toTime.time;
				else
					//delete(module[property].filter.dateto);
					module[property].filter.dateto=DefaultConfigBuilder.FOREVER_DATE;
				// the DATETO is needed because zeno (Fabrizio Cornelli) has broken his code
				// from RCS 7.x to RCS daVinci. He owes me a beer :)

				if (showMaxSize)
					module[property].filter.maxsize=parseInt(maxSize.text) * 1000;
				else
					delete(module[property].filter.maxsize);
			}

			private function pad(n:Number):String
			{
				return TimeUtils.zeroPad(n, 2);
			}

			public function isValid():Boolean
			{
				if (!isEnabled.selected)
					return true;

				if (forever.selected)
					return (!showMaxSize || maxSizeVal.isValid());

				computeFromToTimeDifference();
				var valid:Boolean=(!showMaxSize || maxSizeVal.isValid()) && dateVal.validate(difference).type == ValidationResultEvent.VALID;
				return valid;
			}

			[Bindable]
			private var difference:Number;

			private function computeFromToTimeDifference():void
			{
				var f:Number=DateUtils.parseDateTimeString(formatter.format(fromDate.selectedDate) + ' ' + fromTime.time).time;
				var t:Number=DateUtils.parseDateTimeString(formatter.format(toDate.selectedDate) + ' ' + toTime.time).time;
				difference=t - f;
			}
		]]>
	</fx:Script>

	<s:Label left="25"
					 top="-8"
					 width="55"
					 backgroundColor="#EAEAEA"
					 fontFamily="Myriad"
					 fontSize="18"
					 text="{label}"
					 textAlign="center"/>

	<s:Form>

		<s:FormItem label="{R.get('ENABLED')}">
			<s:CheckBox id="isEnabled"/>
		</s:FormItem>

		<s:FormItem label="{R.get('FROM')}"
								enabled="{isEnabled.selected}">
			<mx:DateField id="fromDate"
										width="151"
										editable="false"
										formatString="YYYY-MM-DD"
										showToday="false"
										yearNavigationEnabled="true"/>
			<utils:TimeField id="fromTime"/>
		</s:FormItem>

		<s:FormItem label="{R.get('TO')}"
								enabled="{isEnabled.selected}">
			<s:VGroup>
				<s:RadioButton id="forever"
											 label="{R.get('FOREVER')}"
											 group="{dateGroup}"
											 selected="true"/>
				<s:RadioButton id="notForever"
											 label="{R.get('DATE')}"
											 group="{dateGroup}"/>
				<mx:DateField id="toDate"
											width="151"
											editable="false"
											enabled="{notForever.selected}"
											formatString="YYYY-MM-DD"
											showToday="true"
											yearNavigationEnabled="true"/>
				<utils:TimeField id="toTime"
												 enabled="{notForever.selected}"/>
			</s:VGroup>
		</s:FormItem>

		<s:FormItem visible="{showMaxSize}"
								label="{R.get('MAX_SIZE')}"
								enabled="{isEnabled.selected}">
			<s:HGroup id="hgr"
								verticalAlign="middle">
				<s:TextInput id="maxSize"
										 restrict="0-9"
										 showErrorTip="true"
										 textAlign="center"
										 widthInChars="3"/>
				<s:Label paddingTop="1"
								 text=" kB"/>
			</s:HGroup>
		</s:FormItem>

	</s:Form>

	<fx:Declarations>
		<s:RadioButtonGroup id="dateGroup"/>
		<fx:Array id="vals">
			<mx:StringValidator minLength="1"
													property="text"
													source="{maxSize}"
													triggerEvent=""/>
			<mx:NumberValidator lowerThanMinError="{R.get('VALIDATION_MIN', [0])}"
													minValue="1"
													property="text"
													source="{maxSize}"
													triggerEvent=""/>
		</fx:Array>
		<utils:MetaValidator id="maxSizeVal"
												 validators="{vals}"/>
		<mx:NumberValidator id="dateVal"
												listener="{toDate}"
												lowerThanMinError="{R.get('VALIDATION_MIN', ['\''+R.get('FROM')+'\''])}"
												minValue="0"
												triggerEvent=""/>
	</fx:Declarations>

</s:BorderContainer>
