<?xml version="1.0" encoding="utf-8"?>
<s:VGroup xmlns:fx="http://ns.adobe.com/mxml/2009"
          xmlns:s="library://ns.adobe.com/flex/spark"
          xmlns:mx="library://ns.adobe.com/flex/mx"
          xmlns:configuration="it.ht.rcs.console.operations.view.configuration.*"
          xmlns:basic="it.ht.rcs.console.operations.view.configuration.basic.*"
          xmlns:advanced="it.ht.rcs.console.operations.view.configuration.advanced.*"
          width="100%" height="100%" creationComplete="init()">

  <fx:Script>
    <![CDATA[
      import it.ht.rcs.console.agent.controller.AgentManager;
      import it.ht.rcs.console.agent.model.Agent;
      import it.ht.rcs.console.agent.model.Config;
      import it.ht.rcs.console.operations.view.OperationsSection;
      
      import mx.rpc.events.ResultEvent;
      import mx.utils.ObjectUtil;
      
      [Bindable]
      public var section:OperationsSection;
      
      private var configAsConfig:Config;
      
      [Bindable]
      public var configAsObject:Object;
      
      public function getConfig():void
      {
        configAsConfig = section.stateManager.selectedConfig;
        
        if (configAsConfig == null) // Factory
        {
          var factory:Agent = section.stateManager.selectedFactory;
          AgentManager.instance.show(factory._id, function(e:ResultEvent):void {
            configAsConfig = (e.result as Agent).configs.getItemAt(0) as Config;
            configAsObject = JSON.parse(configAsConfig.config);
            displayConfig();
          });
        }
        else // An Agent's config
        {
          configAsObject = JSON.parse(configAsConfig.config);
          displayConfig();
        }
      }
      
      private var originalConfigAsObject:Object;
      
      public function displayConfig():void
      {
        if (configAsObject == null) return;
        
        updateOriginalConfig(configAsObject);
        
        currentState = configAsObject.globals.advanced ? "advanced" : "basic";
        switch (currentState) {
          case "basic":
            if (!basic) return;
            basic.config = configAsObject;
            basic.displayConfig();
            break;
          case "advanced":
            if (!advanced) return;
            advanced.config = configAsObject;
            advanced.displayConfig();
            break;
        }
      }
      
      private function init():void
      {
        displayConfig();
      }
      
      public function updateOriginalConfig(config:Object):void
      {
        originalConfigAsObject = ObjectUtil.copy(config); // We save a copy to compare it when leaving section and detect changes
      }
      
      public function getDirtyState():Boolean
      {
        var newConfig:Object = currentState == 'advanced' ? advanced.getConfig() : basic.getConfig();
        return ObjectUtil.compare(newConfig, originalConfigAsObject) != 0;
      }
    ]]>
  </fx:Script>
  
  <s:states>
    <s:State name="blank"/>
    <s:State name="basic"/>
    <s:State name="advanced"/>
  </s:states>
  
  <configuration:ConfigurationActionBar section="{section}"/>
  
  <basic:BasicView id="basic" includeIn="basic"/>
  
  <advanced:AdvancedView id="advanced" includeIn="advanced" section="{section}"/>

</s:VGroup>