<?xml version="1.0" encoding="utf-8"?>
<s:VGroup xmlns:fx="http://ns.adobe.com/mxml/2009"
					xmlns:s="library://ns.adobe.com/flex/spark"
					xmlns:mx="library://ns.adobe.com/flex/mx"
					xmlns:configuration="it.ht.rcs.console.operations.view.configuration.*"
					xmlns:basic="it.ht.rcs.console.operations.view.configuration.basic.*"
					xmlns:advanced="it.ht.rcs.console.operations.view.configuration.advanced.*"
					width="100%"
					height="100%"
					creationComplete="init()"
					addedToStage="onAddedToStage()"
					removedFromStage="onRemovedFromStage()">

	<fx:Script>
		<![CDATA[
			import it.ht.rcs.console.DefaultConfigBuilder;
			import it.ht.rcs.console.agent.controller.AgentManager;
			import it.ht.rcs.console.agent.model.Agent;
			import it.ht.rcs.console.agent.model.Config;
			import it.ht.rcs.console.events.SessionEvent;
			import it.ht.rcs.console.operations.view.OperationsSection;
			
			import mx.core.FlexGlobals;
			import mx.rpc.events.ResultEvent;
			import mx.utils.ObjectUtil;

			[Bindable]
			public var section:OperationsSection;

			private var configAsConfig:Config;

			[Bindable]
			public var configAsObject:Object;

			[Bindable]
			private var host:String="";

			[Bindable]
			private var isScout:Boolean;

      [Bindable]
      private var currentAgent:Agent;

			public function getConfig():void
			{
				configAsConfig=section.stateManager.selectedConfig;

				if (configAsConfig == null) // Factory
				{
          
					var factory:Agent=section.stateManager.selectedFactory;
          currentAgent=factory;
          isScout=factory.type=="desktop";
					AgentManager.instance.show(factory._id, function(e:ResultEvent):void
					{
            if((e.result as Agent).configs.length>0)
						configAsConfig=(e.result as Agent).configs.getItemAt(0) as Config; //if configs length is 0  ??
            
						configAsObject=JSON.parse(configAsConfig.config);
            /* if(configAsObject.globals.type=="mobile")
            {
              if(configAsObject.globals.quota.min>(1048576*5))
              {
                configAsObject.globals.quota.min=(1048576*5)// 5MB
                var a:Agent = section.stateManager.selectedFactory || section.stateManager.selectedAgent;
                AgentManager.instance.addConfig(a, JSON.stringify(configAsObject), null, null);
                updateOriginalConfig(configAsObject);
              }
            } */
            addFactoryMissingModules(factory.type, configAsObject);
						displayConfig(false);
					});
				}
				else // An Agent's config
				{
          currentAgent=section.stateManager.selectedAgent;
					if (section.stateManager.selectedAgent == null)
						return;   
          
          if(currentAgent.level=="soldier")
          {
          trace("it's a soldier: hide advanced view!")

          }
          isScout=section.stateManager.selectedAgent.type=="desktop" && section.stateManager.selectedAgent.level=="scout";
					configAsObject=JSON.parse(configAsConfig.config);
					cleanUnsupportedModules(section.stateManager.selectedAgent.platform, configAsObject);
					addAgentMissingModules(section.stateManager.selectedAgent.platform, configAsObject);
					displayConfig(false);
				}
			}

			private function addAgentMissingModules(platform:String, configAsObject:Object):void
			{
				DefaultConfigBuilder.addAgentMissingModules(platform, configAsObject);
			}
      private function addFactoryMissingModules(type:String, configAsObject:Object):void
      {
        DefaultConfigBuilder.addFactoryMissingModules(type, configAsObject);
      }

			private function cleanUnsupportedModules(platform:String, configAsObject:Object):void
			{
				DefaultConfigBuilder.cleanPlatformConfig(platform, configAsObject);
			}

			private var originalConfigAsObject:Object;

			public function displayConfig(isImported:Boolean):void
			{      

				if (configAsObject == null)
					return;
				host="";
				if (configAsObject.actions)
				{
					primary: for (var a:int=0; a < configAsObject.actions.length; a++)
					{
						for (var sa:int=0; sa < configAsObject.actions[a].subactions.length; sa++)
						{
							if (configAsObject.actions[a].subactions[sa].action == "synchronize")
							{
								host=configAsObject.actions[a].subactions[sa].host;
								break primary;
							}
						}
					}
				}
				if (!isImported)
				{
					updateOriginalConfig(configAsObject)
						//cleanUnsupportedModules(section.stateManager.selectedAgent.platform, configAsObject);
						//addMissingModules(section.stateManager.selectedAgent.platform, configAsObject)
				}
        else
        {
          if(section.stateManager.selectedAgent)
          {
            cleanUnsupportedModules(section.stateManager.selectedAgent.platform, configAsObject);
            DefaultConfigBuilder.addAgentMissingModules(section.stateManager.selectedAgent.platform, configAsObject)
          }
          else if(section.stateManager.selectedFactory)
          {
            //cleanUnsupportedModules(section.stateManager.selectedFactory.platform, configAsObject);
            DefaultConfigBuilder.addFactoryMissingModules(section.stateManager.selectedFactory.type, configAsObject)
          }
         
        }


				currentState=configAsObject.globals.advanced ? "advanced" : "basic";
        
        var agent:Agent=section.stateManager.selectedAgent;
        
        if(agent && agent.level=="soldier" && configAsObject.globals.advanced) // a soldier with advanced configuration convert to basic
        {
          currentState="basic"
        
          var newConfig:Object = DefaultConfigBuilder.getDefaultConfig(agent);
          if (agent._kind == 'agent')
            DefaultConfigBuilder.cleanPlatformConfig(agent.platform, newConfig);
          if (!basic)
            return;
          
          basic.config = newConfig;
          basic.displayConfig();
          return;
        
        }
        
     
				switch (currentState)
				{
					case "basic":
						if (!basic)
							return;
						basic.config=configAsObject;
						basic.displayConfig();
						break;
					case "advanced":
						if (!advanced)
							return;
						advanced.config=configAsObject;
						advanced.displayConfig();
						break;
				}
			}

			private function init():void
			{
				displayConfig(false);
			}

			public function updateOriginalConfig(config:Object):void
			{
				originalConfigAsObject=ObjectUtil.copy(config); // We save a copy to compare it when leaving section and detect changes
			}

			public function getDirtyState():Boolean
			{
        if(!Console.currentSession.user.is_tech_config())
          return false;
				var newConfig:Object=currentState == 'advanced' ? advanced.getConfig() : basic.getConfig();
				return ObjectUtil.compare(newConfig, originalConfigAsObject) != 0;
			}

			private function onAddedToStage():void
			{
				FlexGlobals.topLevelApplication.addEventListener(SessionEvent.BEFORE_LOGOUT, onBeforeLogout);
			}

			private function onRemovedFromStage():void
			{
				FlexGlobals.topLevelApplication.removeEventListener(SessionEvent.BEFORE_LOGOUT, onBeforeLogout);
			}

			private function onBeforeLogout(e:SessionEvent):void
			{
				if (getDirtyState())
					e.preventDefault();
			}

		]]>
	</fx:Script>

	<s:states>
		<s:State name="blank"/>
		<s:State name="basic"/>
		<s:State name="advanced"/>
	</s:states>

	<configuration:ConfigurationActionBar section="{section}"/>
	<basic:BasicView id="basic"
									 includeIn="basic"
									 host="{host}"
									 isScout="{isScout}"
                   currentAgent="{currentAgent}"/>

	<advanced:AdvancedView id="advanced"
												 includeIn="advanced"
												 section="{section}"
												 host="{host}"
												 isScout="{isScout}"
                         currentAgent="{currentAgent}"/>

</s:VGroup>
