<?xml version="1.0" encoding="utf-8"?>
<utils:TitleWindowSaveCancel xmlns:fx="http://ns.adobe.com/mxml/2009"
                             xmlns:s="library://ns.adobe.com/flex/spark"
                             xmlns:mx="library://ns.adobe.com/flex/mx"
                             xmlns:utils="it.ht.rcs.console.utils.*"
                             creationComplete="init()" save="onSave(event)"
                             title="{currentState == CREATE ? R.get('NEW_FACTORY') : R.get('EDIT_FACTORY')}">

  <fx:Script>
    <![CDATA[
      import it.ht.rcs.console.agent.controller.AgentManager;
      import it.ht.rcs.console.agent.model.Agent;
      import it.ht.rcs.console.events.SaveEvent;
      import it.ht.rcs.console.operation.model.Operation;
      import it.ht.rcs.console.target.model.Target;
      import it.ht.rcs.console.utils.AlertPopUp;
      
      import locale.R;
      
      import mx.events.CloseEvent;
      
      public static const CREATE:String = 'create';
      public static const EDIT:String = 'edit';
      
      [Bindable] public var operation:Operation;
      [Bindable] public var target:Target;
      [Bindable] public var factory:Agent;
      
      private function init():void
      {
        if (currentState == EDIT) {
          for each (var t:Object in types)
            if (t.label.toLowerCase() == factory.type)
              type.selectedItem = t;
          
          for each (var s:Object in statuses)
            if (s.label.toLowerCase() == factory.status)
              status.selectedItem = s;
        }
        
        factoryName.setFocus();
      }
      
      private function onSave(event:SaveEvent):void
      {
        if(currentState == EDIT && getStatus() != factory.status)
        {
          AlertPopUp.show(R.get('CONFIRM_FACTORY_CLOSE', [factory.name]), R.get('CONFIRM'),
            AlertPopUp.YES|AlertPopUp.NO, null,
            function(e:CloseEvent):void {
              if (e.detail == AlertPopUp.YES)
                { doSave(); close();  dispatchEvent(new Event("close"))}
            }, null, AlertPopUp.NO);
          return;
        }
        
        doSave();
        
        if (currentState == CREATE)
          AgentManager.instance.addFactory(factory, operation, target, function(factory:Agent):void { close(); dispatchEvent(new Event("close")) });
        else
          close();
      }
      
      private function getStatus():String
      {
        return status.selectedIndex == 0 ? 'open' : 'closed';
      }
      
      private function doSave():void
      {
        factory.name = factoryName.text;
        factory.desc = desc.text;
        factory.type = type.selectedItem.label.toLowerCase();
        factory.status = (currentState == CREATE) ? 'open' : getStatus();
      }
    ]]>
  </fx:Script>
  
  <utils:states>
    <s:State name="create"/>
    <s:State name="edit"/>
  </utils:states>
  
  <s:Form width="100%" defaultButton="{saveButton}">

    <s:FormItem label="{R.get('NAME')}">
      <s:TextInput id="factoryName" width="250" text="{factory.name}" restrict="A-Za-z0-9\-_ " maxChars="20"/>
    </s:FormItem>
    
    <s:FormItem label="{R.get('DESCRIPTION')}">
      <s:TextArea id="desc" width="250" heightInLines="3" text="{factory.desc}"/>
    </s:FormItem>
    
    <s:FormItem label="{R.get('TYPE')}" enabled="{currentState == CREATE}">
      <s:DropDownList id="type" width="150" selectedIndex="0">
        <s:ArrayCollection id="types">
          <fx:Object label="DESKTOP"/>
          <fx:Object label="MOBILE"/>
        </s:ArrayCollection>
      </s:DropDownList>
    </s:FormItem>
    
    <s:FormItem label="{R.get('STATUS')}"
                enabled="{currentState == EDIT &amp;&amp; factory.status == 'open'}">
      <s:DropDownList id="status" width="150" requireSelection="true">
        <s:ArrayCollection id="statuses">
          <fx:Object label="OPEN"/>
          <fx:Object label="CLOSED"/>
        </s:ArrayCollection>
      </s:DropDownList>
    </s:FormItem>
    
  </s:Form>
  
</utils:TitleWindowSaveCancel>