<?xml version="1.0" encoding="utf-8"?>
<actionbar:ActionBar xmlns:fx="http://ns.adobe.com/mxml/2009"
                     xmlns:s="library://ns.adobe.com/flex/spark"
                     xmlns:mx="library://ns.adobe.com/flex/mx"
                     xmlns:actionbar="it.ht.rcs.console.main.actionbar.*"
                     xmlns:view="it.ht.rcs.console.operations.view.*">
  
  <s:HGroup visible="{section.currentState == 'singleTarget'}" gap="0"
            includeInLayout="{section.currentState == 'singleTarget'}" verticalAlign="middle">
    
    <s:Button label="{R.get('NEW_FACTORY')}" click="onNewClick()"
              enabled="{Console.currentSession.user.is_tech()}"
              icon="@Embed('/img/NEW/newFactory.png')"/>
    
    <s:Button label="{R.get('EDIT')}" click="onEditClick()"
              enabled="{Console.currentSession.user.is_tech() &amp;&amp; selectedObject &amp;&amp; selectedObject is Agent}"
              icon="@Embed('/img/NEW/edit.png')"/>
    
    <s:Button label="{R.get('DELETE')}" click="onDeleteClick(event)"
              enabled="{Console.currentSession.user.is_tech() &amp;&amp; selectedObject &amp;&amp; selectedObject is Agent}" 
              icon="@Embed('/img/NEW/delete_32.png')"/>
    
    <actionbar:Separator/>

    <s:Button label="{R.get('EVIDENCE_IMPORT')}" click="importEvidence(event)"
              icon="@Embed('/img/NEW/import.png')" enabled="{Console.currentSession.user.is_tech()}"/>

    <s:Button label="{R.get('EVIDENCE_EXPORT')}"
              icon="@Embed('/img/NEW/export.png')" click="exportEvidence(event)" enabled="{Console.currentSession.user.is_view()}"/>
    
    <actionbar:Separator/>
    
    <s:Button label="{R.get('UPDATE_AGENT')}" click="updateAgent(event)"
              icon="@Embed('/img/NEW/update.png')" enabled="{Console.currentSession.user.is_tech() &amp;&amp; 
                                                             selectedObject &amp;&amp; 
                                                            (selectedObject as Agent)._kind  == 'agent' &amp;&amp; 
                                                            (selectedObject as Agent).status == 'open'}"/>
    
    <actionbar:Separator/>
    
  </s:HGroup>
  
  <s:HGroup visible="{section.currentState == 'singleAgent'}" gap="0"
            includeInLayout="{section.currentState == 'singleAgent'}" verticalAlign="middle">

    <s:Button label="{R.get('EVIDENCE_EXPORT')}"
              icon="@Embed('/img/NEW/export.png')" click="exportEvidence(event)" enabled="{Console.currentSession.user.is_view()}"/>
        
    <actionbar:Separator/>

    <s:Button label="{R.get('UPDATE_AGENT')}" click="updateAgent(event)"
              icon="@Embed('/img/NEW/update.png')" enabled="{Console.currentSession.user.is_tech() &amp;&amp; 
              selectedObject &amp;&amp; 
              (selectedObject as Agent)._kind  == 'agent' &amp;&amp; 
              (selectedObject as Agent).status == 'open'}"/>
    
  </s:HGroup>
  
  <s:Spacer width="100%"/>
  
  <s:ButtonBar dataProvider="{viewStack}" requireSelection="true"
               includeInLayout="{section.currentState != 'singleAgent'}"
               visible="{section.currentState != 'singleAgent'}"/>
  
  <s:TextInput id="searchInput" keyUp="onKeyUp(event)" removedFromStage="onRemovedFromStage()"/>
  
  
  <fx:Script>
    <![CDATA[
      import it.ht.rcs.console.agent.controller.AgentManager;
      import it.ht.rcs.console.agent.model.Agent;
      import it.ht.rcs.console.operations.view.OperationsSection;
      import it.ht.rcs.console.operations.view.evidences.EvidenceExport;
      import it.ht.rcs.console.operations.view.evidences.EvidenceImport;
      import it.ht.rcs.console.utils.AlertPopUp;
      
      import locale.R;
      
      import mx.events.CloseEvent;
      import mx.managers.PopUpManager;
      
      [Bindable]
      public var section:OperationsSection;
      
      private function onNewClick():void
      {
        var popup:FactoriesForm = PopUpManager.createPopUp(root, FactoriesForm, true) as FactoriesForm;
        popup.operation = section.stateManager.selectedOperation;
        popup.target = section.stateManager.selectedTarget;
        popup.factory = new Agent(Agent.defaultAgent());
        popup.currentState = FactoriesForm.CREATE;
        PopUpManager.centerPopUp(popup);
      }
      
      private function onEditClick():void
      {
        if (selectedObject._kind == 'factory')
        {
          var popup:FactoriesForm = PopUpManager.createPopUp(root, FactoriesForm, true) as FactoriesForm;
          popup.operation = section.stateManager.selectedOperation;
          popup.target = section.stateManager.selectedTarget;
          popup.factory = selectedObject as Agent;
          popup.currentState = FactoriesForm.EDIT;
          PopUpManager.centerPopUp(popup);
        }
        else if (selectedObject._kind == 'agent')
        {
          var popup2:AgentsForm = PopUpManager.createPopUp(root, AgentsForm, true) as AgentsForm;
          popup2.operation = section.stateManager.selectedOperation;
          popup2.target = section.stateManager.selectedTarget;
          popup2.agent = selectedObject as Agent;
          popup2.currentState = AgentsForm.EDIT;
          PopUpManager.centerPopUp(popup2);
        }
      }
      
      private function onDeleteClick(event:MouseEvent):void
      {
        AlertPopUp.show("Confirm operation deletion", R.get('CONFIRM'),
          AlertPopUp.YES|AlertPopUp.NO, null,
          function(e:CloseEvent):void {
            if (e.detail == AlertPopUp.YES)
              AgentManager.instance.delAgent(selectedObject, event.shiftKey);
          }, null, AlertPopUp.NO);
      }
      
      private function onRemovedFromStage():void
      {
        searchInput.text = '';
      }
      
      private function onKeyUp(event:KeyboardEvent):void
      {
        section.stateManager.searchField = searchInput;
        section.stateManager.view.refresh();
      }
      
      private function importEvidence(event:MouseEvent):void
      {
        var popup:EvidenceImport = PopUpManager.createPopUp(root, EvidenceImport, true) as EvidenceImport;
        PopUpManager.centerPopUp(popup);
      }
      
      private function updateAgent(event:MouseEvent):void
      {
        var popup:AgentUpgrade = PopUpManager.createPopUp(root, AgentUpgrade, true) as AgentUpgrade;
        popup.agent = selectedObject as Agent;
        PopUpManager.centerPopUp(popup);
      }
      
      private function exportEvidence(event:MouseEvent):void
      {
        var popup:EvidenceExport = PopUpManager.createPopUp(root, EvidenceExport, true) as EvidenceExport;
        popup.target = section.stateManager.selectedTarget;
        popup.agent = section.stateManager.selectedAgent;
        PopUpManager.centerPopUp(popup);
      }
    ]]>
  </fx:Script>

</actionbar:ActionBar>