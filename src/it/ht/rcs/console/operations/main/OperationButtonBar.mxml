<?xml version="1.0" encoding="utf-8"?>
<s:HGroup xmlns:fx="http://ns.adobe.com/mxml/2009"
          xmlns:s="library://ns.adobe.com/flex/spark"
          xmlns:mx="library://ns.adobe.com/flex/mx"
          width="100%" gap="10">

  <s:states>
    <s:State name="default"/>
    
    <s:State name="allOperations"/>
    <s:State name="singleOperation"/>
    
    <s:State name="allTargets"/>
    <s:State name="singleTarget"/>
    
    <s:State name="allAgents"/>
    <s:State name="singleAgent"/>
  </s:states>
  
  <fx:Script>
    <![CDATA[
      import it.ht.rcs.console.factory.model.Factory;
      import it.ht.rcs.console.operation.controller.OperationManager;
      import it.ht.rcs.console.operation.model.Operation;
      import it.ht.rcs.console.operations.OperationsSection;
      import it.ht.rcs.console.operations.factories.FactoryForm;
      import it.ht.rcs.console.operations.operations.OperationForm;
      import it.ht.rcs.console.operations.targets.TargetForm;
      import it.ht.rcs.console.target.model.Target;
      import it.ht.rcs.console.utils.AlertPopUp;
      
      import locale.R;
      
      import mx.core.FlexGlobals;
      import mx.events.CloseEvent;
      import mx.managers.PopUpManager;
      
      // Parent section
      [Bindable]
      public var section:OperationsSection;
      
      private function newClick():void
      {
        if (section.currentState == 'allOperations') doOperation();
        else if (section.currentState == 'singleOperation') doTarget();
        else if (section.currentState == 'singleTarget') doFactory();
      }
      
      private function deleteClick():void
      {
//        AlertPopUp.show(R.get('CONFIRM_OPERATION_DELETION', [section.body.listGridView.itemList.selectedItem.name]),
//          R.get('CONFIRM'),
//          AlertPopUp.YES | AlertPopUp.NO,
//          null,
//          doDelete,
//          null, AlertPopUp.NO);
      }
      
      private function editClick():void
      {
        var item:* = section.body.listGridView.itemList.selectedItem;
        if (item is Operation) doOperation(item);
        else if (item is Target) doTarget(item);
        else if (item is Factory) doFactory(item);
      }
      
      private function doOperation(item:Operation=null):void
      {
        var popup:OperationForm = PopUpManager.createPopUp(FlexGlobals.topLevelApplication as DisplayObject, OperationForm, true) as OperationForm;
        popup.mode = item ? 'edit' : 'new';
        popup.operation = item ? item : new Operation(Operation.defaultOperation());
        PopUpManager.centerPopUp(popup);
      }
      
      private function doTarget(item:Target=null):void
      {
        var popup:TargetForm = PopUpManager.createPopUp(FlexGlobals.topLevelApplication as DisplayObject, TargetForm, true) as TargetForm;
        popup.mode = item ? 'edit' : 'new';
        popup.target = item ? item : new Target(Target.defaultTarget());
        popup.operation = section.stateManager.selectedOperation;
        PopUpManager.centerPopUp(popup);
      }
      
      private function doFactory(item:Factory=null):void
      {
        var popup:FactoryForm = PopUpManager.createPopUp(FlexGlobals.topLevelApplication as DisplayObject, FactoryForm, true) as FactoryForm;
        popup.mode = item ? 'edit' : 'new';
        popup.factory = item ? item : new Factory(Factory.defaultFactory());
        popup.operation = section.stateManager.selectedOperation;
        popup.target = section.stateManager.selectedTarget;
        PopUpManager.centerPopUp(popup);
      }
      
      private function doDelete(e:CloseEvent):void
      {
        if (e.detail == AlertPopUp.YES)
          OperationManager.instance.removeItem(section.body.listGridView.itemList.selectedItem);
      }
    ]]>
  </fx:Script>
  
  <s:HGroup visible.singleAgent="false">
  <s:Button width="30" height="20" click="{section.body.listGridView.selectedIndex = 0}"
            skinClass="it.ht.rcs.console.skins.IconsButton" toolTip="{R.get('GRID_VIEW')}"/>
  <s:Button width="30" height="20" click="{section.body.listGridView.selectedIndex = 1}"
            skinClass="it.ht.rcs.console.skins.ListButton" toolTip="{R.get('LIST_VIEW')}"/>
  
  <s:Spacer width="30"/>
  
  <s:Button width="30" height="20" click="newClick()" skinClass="it.ht.rcs.console.skins.NewButton"
            toolTip="{R.get('NEW')}"
            visible.allOperations="{console.currentSession.user.is_admin()}"
            visible.singleOperation="{console.currentSession.user.is_admin()}"
            visible.singleTarget="{console.currentSession.user.is_tech()}"/>
  <s:Button width="30" height="20" click="editClick()"
            enabled="{section.body.listGridView.itemList.selectedItem != null}"
            skinClass="it.ht.rcs.console.skins.EditButton" toolTip="{R.get('EDIT')}"
            visible.allOperations="{console.currentSession.user.is_admin()}"
            visible.singleOperation="{console.currentSession.user.is_admin()}"
            visible.singleTarget="{console.currentSession.user.is_tech()}"/>
  <s:Button width="30" height="20" click="deleteClick()"
            enabled="{section.body.listGridView.itemList.selectedItem != null}"
            skinClass="it.ht.rcs.console.skins.DeleteButton" toolTip="{R.get('DELETE')}"
            visible.allOperations="{console.currentSession.user.is_admin()}"
            visible.singleOperation="{console.currentSession.user.is_admin()}"
            visible.singleTarget="{console.currentSession.user.is_tech()}"/>
  </s:HGroup>
  
  <s:Spacer width="100%"/>
  
  <s:TextInput id="searchField" width="200"
               keyUp="if (section.stateManager._item_view) section.stateManager._item_view.refresh()"
               skinClass="it.ht.rcs.console.skins.TextInputSearchSkin"/>

</s:HGroup>