<?xml version="1.0" encoding="utf-8"?>
<s:Panel xmlns:fx="http://ns.adobe.com/mxml/2009"
         xmlns:s="library://ns.adobe.com/flex/spark"
         xmlns:mx="library://ns.adobe.com/flex/mx"
         xmlns:operations="it.ht.rcs.console.operations.*"
         addedToStage="onAddedToStage(event)" removedFromStage="onRemovedFromStage(event)"
         title="OPERATIONS">

  <s:layout>
    <s:VerticalLayout gap="5" paddingBottom="5" paddingLeft="5" paddingRight="5" paddingTop="5"/>
  </s:layout>
  
  <s:states>
    <s:State name="allOperations"/>
    <s:State name="singleOperation"/>
    <s:State name="singleTarget"/>
    <s:State name="singleAgent"/>
  </s:states>

  <fx:Script>
    <![CDATA[
      import it.ht.rcs.console.agent.controller.AgentManager;
      import it.ht.rcs.console.agent.model.Agent;
      import it.ht.rcs.console.controller.ItemManager;
      import it.ht.rcs.console.events.DataLoadedEvent;
      import it.ht.rcs.console.operation.controller.OperationManager;
      import it.ht.rcs.console.operation.model.Operation;
      import it.ht.rcs.console.target.controller.TargetManager;
      import it.ht.rcs.console.target.model.Target;
      
      import mx.collections.ListCollectionView;
      
      [Bindable]
      public var _item_view:ListCollectionView;
      
      [Bindable]
      public var selectedOperation:Operation;
      
      [Bindable]
      public var selectedTarget:Target;
      
      [Bindable]
      public var selectedAgent:Agent;
      
      private var CurrentManager:Class;

      private function onAddedToStage(event:Event):void
      {
        switchState('allOperations');
      }
      
      private function onRemovedFromStage(event:Event):void
      {
        CurrentManager.instance.removeEventListener(DataLoadedEvent.DATA_LOADED, onDataLoaded);
        CurrentManager.instance.stop();
        //OperationManager.instance.removeEventListener(DataLoadedEvent.DATA_LOADED, onDataLoaded);
        //OperationManager.instance.stop();
      }
      
      private function onDataLoaded(event:DataLoadedEvent):void
      {
        //if (_item_view == null)
        // _item_view = CurrentManager.instance.getView(null, currentSearchFunction);
        if (currentState == 'allOperations')
          _item_view = OperationManager.instance.getView(null, searchFilterFunction);
        else if (currentState == 'singleOperation')
          _item_view = TargetManager.instance.getView(null, targetFilterFunction);
        else if (currentState == 'singleTarget')
          _item_view = AgentManager.instance.getView(null, agentFilterFunction);
      }
      
      public function switchState(state:String):void
      {
        OperationManager.instance.removeEventListener(DataLoadedEvent.DATA_LOADED, onDataLoaded);
        OperationManager.instance.stop();
        
        TargetManager.instance.removeEventListener(DataLoadedEvent.DATA_LOADED, onDataLoaded);
        TargetManager.instance.stop();
        
        AgentManager.instance.removeEventListener(DataLoadedEvent.DATA_LOADED, onDataLoaded);
        AgentManager.instance.stop();
        
        switch (state) {
          case 'allOperations':
            OperationManager.instance.addEventListener(DataLoadedEvent.DATA_LOADED, onDataLoaded);
            OperationManager.instance.start();
            CurrentManager = OperationManager;
            currentState = 'allOperations';
            break;
          case 'singleOperation':
            TargetManager.instance.addEventListener(DataLoadedEvent.DATA_LOADED, onDataLoaded);
            TargetManager.instance.start();
            currentState = 'singleOperation';
            break;
          case 'singleTarget':
            AgentManager.instance.addEventListener(DataLoadedEvent.DATA_LOADED, onDataLoaded);
            AgentManager.instance.start();
            currentState = 'singleTarget';
            break;
          case 'singleAgent':
            break;
          default:
            break;
        }
      }
      
      private function changeItem(item:*):void
      {
        // user clicked on an operation
        if (currentState == 'allOperations')
        {
          
          selectedOperation = item;

          OperationManager.instance.removeEventListener(DataLoadedEvent.DATA_LOADED, onDataLoaded);
          OperationManager.instance.stop();
          
          currentState = 'singleOperation';
          
          TargetManager.instance.addEventListener(DataLoadedEvent.DATA_LOADED, onDataLoaded);
          TargetManager.instance.start();
          
        }
        
        // user clicked on an target
        else if (currentState == 'singleOperation')
        {
          
          selectedTarget = item;
          
          TargetManager.instance.removeEventListener(DataLoadedEvent.DATA_LOADED, onDataLoaded);
          TargetManager.instance.stop();
          
          currentState = 'singleTarget';
          
          AgentManager.instance.addEventListener(DataLoadedEvent.DATA_LOADED, onDataLoaded);
          AgentManager.instance.start();
          
        }
        
        else if (currentState == 'singleTarget')
        {
          
          selectedAgent = item;
          
          currentState = 'singleAgent';

        }

      }
      
      private function searchFilterFunction(item:Object):Boolean
      {
        if (!bb || !bb.searchField || bb.searchField.text == '')
          return true;
        var result:Boolean = String(item.name.toLowerCase()).indexOf(bb.searchField.text.toLowerCase()) >= 0;
        return result;
      }
      
      private function targetFilterFunction(item:Object):Boolean
      {
        if (item.path[0] == selectedOperation._id)
          return searchFilterFunction(item);
        else return false;
      }
      
      private function agentFilterFunction(item:Object):Boolean
      {
        if (item.path[1] == selectedTarget._id)
          return searchFilterFunction(item);
        else return false;
      }
      
      private function onDoubleClick(event:MouseEvent):void
      {
        changeItem(itemList.selectedItem);
      }
    ]]>
  </fx:Script>
  
  <operations:OperationBreadcrumb width="100%" section="{this}"/>
  
  <operations:OperationButtonBar id="bb" width="100%" section="{this}"/>
  
  <mx:ViewStack id="views" width="100%" height="100%">
    
    <s:NavigatorContent hideEffect="{fadeOut}" icon="@Embed('img/buttons/apply.png')"
                        showEffect="{fadeIn}">
      
      <s:List id="itemList" width="100%" height="100%" dataProvider="{_item_view}"
              doubleClick="onDoubleClick(event)" doubleClickEnabled="true"
              itemRenderer="it.ht.rcs.console.operations.OperationListRenderer" labelField="name"
              selectedItem="{itemGrid.selectedItem}">
        <s:layout>
          <s:TileLayout horizontalGap="10" paddingBottom="5" paddingLeft="5" paddingRight="5"
                        paddingTop="5" verticalGap="10"/>
        </s:layout>
      </s:List>
      
    </s:NavigatorContent>
    
    <s:NavigatorContent hideEffect="{fadeOut}" icon="@Embed('img/buttons/apply.png')"
                        showEffect="{fadeIn}">
      <s:DataGrid id="itemGrid" width="100%" height="100%" dataProvider="{_item_view}"
                  selectedItem="{itemList.selectedItem}">
      <s:columns>
        <s:ArrayList>
          <s:GridColumn dataField="name" headerText="Name"/>
          <s:GridColumn dataField="desc" headerText="Description"/>
          <s:GridColumn dataField="status" headerText="Status"/>
          <s:GridColumn dataField="updated_at" headerText="Last Sync"/>
          <s:GridColumn dataField="name" headerText="Path"/>
          <s:GridColumn dataField="stat" headerText="Size"
                        visible.singleOperation="false"/>
        </s:ArrayList>
      </s:columns>
      </s:DataGrid>
    </s:NavigatorContent>
    
  </mx:ViewStack>
  
  <fx:Declarations>
    <s:Fade id="fadeIn" alphaFrom="0" alphaTo="1" duration="150"/>
    <s:Fade id="fadeOut" alphaFrom="1" alphaTo="0" duration="150"/>
  </fx:Declarations>

</s:Panel>