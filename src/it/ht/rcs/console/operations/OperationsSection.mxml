<?xml version="1.0" encoding="utf-8"?>
<s:Panel xmlns:fx="http://ns.adobe.com/mxml/2009"
         xmlns:s="library://ns.adobe.com/flex/spark"
         xmlns:mx="library://ns.adobe.com/flex/mx"
         xmlns:operations="it.ht.rcs.console.operations.*"
         addedToStage="onAddedToStage(event)" creationComplete="init()"
         removedFromStage="onRemovedFromStage(event)" title="OPERATIONS">

  <s:layout>
    <s:VerticalLayout gap="5" paddingBottom="5" paddingLeft="5" paddingRight="5" paddingTop="5"/>
  </s:layout>
  
  <s:states>
    <s:State name="default"/>
    
    <s:State name="allOperations"/>
    <s:State name="singleOperation"/>
    
    <s:State name="allTargets"/>
    <s:State name="singleTarget"/>
    
    <s:State name="allAgents"/>
    <s:State name="singleAgent"/>
  </s:states>

  <fx:Script>
    <![CDATA[
      import it.ht.rcs.console.agent.controller.AgentManager;
      import it.ht.rcs.console.agent.model.Agent;
      import it.ht.rcs.console.events.DataLoadedEvent;
      import it.ht.rcs.console.events.SessionEvent;
      import it.ht.rcs.console.operation.controller.OperationManager;
      import it.ht.rcs.console.operation.model.Operation;
      import it.ht.rcs.console.target.controller.TargetManager;
      import it.ht.rcs.console.target.model.Target;
      
      import mx.collections.ListCollectionView;
      import mx.core.FlexGlobals;
      
      import spark.collections.Sort;
      import spark.collections.SortField;
      
      [Bindable]
      public var _item_view:ListCollectionView;
      
      [Bindable]
      public var selectedOperation:Operation;
      
      [Bindable]
      public var selectedTarget:Target;
      
      [Bindable]
      public var selectedAgent:Agent;
      
      private var CurrentManager:Class;
      private var currentFilter:Function;
      private var customTypeSort:Sort;
      
      private function init():void
      {
        customTypeSort = new Sort();
        var customTypeSortField:SortField = new SortField('customType', false, false);
        customTypeSortField.compareFunction = customTypeCompareFunction;
        customTypeSort.fields = [customTypeSortField, new SortField('name', false, false)];
        
        FlexGlobals.topLevelApplication.addEventListener(SessionEvent.LOGGING_OUT, onLoggingOut);
        switchState('allOperations');
      }
      
      private function customTypeCompareFunction(a:Object, b:Object):int
      {
        var aHas:Boolean = a.hasOwnProperty('customType');
        var bHas:Boolean = b.hasOwnProperty('customType');
        if ((aHas &&  bHas) || (!aHas && !bHas)) return 0;
        if (aHas) return -1 else return 1;
      }
      
      private function onAddedToStage(event:Event):void
      {
        switchState(currentState);
      }
      
      private function onLoggingOut(event:SessionEvent):void
      {
        stopManagers();
        selectedOperation = null; selectedTarget = null; selectedAgent = null;
        currentState = 'allOperations';
      }
      
      private function onRemovedFromStage(event:Event):void
      {
        if (CurrentManager)
        {
          CurrentManager.instance.removeEventListener(DataLoadedEvent.DATA_LOADED, onDataLoaded);
          CurrentManager.instance.stop();
        }
      }
      
      private function onDataLoaded(event:DataLoadedEvent):void
      {
        if (CurrentManager == AgentManager) {
          _item_view = CurrentManager.instance.getView(customTypeSort, currentFilter);
          _item_view.addItemAt({name: 'File System', customType: 'filesystem'}, 0);
          _item_view.addItemAt({name: 'Evidences',   customType: 'evidences'}, 0);
        } else {
          _item_view = CurrentManager.instance.getView(null, currentFilter);
        }
      }
      

      
      public function switchState(state:String):void
      {
        
        stopManagers();
        
        switch (state) {
          case 'allOperations':
            selectedOperation = null; selectedTarget = null; selectedAgent = null;
            CurrentManager = OperationManager;
            currentFilter = searchFilterFunction;
            OperationManager.instance.addEventListener(DataLoadedEvent.DATA_LOADED, onDataLoaded);
            OperationManager.instance.start();
            currentState = 'allOperations';
            break;
          case 'singleOperation':
            selectedTarget = null; selectedAgent = null;
            CurrentManager = TargetManager;
            currentFilter = targetFilterFunction;
            TargetManager.instance.addEventListener(DataLoadedEvent.DATA_LOADED, onDataLoaded);
            TargetManager.instance.start();
            currentState = 'singleOperation';
            break;
          case 'singleTarget':
            if (console.currentSession.user.is_tech()) {
              selectedAgent = null;
              CurrentManager = AgentManager;
              currentFilter = agentFilterFunction;
              AgentManager.instance.addEventListener(DataLoadedEvent.DATA_LOADED, onDataLoaded);
              AgentManager.instance.start();
              currentState = 'singleTarget';
            }
            break;
          case 'singleAgent':
            if (console.currentSession.user.is_view())
              currentState = 'singleAgent';
            break;
          default:
            break;
        }
      }
      
      private function stopManagers():void
      {
        OperationManager.instance.removeEventListener(DataLoadedEvent.DATA_LOADED, onDataLoaded);
        OperationManager.instance.stop();
        
        TargetManager.instance.removeEventListener(DataLoadedEvent.DATA_LOADED, onDataLoaded);
        TargetManager.instance.stop();
        
        AgentManager.instance.removeEventListener(DataLoadedEvent.DATA_LOADED, onDataLoaded);
        AgentManager.instance.stop();
      }
      
      private function changeItem(item:*):void
      {
        // user clicked on an operation
        if (currentState == 'allOperations')
        {
          selectedOperation = item;
          switchState('singleOperation');
        }
        
        // user clicked on a target
        else if (currentState == 'singleOperation')
        {
          if (console.currentSession.user.is_tech()) {
            selectedTarget = item;
            switchState('singleTarget');
          }
        }
        
        // user clicked on an agent
        else if (currentState == 'singleTarget')
        {
          selectedAgent = item;
          switchState('singleAgent');
        }
      }
      
      private function searchFilterFunction(item:Object):Boolean
      {
        if (!bb || !bb.searchField || bb.searchField.text == '')
          return true;
        var result:Boolean = String(item.name.toLowerCase()).indexOf(bb.searchField.text.toLowerCase()) >= 0;
        return result;
      }
      
      private function targetFilterFunction(item:Object):Boolean
      {
        if (item.path[0] == selectedOperation._id)
          return searchFilterFunction(item);
        else return false;
      }
      
      private function agentFilterFunction(item:Object):Boolean
      {
        if (!(item is Agent)) return true;
        if (item.path[1] == selectedTarget._id)
          return searchFilterFunction(item);
        else return false;
      }
    ]]>
  </fx:Script>

  <s:HGroup width="100%">
    <operations:BreadcrumbPath width="100%" section="{this}"/>
    <operations:BreadcrumbType section="{this}"/>
  </s:HGroup>
  
  <operations:OperationButtonBar id="bb" width="100%" currentState="{currentState}" section="{this}"/>
  
  <mx:ViewStack id="views" width="100%" height="100%">
    
    <s:NavigatorContent hideEffect="{fadeOut}" icon="@Embed('img/buttons/apply.png')" showEffect="{fadeIn}">
      
      <s:List id="itemList" width="100%" height="100%" dataProvider="{_item_view}"
              doubleClick="changeItem(itemList.selectedItem)" doubleClickEnabled="true"
              itemRenderer="it.ht.rcs.console.operations.OperationListRenderer" labelField="name"
              selectedItem="{itemGrid.selectedItem}">
        <s:layout>
          <s:TileLayout horizontalGap="10" paddingBottom="5" paddingLeft="5" paddingRight="5"
                        paddingTop="5" verticalGap="10"/>
        </s:layout>
      </s:List>
      
    </s:NavigatorContent>
    
    <s:NavigatorContent hideEffect="{fadeOut}" icon="@Embed('img/buttons/apply.png')" showEffect="{fadeIn}">

      <operations:OperationGrid id="itemGrid" width="100%" height="100%"
                                currentState="{currentState}" dataProvider="{_item_view}"
                                doubleClick="changeItem(itemGrid.selectedItem)"
                                doubleClickEnabled="true" selectedItem="{itemList.selectedItem}"/>
      
    </s:NavigatorContent>
    
  </mx:ViewStack>
  
  <fx:Declarations>
    <s:Fade id="fadeIn" alphaFrom="0" alphaTo="1" duration="150"/>
    <s:Fade id="fadeOut" alphaFrom="1" alphaTo="0" duration="150"/>
  </fx:Declarations>

</s:Panel>