<?xml version="1.0" encoding="utf-8"?>
<mx:UIComponent xmlns:fx="http://ns.adobe.com/mxml/2009"
								xmlns:s="library://ns.adobe.com/flex/spark"
								xmlns:mx="library://ns.adobe.com/flex/mx"
								creationComplete="init()"
								resize="onResize(event)"
                move="onResize(event)" 
                removedFromStage="onRemovedFromStage(event)">
	<fx:Metadata> 
    [Event(name="change", type="flash.events.Event")]
    [Event(name="ready", type="flash.events.Event")]
  </fx:Metadata>
	<fx:Script>
		<![CDATA[
      import es.xperiments.media.StageWebViewBridge;
      import es.xperiments.media.StageWebViewBridgeEvent;
      import es.xperiments.media.StageWebViewDisk;
      import es.xperiments.media.StageWebviewDiskEvent;
      
      import flash.utils.setTimeout;
      
      import it.ht.rcs.console.entities.model.Entity;
      import it.ht.rcs.console.evidence.controller.EvidenceManager;
      import it.ht.rcs.console.evidence.model.Evidence;
      
      import mx.events.FlexEvent;
      import mx.events.ResizeEvent;

			public var webView:StageWebViewBridge;
			private var inited:Boolean;
			private var frame:Sprite;
			public var positions:Vector.<Object>
			public var selectedPosition:Evidence;


			protected function init():void
			{

			}

			public function update():void
			{
				//trace("MAP VIEWR UPDATE CALLED!!!!")
				if (stage)
					onAddedToStage(null)
				else
					this.addEventListener(Event.ADDED_TO_STAGE, onAddedToStage)
			}

			public function clearOverlays():void
			{
				webView.call("clearOverlays", null)
			}


			public function setCenter(lat:Number, lng:Number):void
			{
				webView.call("setCenter", null, lat, lng)
			}

			public function addCircle(center:Object, radius:Number):void
			{
				webView.call("addCircle", null, center, radius)
			}


			public function onSelection(data:String):void
			{
				for (var i:int=0; i < positions.length; i++)
				{
					if (positions[i]._id == data)
					{
						selectedPosition=positions[i] as Evidence;
					}
				}

				dispatchEvent(new Event("change"));
			}

		

			public function addMarker(lat:Number, lng:Number, icon:String, data:String):void
			{
				var dir:File=File.applicationDirectory;
				dir=dir.resolvePath("maps/icons");
				webView.call("addMarker", null, lat, lng, "file:///" + dir.nativePath + "/" + icon, data);
			}

			protected function onAddedToStage(event:Event):void
			{
				if (webView)
					this.removeChild(webView);
        this.stage.addEventListener(Event.RESIZE, onResize);
        //this.addEventListener(Event.ENTER_FRAME, onResize) // TOO EXPENSIVE
				StageWebViewDisk.addEventListener(StageWebviewDiskEvent.START_DISK_PARSING, onDiskCacheStart);
				StageWebViewDisk.addEventListener(StageWebviewDiskEvent.END_DISK_PARSING, onDiskCacheEnd);
				StageWebViewDisk.initialize(this.stage);

			}

			protected function onDiskCacheStart(e:StageWebviewDiskEvent):void
			{
				trace("SWVD parsing started");
			}

			protected function onDiskCacheEnd(e:StageWebviewDiskEvent):void
			{
				trace("SWVD parsing ended");

				webView=new StageWebViewBridge(0, 0, this.height, this.height, true, true);
        webView.addEventListener( StageWebViewBridgeEvent.ON_GET_SNAPSHOT, onGetSnapShot );
				webView.addCallback("onSelection", onSelection);
				webView.addEventListener(Event.ADDED_TO_STAGE, onWebViewAddedToStage);
				this.addChild(webView);
			}
      
      private function onGetSnapShot( e:StageWebViewBridgeEvent ):void
      {
        // remove listener
       // webView.removeEventListener( StageWebViewBridgeEvent.ON_GET_SNAPSHOT, onGetSnapShot ); ?????
        // set the bitmapdata visible, hides de stagewebview
        webView.snapShotVisible = true;
      }

			protected function setIconPath():void
			{
				var dir:File=File.applicationDirectory;
				dir=dir.resolvePath("maps/icons");
				webView.call("setIconPath", null, "file:///" + dir.nativePath + "/");
			}

			protected function onWebViewAddedToStage(e:Event):void
			{
				var fPath:String=new File(new File("app:/maps/GoogleMapsV3_JSFunctions.html").nativePath).url;
				webView.addEventListener(Event.COMPLETE, onMapLoaded);
				webView.loadURL(fPath);
				onResize(null);
			}

			protected function onMapLoaded(e:Event):void
			{
				setIconPath();
				clearOverlays();
				for (var i:int=0; i < positions.length; i++) //could be evidence or entity
				{
          if(positions[i] is Evidence)
          {
            var evidence:Evidence=positions[i] as Evidence;
            addCircle({lat: evidence.data.latitude, lng: evidence.data.longitude}, evidence.data.accuracy)
            addMarker(evidence.data.latitude, evidence.data.longitude, "mapMarker.png", evidence._id);
          }
          
          else  if(positions[i] is Entity)
          {
            var entity:Entity=positions[i] as Entity;
            addCircle({lat: Number(entity.position.latitude), lng: Number(entity.position.longitude)}, Number(entity.position_attr.accuracy))
            addMarker( Number(entity.position.latitude), Number(entity.position.longitude), "mapMarker.png", entity._id);
          }
				
						//setCenter(pos.data.latitude,pos.data.longitude);
						//addCircle({lat:pos.data.latitude, lng:pos.data.longitude}, pos.data.accuracy) // /1000
				}
				//loop over positions
				//addMarker(50,70, "mapMarker.png")
			}

			protected function onResize(event:Event):void
			{
				var pos:Point=this.localToGlobal(new Point(this.x, this.y));

				if (webView)
				{
					webView.x=pos.x;
					webView.y=pos.y;
					webView.width=this.width;
					webView.height=this.height;
					webView.viewPort=new Rectangle(pos.x, pos.y, this.width, this.height);
				} 
       
			}
      
      
      public function getSnapshot():void
      {
          webView.getSnapShot()
      }
      
    
      
      protected function onRemovedFromStage(event:Event):void
      {
      //this.removeEventListener(Event.ENTER_FRAME, onResize)
        
      }
      
    ]]>
	</fx:Script>

</mx:UIComponent>
