<?xml version="1.0" encoding="utf-8"?>
<s:Panel xmlns:fx="http://ns.adobe.com/mxml/2009"
         xmlns:s="library://ns.adobe.com/flex/spark"
         xmlns:mx="library://ns.adobe.com/flex/mx"
         xmlns:search="it.ht.rcs.console.operations.search.*"
         xmlns:items="it.ht.rcs.console.utils.items.*"
         width="100%" height="100%" addedToStage="added()" removedFromStage="removed()" creationComplete="init()"
         title="DASHBOARD">

  <fx:Script>
    <![CDATA[
      import it.ht.rcs.console.dashboard.controller.DashboardController;
      import it.ht.rcs.console.events.DataLoadedEvent;
      import it.ht.rcs.console.search.controller.SearchManager;
      import it.ht.rcs.console.utils.items.ItemEvent;
      
      import mx.collections.ListCollectionView;
      import mx.collections.Sort;
      import mx.collections.SortField;
      
      [Bindable]
      private var _dashboard_items:ListCollectionView;
      
      private function init():void
      {
        searchField.addEventListener(ItemEvent.ITEM_SELECTED, onSelectSearchItem);
      }
      
      private function added():void
      {
        DashboardController.instance.addEventListener(DataLoadedEvent.DATA_LOADED, onDashboardDataLoaded);
        /* the controller needs the current user */
        DashboardController.instance.user = console.currentSession.user;
        DashboardController.instance.start();
        if (searchField)
          searchField.selectedItem = null;
      }
      
      private function onDashboardDataLoaded(event:DataLoadedEvent):void
      {
        if (_dashboard_items == null)
          _dashboard_items = DashboardController.instance.getView();
      }
      
      private function removed():void
      {
        DashboardController.instance.removeEventListener(DataLoadedEvent.DATA_LOADED, onDashboardDataLoaded);
        DashboardController.instance.stop();
        _dashboard_items = null;
      }
      
      private function onSelectSearchItem(event:ItemEvent):void
      {
        DashboardController.instance.newDashItem(event.selectedItem._id);  
      }
      
      private function sort_by_time():void
      {
        var sort:Sort = new Sort();
        sort.fields = [new SortField('lastsync', true, true, true)];
        _dashboard_items.sort = sort;
        _dashboard_items.refresh();
      }
      
      private function sort_by_name():void
      {
        var sort:Sort = new Sort();
        sort.fields = [new SortField('name', true, false, false)];
        _dashboard_items.sort = sort;
        _dashboard_items.refresh();
      }
      
    ]]>
  </fx:Script>
  
  <!-- button bar (transparent container) -->  
  <s:BorderContainer left="5" right="5" top="5" height="30" backgroundAlpha="0.0"
                     borderVisible="false">
    <s:Button x="0" y="0" width="30" height="20" label="S"
              skinClass="it.ht.rcs.console.skins.SortTimeButton"
              toolTip="{resourceManager.getString('localized_main', 'SORT_BY_TIME')}"/>
    <s:Button x="40" y="0" width="30" height="20" label="S"
              skinClass="it.ht.rcs.console.skins.SortNameButton"
              toolTip="{resourceManager.getString('localized_main', 'SORT_BY_NAME')}"/>
    <items:SearchField id="searchField" right="5" top="0" kinds="{['operation', 'target', 'agent']}"/>
  </s:BorderContainer>
  
  <!-- item list -->
  <s:List id="items" left="5" right="5" top="30" bottom="5" click="{items.selectedIndex = -1}"
          dataProvider="{_dashboard_items}"
          itemRenderer="it.ht.rcs.console.dashboard.view.DashboardRenderer"/>
  
</s:Panel>