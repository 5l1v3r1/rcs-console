<?xml version="1.0" encoding="utf-8"?>
<main:Section xmlns:fx="http://ns.adobe.com/mxml/2009"
         xmlns:s="library://ns.adobe.com/flex/spark"
         xmlns:mx="library://ns.adobe.com/flex/mx"
         xmlns:main="it.ht.rcs.console.main.*"
         xmlns:dashboard="it.ht.rcs.console.dashboard.view.*"
         xmlns:search="it.ht.rcs.console.operations.search.*"
         xmlns:items="it.ht.rcs.console.utils.items.*"
         addedToStage="onAddedToStage()" creationComplete="init()"
         removedFromStage="onRemovedFromStage()">

  <fx:Script>
    <![CDATA[
      import it.ht.rcs.console.controller.Sort;
      import it.ht.rcs.console.dashboard.controller.DashboardController;
      import it.ht.rcs.console.events.DataLoadedEvent;
      import it.ht.rcs.console.search.model.SearchItem;
      import it.ht.rcs.console.utils.items.ItemEvent;
      
      import mx.collections.ISort;
      import mx.collections.ListCollectionView;
      import mx.collections.SortField;
      
      [Bindable]
      private var _dashboard_items:ListCollectionView;
      
      private function init():void
      {
        //searchField.addEventListener(ItemEvent.ITEM_SELECTED, onSelectSearchItem);
      }
      
      private function onAddedToStage():void
      {
        DashboardController.instance.addEventListener(DataLoadedEvent.DATA_LOADED, onDashboardDataLoaded);
        DashboardController.instance.user = Console.currentSession.user;
        DashboardController.instance.startAutoRefresh();
        DashboardController.instance.refresh();
//        if (searchField)
//          searchField.selectedItem = null;
      }
      
      private function onRemovedFromStage():void
      {
        DashboardController.instance.removeEventListener(DataLoadedEvent.DATA_LOADED, onDashboardDataLoaded);
        DashboardController.instance.stopAutoRefresh();
        _dashboard_items = null;
      }
      
      private function onDashboardDataLoaded(event:DataLoadedEvent):void
      {
        if (_dashboard_items == null) {
          var sort:ISort = new Sort();
          _dashboard_items = DashboardController.instance.getView();
          sort.compareFunction = compareSyncTime;
          _dashboard_items.sort = sort;
          _dashboard_items.refresh();
        }
      }
      
      private function onSelectSearchItem(event:ItemEvent):void
      {
        DashboardController.instance.newDashItem(event.selectedItem._id);  
      }
      
      private function compareSyncTime(a:SearchItem, b:SearchItem, fields:Array=null):int {
        if (a.stat.last_sync < b.stat.last_sync)
          return 1;
        else if (a.stat.last_sync > b.stat.last_sync)
          return -1;
        else
          return 0
      };
      
      private function sort_by_time():void
      {
        var sort:Sort = new Sort();
        sort.compareFunction = compareSyncTime;
        _dashboard_items.sort = sort;
        _dashboard_items.refresh();
      }
      
      private function sort_by_name():void
      {
        _dashboard_items.sort = new Sort();
        _dashboard_items.refresh();
      }
      
    ]]>
  </fx:Script>
  
  <main:layout>
    <s:VerticalLayout gap="5" paddingBottom="5" paddingLeft="5" paddingRight="5" paddingTop="5"/>
  </main:layout>
  
  <dashboard:DashboardActionBar/>
  
  <!--
  <s:BorderContainer left="5" right="5" top="5" height="30" backgroundAlpha="0.0"
                     borderVisible="false">
    <s:Button x="0" y="0" width="30" height="20" label="S" click="sort_by_time()"
              skinClass="it.ht.rcs.console.skins.SortTimeButton"
              toolTip="{resourceManager.getString('localized_main', '')}"/>
    <s:Button x="40" y="0" width="30" height="20" label="S" click="sort_by_name()"
              skinClass="it.ht.rcs.console.skins.SortNameButton"
              toolTip="{resourceManager.getString('localized_main', '')}"/>
    
  </s:BorderContainer>
  -->
  
  <s:List id="items" click="{items.selectedIndex = -1}" width="100%" height="100%"
          dataProvider="{_dashboard_items}"
          itemRenderer="it.ht.rcs.console.dashboard.view.DashboardRenderer"/>
  
</main:Section>