<?xml version="1.0" encoding="utf-8"?>
<s:ItemRenderer xmlns:fx="http://ns.adobe.com/mxml/2009"
                xmlns:s="library://ns.adobe.com/flex/spark"
                xmlns:mx="library://ns.adobe.com/flex/mx"
                xmlns:renderer="it.ht.rcs.console.dashboard.view.renderer.*"
                autoDrawBackground="false" buttonMode="true" click="onClick(event)"
                toolTip="{data.type}" toolTipShow="onToolTipShow(event)">
  
  <s:layout>
    <s:VerticalLayout gap="8" horizontalAlign="center" paddingBottom="10" paddingLeft="10"
                      paddingRight="10" paddingTop="10" verticalAlign="top"/>
  </s:layout>
  
  <fx:Script>
    <![CDATA[
      import it.ht.rcs.console.events.SectionEvent;
      import it.ht.rcs.console.operations.view.configuration.advanced.renderers.ModuleIcons;
      import it.ht.rcs.console.search.controller.SearchManager;
      import it.ht.rcs.console.evidence.controller.EvidenceManager;
      import it.ht.rcs.console.events.FilterEvent;
      
      import mx.controls.ToolTip;
      import mx.core.FlexGlobals;
      import mx.events.ToolTipEvent;
      import mx.managers.ToolTipManager;
      
      
      [Embed(source='/img/NEW/device/compass.png')]
      private static const compassIcon:Class;
      
      override public function set data(value:Object):void
      {
        super.data = value;
        icon.source = data ? ModuleIcons[data.type] : null;
        toolTip = data ? data.type : null;
      }
      
      private function onToolTipShow(e:ToolTipEvent):void
      {
        var pt:Point = new Point(container.x, container.y);
        var globalPoint:Point = container.contentToGlobal(pt);
        e.toolTip.x=globalPoint.x;
        e.toolTip.y=globalPoint.y+50;
      }
      
     
      
      private function onClick(e:MouseEvent):void
      {
        
       /*  FlexGlobals.topLevelApplication.dispatchEvent(new FilterEvent(FilterEvent.RESET_FILTER));
        var filter:Object = EvidenceManager.instance.evidenceFilter;
        filter.date = 'dr';
        delete(filter._id);
        filter.from = "24h";
        filter.to = 0;
        delete(filter.rel);
        delete(filter.info);
        delete(filter.blo);
        FlexGlobals.topLevelApplication.dispatchEvent(new FilterEvent(FilterEvent.REBUILD));
        FlexGlobals.topLevelApplication.dispatchEvent(new FilterEvent(FilterEvent.FILTER_CHANGED));  */

        
        var event:SectionEvent = new SectionEvent(SectionEvent.CHANGE_SECTION);
        event.section = SectionEvent.OPERATIONS;
        event.subsection = 'evidence';
        event.item = SearchManager.instance.getItem(this.parentDocument.hostComponent.itemId);
        event.evidenceTypes = [data.type];
        event.from=0
        event.to=0
        FlexGlobals.topLevelApplication.dispatchEvent(event);
      
      }
      
      private function onRoll(event:MouseEvent):void
      {
        container.setStyle('backgroundColor', event.type == MouseEvent.ROLL_OVER ? 0xa8c6ee : 0xffffff);
       
      }
    ]]>
  </fx:Script>
  
  <s:BorderContainer id="container" width="50" height="50" borderColor="#dddddd" cornerRadius="10" rollOver="onRoll(event)" rollOut="onRoll(event)">
    <s:Group width="100%" x="-6" y="-6" >
    <s:Image id="icon" width="36" height="36" horizontalCenter="0" smooth="true"
             verticalCenter="0"/>
    <s:Image source="{compassIcon}" x="30" y="30" visible="{data &amp;&amp; data.hasOwnProperty('scout') &amp;&amp; data.scout}"/>
    </s:Group>
  <renderer:CounterBaloon visible="{data.sync != 0}" right="-4" top="-8" style="red" 
                            value="{data.sync}"/>
    <renderer:CounterBaloon visible="{data.tot != 0}" right="-4" bottom="-3" style="white"
                            value="{data.tot}"/>
  
    
  </s:BorderContainer>
  
</s:ItemRenderer>