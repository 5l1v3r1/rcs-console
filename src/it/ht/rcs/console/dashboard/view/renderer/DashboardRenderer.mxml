<?xml version="1.0" encoding="utf-8"?>
<s:ItemRenderer xmlns:fx="http://ns.adobe.com/mxml/2009"
                xmlns:s="library://ns.adobe.com/flex/spark"
                xmlns:mx="library://ns.adobe.com/flex/mx"
                xmlns:view="it.ht.rcs.console.dashboard.view.*"
                xmlns:renderer="it.ht.rcs.console.dashboard.view.renderer.*"
                xmlns:utils="it.ht.rcs.console.utils.*"
                autoDrawBackground="false" addedToStage="onAddedToStage()" removedFromStage="onRemovedFromStage()">
  
  <s:layout>
    <s:VerticalLayout paddingBottom="10" paddingLeft="10" paddingRight="10" paddingTop="10"/>
  </s:layout>
  
  <fx:Script>
    <![CDATA[
      import it.ht.rcs.console.dashboard.controller.DashboardController;
      import it.ht.rcs.console.dashboard.controller.DashboardItem;
      import it.ht.rcs.console.utils.TimeUtils;
      
      import locale.R;
      
      import mx.events.FlexEvent;
      
      [Bindable]
      private var item:DashboardItem;
      
      private var tick:Timer = new Timer(1000);
      
      private function onAddedToStage():void
      {
        tick.addEventListener(TimerEvent.TIMER, onTick);
        tick.start();
      }
      
      public function onRemovedFromStage():void
      {
        tick.removeEventListener(TimerEvent.TIMER, onTick);
        tick.stop();
      }
      
      private function onTick(e:Event):void
      {
        try {
          lastSyncText.text = R.get('LAST_SYNC') + ':  ' + TimeUtils.timestampDiffFromNow(item.lastSync) + ' ago (' +
          TimeUtils.timestampFormatter(item.lastSync * 1000) + ')';
        } catch (e:Error) {}
      }
      
      override public function set data(value:Object):void
      {
        super.data = value;
        if (!data) return;
        item = value as DashboardItem;
        icon.source = Icons[item._kind];
        currentState = item._kind;
      }
      
      private function onMinimize(event:MouseEvent):void
      {
        details.visible = details.includeInLayout = !details.visible;
      }
      
      private function onDelete(event:MouseEvent):void
      {
        DashboardController.instance.removeItem(data);
      }
    ]]>
  </fx:Script>
  
  <s:states>
    <s:State name="agent"/>
    <s:State name="target"/>
    <s:State name="operation"/>
  </s:states>
  
  <s:BorderContainer width="100%" borderColor="#dddddd" borderWeight="2" cornerRadius="10">
    
    <s:Rect width="100%" height="100%" radiusX="10" radiusY="10">
      <s:fill>
        <s:LinearGradient rotation="90">
          <s:GradientEntry color="#eeeeee"/>
          <s:GradientEntry color="#ffffff"/>
          <s:GradientEntry color="#ffffff"/>
        </s:LinearGradient>
      </s:fill>
    </s:Rect>
    
    <s:VGroup width="100%" gap="15" paddingBottom="10" paddingLeft="10" paddingRight="10" paddingTop="10">
      
      <s:HGroup width="100%" gap="8" verticalAlign="middle">
        <s:BitmapImage id="icon"/>
        <s:Label fontFamily="Myriad" fontSize="18" fontWeight="bold" paddingTop="2" text="{item.name}" width="300"/>
        
        <s:Label id="lastSyncText" fontFamily="Myriad" fontSize="13" paddingRight="10" paddingTop="5" width="180"/>
        
        <renderer:CounterBaloon visible="{!details.visible &amp;&amp; item.totSync != 0}" style="red" value="{item.totSync}"/>
        <renderer:CounterBaloon visible="{!details.visible}" style="white" value="{item.totTot}"/>
        
        <s:Spacer width="100%"/>
        
        <s:Label buttonMode="true" click="onMinimize(event)" fontFamily="Myriad" fontSize="18" text="_"/>
        <s:Label fontFamily="Myriad" fontSize="18" text="X" buttonMode="true" click="onDelete(event)"/>
      </s:HGroup>
      
      <s:HGroup id="details" width="100%">
        <renderer:ModuleList dataProvider="{item.modules}" includeIn="target,agent"/>
        <renderer:TargetList dataProvider="{item.targets}" includeIn="operation"/>
      </s:HGroup>
      
    </s:VGroup>
    
  </s:BorderContainer>

</s:ItemRenderer>